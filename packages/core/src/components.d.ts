/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariant } from "./components/button/button";
import { FilterState } from "./components/category-filter/filter-state";
import { InputState } from "./components/category-filter/input-state";
import { DateTimeCardCorners } from "./components/date-time-card/date-time-card";
import { DateChangeEvent, LegacyDateChangeEvent } from "./components/date-picker/date-picker";
import { DateTimeCardCorners as DateTimeCardCorners1 } from "./components/date-time-card/date-time-card";
import { DateTimeDateChangeEvent, DateTimeSelectEvent } from "./components/datetime-picker/datetime-picker";
import { Placement } from "./components/dropdown/placement";
import { DropdownTriggerEvent } from "./components/dropdown/dropdown";
import { DropdownButtonVariant } from "./components/dropdown-button/dropdown-button";
import { EmptyStateLayout } from "./components/empty-state/empty-state";
import { FlipTileState } from "./components/flip-tile/flip-tile-state";
import { IconButtonVariant } from "./components/icon-button/icon-button";
import { IndexButtonVariant } from "./components/index-button/index-button";
import { KeyValueLabelPosition } from "./components/key-value/key-value";
import { NotificationColor } from "./components/utils/notification-color";
import { ModalConfig, ModalInstance } from "./components/modal/modal-utils";
import { PageHeaderVariant } from "./components/page-header/page-header";
import { SplitButtonVariant } from "./components/split-button/split-button";
import { TimePickerCorners } from "./components/time-picker/time-picker";
import { ToastConfig, ToastType } from "./components/toast/toast-utils";
import { TypedEvent } from "./components/utils/typed-event";
import { TreeContext, TreeItemContext, TreeModel, UpdateCallback } from "./components/tree/tree-model";
import { TypographyColors, TypographyVariants } from "./components/typography/typography";
import { UploadFileState } from "./components/upload/upload-file-state";
export { ButtonVariant } from "./components/button/button";
export { FilterState } from "./components/category-filter/filter-state";
export { InputState } from "./components/category-filter/input-state";
export { DateTimeCardCorners } from "./components/date-time-card/date-time-card";
export { DateChangeEvent, LegacyDateChangeEvent } from "./components/date-picker/date-picker";
export { DateTimeCardCorners as DateTimeCardCorners1 } from "./components/date-time-card/date-time-card";
export { DateTimeDateChangeEvent, DateTimeSelectEvent } from "./components/datetime-picker/datetime-picker";
export { Placement } from "./components/dropdown/placement";
export { DropdownTriggerEvent } from "./components/dropdown/dropdown";
export { DropdownButtonVariant } from "./components/dropdown-button/dropdown-button";
export { EmptyStateLayout } from "./components/empty-state/empty-state";
export { FlipTileState } from "./components/flip-tile/flip-tile-state";
export { IconButtonVariant } from "./components/icon-button/icon-button";
export { IndexButtonVariant } from "./components/index-button/index-button";
export { KeyValueLabelPosition } from "./components/key-value/key-value";
export { NotificationColor } from "./components/utils/notification-color";
export { ModalConfig, ModalInstance } from "./components/modal/modal-utils";
export { PageHeaderVariant } from "./components/page-header/page-header";
export { SplitButtonVariant } from "./components/split-button/split-button";
export { TimePickerCorners } from "./components/time-picker/time-picker";
export { ToastConfig, ToastType } from "./components/toast/toast-utils";
export { TypedEvent } from "./components/utils/typed-event";
export { TreeContext, TreeItemContext, TreeModel, UpdateCallback } from "./components/tree/tree-model";
export { TypographyColors, TypographyVariants } from "./components/typography/typography";
export { UploadFileState } from "./components/upload/upload-file-state";
export namespace Components {
    interface IxAnimatedTab {
        /**
          * Show notification number
         */
        "count": number;
        /**
          * Icon of the tab
         */
        "icon": string;
    }
    interface IxAnimatedTabs {
        "disableAnimations": boolean;
        /**
          * Current selected tab index
         */
        "selectedIndex": number;
        /**
          * Placement of the tabs
         */
        "tabPlacement": 'top' | 'bottom';
    }
    interface IxApplicationHeader {
        /**
          * Application name
         */
        "name": string;
    }
    interface IxBasicNavigation {
        /**
          * Application name
         */
        "applicationName": string;
        /**
          * Hide application header. Will disable responsive feature of basic navigation.
         */
        "hideHeader": boolean;
    }
    interface IxBlind {
        /**
          * Collapsed state
         */
        "collapsed": boolean;
        /**
          * Optional icon to be displayed next to the header label
          * @since 1.5.0
         */
        "icon": string;
        /**
          * Label of blind
         */
        "label": string;
    }
    interface IxBreadcrumb {
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
         */
        "ghost": boolean;
        /**
          * Items will be accessible through a dropdown
         */
        "nextItems": string[];
        /**
          * Excess items will get hidden inside of dropdown
         */
        "visibleItemCount": number;
    }
    interface IxBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon": string;
        /**
          * Breadcrumb label
         */
        "label": string;
    }
    interface IxBurgerMenu {
        /**
          * Is menu displayed as expanded
         */
        "expanded": boolean;
    }
    interface IxButton {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
         */
        "ghost": boolean;
        /**
          * Invisible button
          * @deprecated use ghost property
         */
        "invisible": boolean;
        /**
          * Outline button
         */
        "outline": boolean;
        /**
          * Show button as selected. Should be used with outline or ghost
         */
        "selected": boolean;
        /**
          * Type of the button
         */
        "type": 'button' | 'submit';
        /**
          * Button varaint
         */
        "variant": ButtonVariant;
    }
    interface IxCategoryFilter {
        /**
          * Configuration object hash used to populate the dropwdown menu for typeahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories": {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState": FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
         */
        "hideIcon": boolean;
        /**
          * i18n
         */
        "i18nPlainText": string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon": string;
        /**
          * When set this will initially populate the component with the provided search criteria. This will trigger all input events accordingly.
          * @deprecated Will be removed with 2.0.0. Use the member filterState instead.
         */
        "initialState": FilterState;
        /**
          * i18n
         */
        "labelCategories": string;
        /**
          * In certain use cases some categories may not be available for selection anymore. To allow proper display of set filters with these categories this ID to label mapping can be populated.  Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder": string;
        /**
          * If set to true allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
         */
        "repeatCategories": boolean;
        /**
          * A list of strings that will be supplied as typeahead suggestions not tied to any categories.
         */
        "suggestions": string[];
        "tmpDisableScrollIntoView": boolean;
    }
    interface IxChip {
        /**
          * Determines if the chip is interactive. If false no user input (e.g. mouse states, keyboard navigation) will be possible and also the close button will not be present.
         */
        "active": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Show close icon
         */
        "closable": boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show icon
         */
        "icon": string | undefined;
        /**
          * Show chip with outline style
         */
        "outline": boolean;
        /**
          * Chip variant
         */
        "variant": | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxCounterPill {
        /**
          * Align pill content left
         */
        "alignLeft": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show pill as outline
         */
        "outline": boolean;
        /**
          * Pill variant
         */
        "variant": | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxDatePicker {
        /**
          * Corner style
         */
        "corners": DateTimeCardCorners;
        /**
          * Default behavior of the done event is to join the two events (date and time) into one combined string output. This combination can be configured over the delimiter
          * @since 1.1.0
         */
        "eventDelimiter": string;
        /**
          * Date format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
         */
        "format": string;
        /**
          * Picker date. If the picker is in range mode this property is the start date. If set to `null` no default start date will be pre-selected.  Format is based on `format`
          * @since 1.1.0
         */
        "from": string | null;
        /**
          * Get the current DateTime
         */
        "getCurrentDate": () => Promise<{ start: string; end: string; }>;
        /**
          * @deprecated Will be removed in 2.0.0
         */
        "individual": boolean;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "maxDate": string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "minDate": string;
        /**
          * If true a range of dates can be selected.
         */
        "range": boolean;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectDate": string;
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @since 1.1.0
         */
        "to": string | null;
    }
    interface IxDateTimeCard {
        /**
          * Set corners style
         */
        "corners": DateTimeCardCorners1;
        /**
          * set styles
         */
        "individual": boolean;
    }
    interface IxDatetimePicker {
        /**
          * Date format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @since 1.1.0
         */
        "dateFormat": string;
        /**
          * Default behavior of the done event is to join the two events (date and time) into one combined string output. This combination can be configured over the delimiter
          * @since 1.1.0
         */
        "eventDelimiter": string;
        /**
          * Picker date. If the picker is in range mode this property is the start date.  Format is based on `format`
          * @since 1.1.0
         */
        "from": string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "maxDate": string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "minDate": string;
        /**
          * Set range size
         */
        "range": boolean;
        /**
          * Show hour input
         */
        "showHour": boolean;
        /**
          * Show minutes input
         */
        "showMinutes": boolean;
        /**
          * Show seconds input
         */
        "showSeconds": boolean;
        /**
          * Show time reference input Time reference is default aligned with @see {this.timeFormat}
          * @since 1.1.0
         */
        "showTimeReference": any;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectDate": string;
        /**
          * Select time with format string
          * @since 1.1.0
         */
        "time": string;
        /**
          * Time format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @since 1.1.0
         */
        "timeFormat": string;
        /**
          * Set time reference
         */
        "timeReference": 'AM' | 'PM';
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @since 1.1.0
         */
        "to": string | null;
    }
    /**
     * @since 1.4.0
     */
    interface IxDivider {
    }
    interface IxDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
         */
        "closeOnClickOutside": boolean;
        /**
          * Render the drawer with maximum height
         */
        "fullHeight": boolean;
        /**
          * Max width interpreted as REM
         */
        "maxWidth": number;
        /**
          * Min width interpreted as REM
         */
        "minWidth": number;
        /**
          * Show or hide the drawer
         */
        "show": boolean;
        /**
          * Toggle or define show state of drawer
          * @param show Overwrite toggle state with boolean
         */
        "toggleDrawer": (show: boolean) => Promise<void>;
        /**
          * Width interpreted as REM if not set to 'auto'
         */
        "width": number | 'auto';
    }
    interface IxDropdown {
        /**
          * Adjust dropdown width to the parent width
          * @deprecated Will be removed. Not used anymore
         */
        "adjustDropdownWidthToReferenceWidth": boolean;
        /**
          * Adjust dropdown width to the parent width
          * @deprecated Will be removed in 2.0.0. Property has a typo use `adjustDropdownWidthToReferenceWidth` instead.
         */
        "adjustDropdownWidthToReferenceWith": boolean;
        /**
          * Define an anchor element
         */
        "anchor": string | HTMLElement;
        /**
          * Close behavior
         */
        "closeBehavior": 'inside' | 'outside' | 'both' | boolean;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * Move dropdown along main axis of alignment
         */
        "offset": {
    mainAxis?: number;
    crossAxis?: number;
    alignmentAxis?: number;
  };
        "overwriteDropdownStyle": (delegate: {
    dropdownRef: HTMLElement;
    triggerRef?: HTMLElement;
  }) => Promise<Partial<CSSStyleDeclaration>>;
        /**
          * Placement of the dropdown
         */
        "placement": Placement;
        /**
          * Position strategy
         */
        "positioningStrategy": 'absolute' | 'fixed';
        /**
          * Show dropdown
         */
        "show": boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interpreted as id attribute or a DOM element.
         */
        "trigger": string | HTMLElement;
        /**
          * Define one or more events to open dropdown
         */
        "triggerEvent": DropdownTriggerEvent | DropdownTriggerEvent[];
        /**
          * Update position of dropdown
         */
        "updatePosition": () => Promise<void>;
    }
    /**
     * @since 1.3.0
     */
    interface IxDropdownButton {
        /**
          * Active button
         */
        "active": boolean;
        /**
          * Disable button
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon": string;
        /**
          * Set label
         */
        "label": string;
        /**
          * Outline button
         */
        "outline": boolean;
        /**
          * Button variant
         */
        "variant": DropdownButtonVariant;
    }
    interface IxDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
         */
        "checked": boolean;
        /**
          * Disable item and remove event listeners
         */
        "disabled": boolean;
        /**
          * Internal usage only
         */
        "emitItemClick": () => Promise<void>;
        /**
          * Display hover state
         */
        "hover": boolean;
        /**
          * Icon of dropdown item
         */
        "icon": string;
        /**
          * Label of dropdown item
         */
        "label": string;
    }
    /**
     * @since 1.4.0
     */
    interface IxDropdownQuickActions {
    }
    /**
     * @since 1.6.0
     */
    interface IxEmptyState {
        /**
          * Optional empty state action
         */
        "action": string;
        /**
          * Empty state header
         */
        "header": string;
        /**
          * Optional empty state icon
         */
        "icon": string;
        /**
          * Optional empty state layout - one of 'large', 'compact' or 'compactBreak'
         */
        "layout": EmptyStateLayout;
        /**
          * Optional empty state sub header
         */
        "subHeader": string;
    }
    interface IxEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
         */
        "animated": boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
         */
        "chevron": boolean;
        /**
          * Make event-list items more compact
         */
        "compact": boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
         */
        "itemHeight": 'S' | 'L' | number;
    }
    interface IxEventListItem {
        /**
          * Show chevron on right side of the event list item
         */
        "chevron": boolean;
        /**
          * Color of the status indicator. Allowed values are all Core UI color names.
         */
        "color": string;
        /**
          * Disable event list item
         */
        "disabled": boolean;
        /**
          * Opacity of the status indicator. Defaults to 1.0
          * @deprecated Will be removed in 2.0.0
         */
        "opacity": number;
        /**
          * Show event list item as selected
         */
        "selected": boolean;
    }
    interface IxExpandingSearch {
        /**
          * Search icon
         */
        "icon": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Default value
         */
        "value": string;
    }
    interface IxFilterChip {
        /**
          * If true the filter chip will be in disabled state
         */
        "disabled": boolean;
    }
    interface IxFlipTile {
        /**
          * Tmp property name
          * @deprecated Will be removed in 2.0.0. Setting this property has no effect
         */
        "footer": string;
        /**
          * Height interpreted as REM
          * @since 1.5.0
         */
        "height": number | 'auto';
        /**
          * Variation of the Flip
         */
        "state": FlipTileState;
        /**
          * Width interpreted as REM
          * @since 1.5.0
         */
        "width": number | 'auto';
    }
    interface IxFlipTileContent {
    }
    interface IxGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
         */
        "collapsed": boolean;
        /**
          * Expand the group if the header is clicked
         */
        "expandOnHeaderClick": boolean;
        /**
          * Group header
         */
        "header": string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index": number;
        /**
          * Whether the group is selected.
         */
        "selected": boolean;
        /**
          * Group header subtitle
         */
        "subHeader": string;
        /**
          * Prevent header from being selectable
         */
        "suppressHeaderSelection": boolean;
    }
    interface IxGroupContextMenu {
    }
    interface IxGroupDropdownItem {
        /**
          * Group dropdown icon
         */
        "icon": string;
        /**
          * Group dropdown label
         */
        "label": string;
    }
    interface IxGroupItem {
        /**
          * The elements tabindex attribute will get set accordingly. If true tabindex will be 0, -1 otherwise.
         */
        "focusable": boolean;
        /**
          * Group item icon
         */
        "icon": string;
        /**
          * Index
         */
        "index": number;
        /**
          * Group item secondary text
         */
        "secondaryText": string;
        /**
          * Show selected state
         */
        "selected": boolean;
        /**
          * Supress the selection of the group
         */
        "suppressSelection": boolean;
        /**
          * Group item text
         */
        "text": string;
    }
    interface IxIconButton {
        /**
          * Color of icon in  button
         */
        "color": string;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Button invisible
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon": string;
        /**
          * Button invisible
          * @deprecated Use ghost property
         */
        "invisible": boolean;
        /**
          * Button outline
         */
        "outline": boolean;
        /**
          * Button in oval shape
         */
        "oval": boolean;
        /**
          * Selected state only working with outline or invisible
         */
        "selected": boolean;
        /**
          * Size of icon in button
         */
        "size": '32' | '24' | '16' | '12';
        /**
          * Type of the button
         */
        "type": 'button' | 'submit';
        /**
          * Variant of button
         */
        "variant": IconButtonVariant;
    }
    interface IxIndexButton {
        /**
          * Selection state
         */
        "selected": boolean;
        /**
          * Button variant
         */
        "variant": IndexButtonVariant;
    }
    interface IxInputGroup {
    }
    /**
     * @since 1.6.0
     */
    interface IxKeyValue {
        /**
          * Optional key value icon
         */
        "icon": string;
        /**
          * Key value label
         */
        "label": string;
        /**
          * Optional key value label position - 'top' or 'left'
         */
        "labelPosition": KeyValueLabelPosition;
        /**
          * Optional key value text value
         */
        "value": string;
    }
    /**
     * @since 1.6.0
     */
    interface IxKeyValueList {
        /**
          * Optional striped key value list style
         */
        "striped": boolean;
    }
    interface IxKpi {
        "label": string;
        "orientation": 'horizontal' | 'vertical';
        "state": 'neutral' | 'warning' | 'alarm';
        "unit": string;
        "value": string | number;
    }
    interface IxMapNavigation {
        /**
          * Application name
         */
        "applicationName": string;
        /**
          * Close current shown overlay
          * @deprecated Will be removed in 2.0.0. Use slot based approach
         */
        "closeOverlay": () => Promise<void>;
        /**
          * Hide the sidebar context menu button when set to true
         */
        "hideContextMenu": boolean;
        /**
          * Navigation title
         */
        "navigationTitle": string;
        /**
          * Open a overlay inside content area
          * @deprecated Will be removed in 2.0.0. Use slot based approach
          * @param name
          * @param component
          * @param icon
          * @param color
         */
        "openOverlay": (name: string, component: HTMLElement, icon?: string, color?: string) => Promise<void>;
    }
    interface IxMapNavigationOverlay {
        /**
          * Color of icon
         */
        "color": string;
        /**
          * Icon of overlay
         */
        "icon": string;
        /**
          * Title of overlay
         */
        "name": string;
    }
    interface IxMenu {
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationDescription": string;
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationName": string;
        /**
          * Internal
         */
        "enableMapExpand": boolean;
        /**
          * Is settings tab is visible
         */
        "enableSettings": boolean;
        /**
          * Show toggle between light and dark variant. Only if the provided theme have implemented both!
         */
        "enableToggleTheme": boolean;
        /**
          * Expand menu
         */
        "expand": boolean;
        "i18nCollapse": string;
        "i18nExpand": string;
        "i18nLegal": string;
        "i18nMore": string;
        "i18nSettings": string;
        "i18nToggleTheme": string;
        /**
          * Maximum number of menu items to show in case enough vertical space is available. Extra menu items will be collapsed to 'show more' menu item.
         */
        "maxVisibleMenuItems": number;
        /**
          * Is about tab visible
         */
        "showAbout": boolean;
        /**
          * Is settings tab visible
         */
        "showSettings": boolean;
        /**
          * Toggle About tabs
          * @param show
         */
        "toggleAbout": (show: boolean) => Promise<void>;
        /**
          * Toggle map sidebar expand
          * @param show
         */
        "toggleMapExpand": (show?: boolean) => Promise<void>;
        /**
          * Toggle menu
          * @param show
         */
        "toggleMenu": (show?: boolean) => Promise<void>;
        /**
          * Toggle Settings tabs
          * @param show
         */
        "toggleSettings": (show: boolean) => Promise<void>;
    }
    interface IxMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel": string;
        /**
          * Label of first tab
         */
        "label": string;
        /**
          * Internal
         */
        "show": boolean;
    }
    interface IxMenuAboutItem {
        /**
          * About Item label
         */
        "label": string;
    }
    interface IxMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel": string;
        /**
          * Internal
         */
        "expanded": boolean;
        "i18nShowMore": string;
        /**
          * Title of the about news
         */
        "label": string;
        /**
          * Bottom offset
         */
        "offsetBottom": number;
        /**
          * Show about news
         */
        "show": boolean;
    }
    interface IxMenuAvatar {
        /**
          * Second line of text
         */
        "bottom": string;
        /**
          * Use for translation
         */
        "i18nLogout": string;
        /**
          * Display a avatar image
          * @since 1.4.0
         */
        "image": string;
        /**
          * Display the initials of the user. Will be overwritten by image
          * @since 1.4.0
         */
        "initials": string;
        /**
          * First line of text
         */
        "top": string;
    }
    interface IxMenuAvatarItem {
        /**
          * Avatar dropdown icon
         */
        "icon": string;
        /**
          * Avatar dropdown label
         */
        "label": string;
    }
    interface IxMenuItem {
        /**
          * State to display active
         */
        "active": boolean;
        /**
          * Caution: this is no longer working. Please use slot="bottom" instead.  Place tab on bottom
          * @deprecated Will be removed in 2.0.0. Replaced by slot based implementation
         */
        "bottom": boolean;
        /**
          * Disable tab and remove event handlers
         */
        "disabled": boolean;
        /**
          * Move the Tab to a top position.
         */
        "home": boolean;
        /**
          * Show notification count on tab
         */
        "notifications": number;
        /**
          * Icon name from @siemens/ix-icons
         */
        "tabIcon": string;
    }
    interface IxMenuSettings {
        /**
          * active tab
         */
        "activeTabLabel": string;
        /**
          * Label
         */
        "label": string;
        /**
          * Internal
         */
        "show": boolean;
    }
    interface IxMenuSettingsItem {
        /**
          * Label
         */
        "label": string;
    }
    interface IxMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
         */
        "dismissible": boolean;
        /**
          * Specifies the type of the alert.
         */
        "type": 'danger' | 'warning' | 'info';
    }
    interface IxModal {
        /**
          * Should the modal be animtated
         */
        "animation": boolean;
        "ariaDescribedBy": string;
        "ariaLabelledBy": string;
        /**
          * Adds a dimming layer to the modal. This should only be used when it it necessary to focus the user's attention to the dialog content (e.g. errors, warnings, complex tasks).
         */
        "backdrop": boolean | 'static';
        /**
          * Backdrop class
         */
        "backdropClass": string;
        /**
          * BeforeDismiss callback
         */
        "beforeDismiss": (reason?: any) => boolean | Promise<boolean>;
        /**
          * Centered modal
         */
        "centered": boolean;
        /**
          * Close modal
          * @param result
         */
        "close": <T = any>(result: T) => Promise<void>;
        /**
          * Content of modal
         */
        "content": HTMLElement | string;
        /**
          * Dismiss modal instance
          * @param reason
         */
        "dismiss": <T = any>(reason?: T) => Promise<void>;
        /**
          * Header title
         */
        "headerTitle": string;
        /**
          * Optional icon displayed next to the title
         */
        "icon": string;
        /**
          * Color of the header {@see ix-icon}
         */
        "iconColor": NotificationColor;
        /**
          * ESC close modal dialog
         */
        "keyboard": boolean;
        /**
          * Modal dialog class
         */
        "modalDialogClass": string;
        /**
          * Modal scollable
         */
        "scrollable": boolean;
        /**
          * Modal size
         */
        "size": 'sm' | 'lg' | 'xl';
        /**
          * Window class
         */
        "windowClass": string;
    }
    interface IxModalContainer {
        /**
          * Display modal dialog
          * @param config
         */
        "showModal": <T = any>(config: ModalConfig<T>) => Promise<ModalInstance<T>>;
    }
    interface IxModalExample {
    }
    interface IxPageHeader {
        /**
          * has back button
         */
        "hasBackButton": boolean;
        /**
          * subtitle
         */
        "headerSubtitle": string | undefined;
        /**
          * title
         */
        "headerTitle": string;
        /**
          * page header variant
         */
        "variant": PageHeaderVariant;
    }
    /**
     * @since 1.5.0
     */
    interface IxPagination {
        /**
          * Advanced mode
         */
        "advanced": boolean;
        /**
          * Total number of pages
         */
        "count": number;
        /**
          * /**   i18n
         */
        "i18nItems": string;
        /**
          * i18n
         */
        "i18nOf": string;
        /**
          * i18n
         */
        "i18nPage": string;
        /**
          * Number of items shown at once. Can only be changed in advaced mode.
         */
        "itemCount": number;
        /**
          * Zero based index of currently selected page
         */
        "selectedPage": number;
        /**
          * Show item count in advanced mode
         */
        "showItemCount": boolean;
    }
    interface IxPill {
        /**
          * Align pill content left
         */
        "alignLeft": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show icon
         */
        "icon": string | undefined;
        /**
          * Show pill as outline
         */
        "outline": boolean;
        /**
          * Pill variant
         */
        "variant": | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxSelect {
        /**
          * Show clear button
         */
        "allowClear": boolean;
        /**
          * If true the select will be in disabled state
         */
        "disabled": boolean;
        /**
          * Select is extendable
         */
        "editable": boolean;
        /**
          * Hide list header
          * @since 1.5.0
          * @
         */
        "hideListHeader": boolean;
        /**
          * Hint inside of dropdown if no items where found with current filter text
          * @since 1.5.0
         */
        "i18nNoMatches": string;
        /**
          * Input field placeholder
         */
        "i18nPlaceholder": string;
        /**
          * Input field placeholder for editable select
         */
        "i18nPlaceholderEditable": string;
        /**
          * Select list header
         */
        "i18nSelectListHeader": string;
        /**
          * Selection mode
         */
        "mode": 'single' | 'multiple';
        /**
          * If true the select will be in readonly mode
         */
        "readonly": boolean;
        /**
          * Indices of selected items This corresponds to the value property of ix-select-items and therefor not neccessarily the indices of the items in the list.
         */
        "selectedIndices": string | string[];
    }
    interface IxSelectItem {
        "hover": boolean;
        /**
          * Displayed name of the item
         */
        "label": string;
        /**
          * @param event
         */
        "onItemClick": (event?: CustomEvent<HTMLIxDropdownItemElement>) => Promise<void>;
        /**
          * Whether the item is selected.
         */
        "selected": boolean;
        /**
          * Item value
         */
        "value": any;
    }
    interface IxSpinner {
        /**
          * Size of spinner
         */
        "size": 'medium' | 'large';
        /**
          * Variant of spinner
         */
        "variant": 'primary' | 'sencodary' | 'secondary';
    }
    interface IxSplitButton {
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Button invisible
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon": string;
        /**
          * Button invisible
          * @deprecated Will be removed in 2.0.0. Use ghost property
         */
        "invisible": boolean;
        /**
          * Button label
         */
        "label": string;
        /**
          * Button outline variant
         */
        "outline": boolean;
        /**
          * Placement of the dropdown
         */
        "placement": Placement;
        /**
          * Splitbutton icon
         */
        "splitIcon": string;
        /**
          * Color variant of button
         */
        "variant": SplitButtonVariant;
    }
    interface IxSplitButtonItem {
        /**
          * Dropdown icon
         */
        "icon": string;
        /**
          * Dropdown label
         */
        "label": string;
    }
    interface IxTabItem {
        /**
          * Set counter value
         */
        "counter": number;
        /**
          * Set disabled tab
         */
        "disabled": boolean;
        /**
          * Set icon only tab
         */
        "icon": boolean;
        /**
          * Set layout width style
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set selected placement
         */
        "placement": 'bottom' | 'top';
        /**
          * Set rounded tab
         */
        "rounded": boolean;
        /**
          * Set selected tab
         */
        "selected": boolean;
        /**
          * Set small size tab
         */
        "small": boolean;
    }
    interface IxTabs {
        /**
          * Set layout width style
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set placement style
         */
        "placement": 'bottom' | 'top';
        /**
          * Set rounded tabs
         */
        "rounded": boolean;
        /**
          * Set default selected tab by index
         */
        "selected": number;
        /**
          * Set tab items to small size
         */
        "small": boolean;
    }
    interface IxTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
         */
        "size": 'small' | 'medium' | 'big';
    }
    interface IxTimePicker {
        /**
          * Corner style
         */
        "corners": TimePickerCorners;
        /**
          * Format of time string
          * @since 1.1.0
         */
        "format": string;
        /**
          * Get current time
         */
        "getCurrentTime": () => Promise<string>;
        /**
          * @deprecated Will be removed in 2.0.0
         */
        "individual": boolean;
        /**
          * Show hour input
         */
        "showHour": boolean;
        /**
          * Show minutes input
         */
        "showMinutes": boolean;
        /**
          * Show seconds input
         */
        "showSeconds": boolean;
        /**
          * Show time reference input
          * @since 1.1.0 time reference is default aligned with formt tt
         */
        "showTimeReference": any;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectTime": string;
        /**
          * Select time with format string
          * @since 1.1.0
         */
        "time": string;
        /**
          * Set time reference
         */
        "timeReference": 'AM' | 'PM';
    }
    interface IxToast {
        /**
          * Autoclose behavior
         */
        "autoClose": boolean;
        /**
          * Autoclose title after delay
         */
        "autoCloseDelay": number;
        /**
          * Icon of toast
         */
        "icon": string;
        /**
          * Icon color of toast
         */
        "iconColor": string;
        /**
          * Toast title
         */
        "toastTitle": string;
        /**
          * Toast type
         */
        "type": ToastType;
    }
    interface IxToastContainer {
        "containerClass": string;
        "containerId": string;
        "position": 'bottom-right' | 'top-right';
        /**
          * Display a toast message
          * @param config
         */
        "showToast": (config: ToastConfig) => Promise<{ onClose: TypedEvent<any>; close: (result?: any) => void; }>;
    }
    interface IxToggle {
        /**
          * Whether the slide-toggle element is checked or not.
         */
        "checked": boolean;
        /**
          * Basic and status colors from color palette
          * @deprecated Will be removed in 2.0.0
         */
        "color": string;
        /**
          * Whether the slide-toggle element is disabled or not.
         */
        "disabled": boolean;
        /**
          * Hide `on` and `off` text
         */
        "hideText": boolean;
        /**
          * If true the control is in indeterminate state
         */
        "indeterminate": boolean;
        /**
          * Text for indeterminate state
         */
        "textIndeterminate": string;
        /**
          * Text for off state
         */
        "textOff": string;
        /**
          * Text for on state
         */
        "textOn": string;
    }
    /**
     * @since 1.4.0
     */
    interface IxTooltip {
        /**
          * CSS selector for hover trigger element e.g. `for="[data-my-custom-select]"`
         */
        "for": string;
        /**
          * Define if the user can access the tooltip via mouse.
         */
        "interactive": boolean;
        /**
          * Initial placement of the tooltip. If the placement don"t have enough space, the tooltip will placed on another location.
          * @since 1.5.0
         */
        "placement": 'top' | 'right' | 'bottom' | 'left';
        /**
          * Title of the tooltip
         */
        "titleContent": string;
    }
    interface IxTree {
        /**
          * Selection and collapsed state management
         */
        "context": TreeContext;
        /**
          * Tree model
         */
        "model": TreeModel<any>;
        /**
          * Render function of tree items
         */
        "renderItem": <T = any>(
    index: number,
    data: T,
    dataList: Array<T>,
    context: TreeContext,
    update: (callback: UpdateCallback) => void
  ) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root": string;
    }
    interface IxTreeItem {
        /**
          * Context
         */
        "context": TreeItemContext;
        /**
          * Has tree item children
         */
        "hasChildren": boolean;
        /**
          * Text
         */
        "text": string;
    }
    interface IxTypography {
        /**
          * Text color based on theme variables
         */
        "color": TypographyColors;
        /**
          * Font variant based on theme variables
         */
        "variant": TypographyVariants;
    }
    interface IxUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link "https://www.w3schools.com/tags/att_input_accept.asp"}
         */
        "accept": string;
        /**
          * Disable all input events
         */
        "disabled": boolean;
        /**
          * Text for disabled state
         */
        "i18nUploadDisabled": string;
        /**
          * Label for upload file button
         */
        "i18nUploadFile": string;
        /**
          * Will be used by state = UploadFileState.LOADING
         */
        "loadingText": string;
        /**
          * Whether the text should wrap to more than one line
         */
        "multiline": boolean;
        /**
          * If multiple is true the user can drop or select multiple files
         */
        "multiple": boolean;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
         */
        "selectFileText": string;
        /**
          * Set files
          * @param obj
         */
        "setFilesToUpload": (obj: any) => Promise<void>;
        /**
          * After a file is uploaded you can set the upload component to a defined state
         */
        "state": UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
         */
        "uploadFailedText": string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
         */
        "uploadSuccessText": string;
    }
    interface IxValidationTooltip {
        /**
          * Message of the tooltip
         */
        "message": string;
        /**
          * Placement of the tooltip
         */
        "placement": Placement;
    }
    interface IxWorkflowStep {
        /**
          * Activate navigation click
         */
        "clickable": boolean;
        /**
          * Set disabled
         */
        "disabled": boolean;
        /**
          * Activate navigation click
          * @deprecated Will be changed to '@internal' in 2.0.0
         */
        "position": 'first' | 'last' | 'single' | 'undefined';
        /**
          * Set selected
         */
        "selected": boolean;
        /**
          * Set status
         */
        "status": 'open' | 'success' | 'done' | 'warning' | 'error';
        /**
          * Select orientation
         */
        "vertical": boolean;
    }
    interface IxWorkflowSteps {
        /**
          * Activate navigation click
         */
        "clickable": boolean;
        /**
          * Select linear mode
          * @deprecated Has no effect on component. Will get removed in 2.0.0
         */
        "linear": boolean;
        /**
          * Activate navigation click
         */
        "selectedIndex": number;
        /**
          * Select orientation
         */
        "vertical": boolean;
    }
    interface MyComponent {
    }
}
export interface IxAnimatedTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxAnimatedTabsElement;
}
export interface IxBlindCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxBlindElement;
}
export interface IxBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxBreadcrumbElement;
}
export interface IxCategoryFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxCategoryFilterElement;
}
export interface IxChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxChipElement;
}
export interface IxDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDatePickerElement;
}
export interface IxDatetimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDatetimePickerElement;
}
export interface IxDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDrawerElement;
}
export interface IxDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDropdownElement;
}
export interface IxDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDropdownItemElement;
}
export interface IxEmptyStateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxEmptyStateElement;
}
export interface IxEventListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxEventListItemElement;
}
export interface IxExpandingSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxExpandingSearchElement;
}
export interface IxFilterChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxFilterChipElement;
}
export interface IxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxGroupElement;
}
export interface IxGroupItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxGroupItemElement;
}
export interface IxMapNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMapNavigationElement;
}
export interface IxMapNavigationOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMapNavigationOverlayElement;
}
export interface IxMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuElement;
}
export interface IxMenuAboutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAboutElement;
}
export interface IxMenuAboutNewsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAboutNewsElement;
}
export interface IxMenuAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAvatarElement;
}
export interface IxMenuAvatarItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAvatarItemElement;
}
export interface IxMenuSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuSettingsElement;
}
export interface IxMessageBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMessageBarElement;
}
export interface IxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxModalElement;
}
export interface IxPageHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxPageHeaderElement;
}
export interface IxPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxPaginationElement;
}
export interface IxSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSelectElement;
}
export interface IxSelectItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSelectItemElement;
}
export interface IxSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSplitButtonElement;
}
export interface IxSplitButtonItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSplitButtonItemElement;
}
export interface IxTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTimePickerElement;
}
export interface IxToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxToastElement;
}
export interface IxToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxToggleElement;
}
export interface IxTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTreeElement;
}
export interface IxTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTreeItemElement;
}
export interface IxUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxUploadElement;
}
export interface IxWorkflowStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxWorkflowStepElement;
}
export interface IxWorkflowStepsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxWorkflowStepsElement;
}
declare global {
    interface HTMLIxAnimatedTabElement extends Components.IxAnimatedTab, HTMLStencilElement {
    }
    var HTMLIxAnimatedTabElement: {
        prototype: HTMLIxAnimatedTabElement;
        new (): HTMLIxAnimatedTabElement;
    };
    interface HTMLIxAnimatedTabsElement extends Components.IxAnimatedTabs, HTMLStencilElement {
    }
    var HTMLIxAnimatedTabsElement: {
        prototype: HTMLIxAnimatedTabsElement;
        new (): HTMLIxAnimatedTabsElement;
    };
    interface HTMLIxApplicationHeaderElement extends Components.IxApplicationHeader, HTMLStencilElement {
    }
    var HTMLIxApplicationHeaderElement: {
        prototype: HTMLIxApplicationHeaderElement;
        new (): HTMLIxApplicationHeaderElement;
    };
    interface HTMLIxBasicNavigationElement extends Components.IxBasicNavigation, HTMLStencilElement {
    }
    var HTMLIxBasicNavigationElement: {
        prototype: HTMLIxBasicNavigationElement;
        new (): HTMLIxBasicNavigationElement;
    };
    interface HTMLIxBlindElement extends Components.IxBlind, HTMLStencilElement {
    }
    var HTMLIxBlindElement: {
        prototype: HTMLIxBlindElement;
        new (): HTMLIxBlindElement;
    };
    interface HTMLIxBreadcrumbElement extends Components.IxBreadcrumb, HTMLStencilElement {
    }
    var HTMLIxBreadcrumbElement: {
        prototype: HTMLIxBreadcrumbElement;
        new (): HTMLIxBreadcrumbElement;
    };
    interface HTMLIxBreadcrumbItemElement extends Components.IxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLIxBreadcrumbItemElement: {
        prototype: HTMLIxBreadcrumbItemElement;
        new (): HTMLIxBreadcrumbItemElement;
    };
    interface HTMLIxBurgerMenuElement extends Components.IxBurgerMenu, HTMLStencilElement {
    }
    var HTMLIxBurgerMenuElement: {
        prototype: HTMLIxBurgerMenuElement;
        new (): HTMLIxBurgerMenuElement;
    };
    interface HTMLIxButtonElement extends Components.IxButton, HTMLStencilElement {
    }
    var HTMLIxButtonElement: {
        prototype: HTMLIxButtonElement;
        new (): HTMLIxButtonElement;
    };
    interface HTMLIxCategoryFilterElement extends Components.IxCategoryFilter, HTMLStencilElement {
    }
    var HTMLIxCategoryFilterElement: {
        prototype: HTMLIxCategoryFilterElement;
        new (): HTMLIxCategoryFilterElement;
    };
    interface HTMLIxChipElement extends Components.IxChip, HTMLStencilElement {
    }
    var HTMLIxChipElement: {
        prototype: HTMLIxChipElement;
        new (): HTMLIxChipElement;
    };
    interface HTMLIxCounterPillElement extends Components.IxCounterPill, HTMLStencilElement {
    }
    var HTMLIxCounterPillElement: {
        prototype: HTMLIxCounterPillElement;
        new (): HTMLIxCounterPillElement;
    };
    interface HTMLIxDatePickerElement extends Components.IxDatePicker, HTMLStencilElement {
    }
    var HTMLIxDatePickerElement: {
        prototype: HTMLIxDatePickerElement;
        new (): HTMLIxDatePickerElement;
    };
    interface HTMLIxDateTimeCardElement extends Components.IxDateTimeCard, HTMLStencilElement {
    }
    var HTMLIxDateTimeCardElement: {
        prototype: HTMLIxDateTimeCardElement;
        new (): HTMLIxDateTimeCardElement;
    };
    interface HTMLIxDatetimePickerElement extends Components.IxDatetimePicker, HTMLStencilElement {
    }
    var HTMLIxDatetimePickerElement: {
        prototype: HTMLIxDatetimePickerElement;
        new (): HTMLIxDatetimePickerElement;
    };
    /**
     * @since 1.4.0
     */
    interface HTMLIxDividerElement extends Components.IxDivider, HTMLStencilElement {
    }
    var HTMLIxDividerElement: {
        prototype: HTMLIxDividerElement;
        new (): HTMLIxDividerElement;
    };
    interface HTMLIxDrawerElement extends Components.IxDrawer, HTMLStencilElement {
    }
    var HTMLIxDrawerElement: {
        prototype: HTMLIxDrawerElement;
        new (): HTMLIxDrawerElement;
    };
    interface HTMLIxDropdownElement extends Components.IxDropdown, HTMLStencilElement {
    }
    var HTMLIxDropdownElement: {
        prototype: HTMLIxDropdownElement;
        new (): HTMLIxDropdownElement;
    };
    /**
     * @since 1.3.0
     */
    interface HTMLIxDropdownButtonElement extends Components.IxDropdownButton, HTMLStencilElement {
    }
    var HTMLIxDropdownButtonElement: {
        prototype: HTMLIxDropdownButtonElement;
        new (): HTMLIxDropdownButtonElement;
    };
    interface HTMLIxDropdownItemElement extends Components.IxDropdownItem, HTMLStencilElement {
    }
    var HTMLIxDropdownItemElement: {
        prototype: HTMLIxDropdownItemElement;
        new (): HTMLIxDropdownItemElement;
    };
    /**
     * @since 1.4.0
     */
    interface HTMLIxDropdownQuickActionsElement extends Components.IxDropdownQuickActions, HTMLStencilElement {
    }
    var HTMLIxDropdownQuickActionsElement: {
        prototype: HTMLIxDropdownQuickActionsElement;
        new (): HTMLIxDropdownQuickActionsElement;
    };
    /**
     * @since 1.6.0
     */
    interface HTMLIxEmptyStateElement extends Components.IxEmptyState, HTMLStencilElement {
    }
    var HTMLIxEmptyStateElement: {
        prototype: HTMLIxEmptyStateElement;
        new (): HTMLIxEmptyStateElement;
    };
    interface HTMLIxEventListElement extends Components.IxEventList, HTMLStencilElement {
    }
    var HTMLIxEventListElement: {
        prototype: HTMLIxEventListElement;
        new (): HTMLIxEventListElement;
    };
    interface HTMLIxEventListItemElement extends Components.IxEventListItem, HTMLStencilElement {
    }
    var HTMLIxEventListItemElement: {
        prototype: HTMLIxEventListItemElement;
        new (): HTMLIxEventListItemElement;
    };
    interface HTMLIxExpandingSearchElement extends Components.IxExpandingSearch, HTMLStencilElement {
    }
    var HTMLIxExpandingSearchElement: {
        prototype: HTMLIxExpandingSearchElement;
        new (): HTMLIxExpandingSearchElement;
    };
    interface HTMLIxFilterChipElement extends Components.IxFilterChip, HTMLStencilElement {
    }
    var HTMLIxFilterChipElement: {
        prototype: HTMLIxFilterChipElement;
        new (): HTMLIxFilterChipElement;
    };
    interface HTMLIxFlipTileElement extends Components.IxFlipTile, HTMLStencilElement {
    }
    var HTMLIxFlipTileElement: {
        prototype: HTMLIxFlipTileElement;
        new (): HTMLIxFlipTileElement;
    };
    interface HTMLIxFlipTileContentElement extends Components.IxFlipTileContent, HTMLStencilElement {
    }
    var HTMLIxFlipTileContentElement: {
        prototype: HTMLIxFlipTileContentElement;
        new (): HTMLIxFlipTileContentElement;
    };
    interface HTMLIxGroupElement extends Components.IxGroup, HTMLStencilElement {
    }
    var HTMLIxGroupElement: {
        prototype: HTMLIxGroupElement;
        new (): HTMLIxGroupElement;
    };
    interface HTMLIxGroupContextMenuElement extends Components.IxGroupContextMenu, HTMLStencilElement {
    }
    var HTMLIxGroupContextMenuElement: {
        prototype: HTMLIxGroupContextMenuElement;
        new (): HTMLIxGroupContextMenuElement;
    };
    interface HTMLIxGroupDropdownItemElement extends Components.IxGroupDropdownItem, HTMLStencilElement {
    }
    var HTMLIxGroupDropdownItemElement: {
        prototype: HTMLIxGroupDropdownItemElement;
        new (): HTMLIxGroupDropdownItemElement;
    };
    interface HTMLIxGroupItemElement extends Components.IxGroupItem, HTMLStencilElement {
    }
    var HTMLIxGroupItemElement: {
        prototype: HTMLIxGroupItemElement;
        new (): HTMLIxGroupItemElement;
    };
    interface HTMLIxIconButtonElement extends Components.IxIconButton, HTMLStencilElement {
    }
    var HTMLIxIconButtonElement: {
        prototype: HTMLIxIconButtonElement;
        new (): HTMLIxIconButtonElement;
    };
    interface HTMLIxIndexButtonElement extends Components.IxIndexButton, HTMLStencilElement {
    }
    var HTMLIxIndexButtonElement: {
        prototype: HTMLIxIndexButtonElement;
        new (): HTMLIxIndexButtonElement;
    };
    interface HTMLIxInputGroupElement extends Components.IxInputGroup, HTMLStencilElement {
    }
    var HTMLIxInputGroupElement: {
        prototype: HTMLIxInputGroupElement;
        new (): HTMLIxInputGroupElement;
    };
    /**
     * @since 1.6.0
     */
    interface HTMLIxKeyValueElement extends Components.IxKeyValue, HTMLStencilElement {
    }
    var HTMLIxKeyValueElement: {
        prototype: HTMLIxKeyValueElement;
        new (): HTMLIxKeyValueElement;
    };
    /**
     * @since 1.6.0
     */
    interface HTMLIxKeyValueListElement extends Components.IxKeyValueList, HTMLStencilElement {
    }
    var HTMLIxKeyValueListElement: {
        prototype: HTMLIxKeyValueListElement;
        new (): HTMLIxKeyValueListElement;
    };
    interface HTMLIxKpiElement extends Components.IxKpi, HTMLStencilElement {
    }
    var HTMLIxKpiElement: {
        prototype: HTMLIxKpiElement;
        new (): HTMLIxKpiElement;
    };
    interface HTMLIxMapNavigationElement extends Components.IxMapNavigation, HTMLStencilElement {
    }
    var HTMLIxMapNavigationElement: {
        prototype: HTMLIxMapNavigationElement;
        new (): HTMLIxMapNavigationElement;
    };
    interface HTMLIxMapNavigationOverlayElement extends Components.IxMapNavigationOverlay, HTMLStencilElement {
    }
    var HTMLIxMapNavigationOverlayElement: {
        prototype: HTMLIxMapNavigationOverlayElement;
        new (): HTMLIxMapNavigationOverlayElement;
    };
    interface HTMLIxMenuElement extends Components.IxMenu, HTMLStencilElement {
    }
    var HTMLIxMenuElement: {
        prototype: HTMLIxMenuElement;
        new (): HTMLIxMenuElement;
    };
    interface HTMLIxMenuAboutElement extends Components.IxMenuAbout, HTMLStencilElement {
    }
    var HTMLIxMenuAboutElement: {
        prototype: HTMLIxMenuAboutElement;
        new (): HTMLIxMenuAboutElement;
    };
    interface HTMLIxMenuAboutItemElement extends Components.IxMenuAboutItem, HTMLStencilElement {
    }
    var HTMLIxMenuAboutItemElement: {
        prototype: HTMLIxMenuAboutItemElement;
        new (): HTMLIxMenuAboutItemElement;
    };
    interface HTMLIxMenuAboutNewsElement extends Components.IxMenuAboutNews, HTMLStencilElement {
    }
    var HTMLIxMenuAboutNewsElement: {
        prototype: HTMLIxMenuAboutNewsElement;
        new (): HTMLIxMenuAboutNewsElement;
    };
    interface HTMLIxMenuAvatarElement extends Components.IxMenuAvatar, HTMLStencilElement {
    }
    var HTMLIxMenuAvatarElement: {
        prototype: HTMLIxMenuAvatarElement;
        new (): HTMLIxMenuAvatarElement;
    };
    interface HTMLIxMenuAvatarItemElement extends Components.IxMenuAvatarItem, HTMLStencilElement {
    }
    var HTMLIxMenuAvatarItemElement: {
        prototype: HTMLIxMenuAvatarItemElement;
        new (): HTMLIxMenuAvatarItemElement;
    };
    interface HTMLIxMenuItemElement extends Components.IxMenuItem, HTMLStencilElement {
    }
    var HTMLIxMenuItemElement: {
        prototype: HTMLIxMenuItemElement;
        new (): HTMLIxMenuItemElement;
    };
    interface HTMLIxMenuSettingsElement extends Components.IxMenuSettings, HTMLStencilElement {
    }
    var HTMLIxMenuSettingsElement: {
        prototype: HTMLIxMenuSettingsElement;
        new (): HTMLIxMenuSettingsElement;
    };
    interface HTMLIxMenuSettingsItemElement extends Components.IxMenuSettingsItem, HTMLStencilElement {
    }
    var HTMLIxMenuSettingsItemElement: {
        prototype: HTMLIxMenuSettingsItemElement;
        new (): HTMLIxMenuSettingsItemElement;
    };
    interface HTMLIxMessageBarElement extends Components.IxMessageBar, HTMLStencilElement {
    }
    var HTMLIxMessageBarElement: {
        prototype: HTMLIxMessageBarElement;
        new (): HTMLIxMessageBarElement;
    };
    interface HTMLIxModalElement extends Components.IxModal, HTMLStencilElement {
    }
    var HTMLIxModalElement: {
        prototype: HTMLIxModalElement;
        new (): HTMLIxModalElement;
    };
    interface HTMLIxModalContainerElement extends Components.IxModalContainer, HTMLStencilElement {
    }
    var HTMLIxModalContainerElement: {
        prototype: HTMLIxModalContainerElement;
        new (): HTMLIxModalContainerElement;
    };
    interface HTMLIxModalExampleElement extends Components.IxModalExample, HTMLStencilElement {
    }
    var HTMLIxModalExampleElement: {
        prototype: HTMLIxModalExampleElement;
        new (): HTMLIxModalExampleElement;
    };
    interface HTMLIxPageHeaderElement extends Components.IxPageHeader, HTMLStencilElement {
    }
    var HTMLIxPageHeaderElement: {
        prototype: HTMLIxPageHeaderElement;
        new (): HTMLIxPageHeaderElement;
    };
    /**
     * @since 1.5.0
     */
    interface HTMLIxPaginationElement extends Components.IxPagination, HTMLStencilElement {
    }
    var HTMLIxPaginationElement: {
        prototype: HTMLIxPaginationElement;
        new (): HTMLIxPaginationElement;
    };
    interface HTMLIxPillElement extends Components.IxPill, HTMLStencilElement {
    }
    var HTMLIxPillElement: {
        prototype: HTMLIxPillElement;
        new (): HTMLIxPillElement;
    };
    interface HTMLIxSelectElement extends Components.IxSelect, HTMLStencilElement {
    }
    var HTMLIxSelectElement: {
        prototype: HTMLIxSelectElement;
        new (): HTMLIxSelectElement;
    };
    interface HTMLIxSelectItemElement extends Components.IxSelectItem, HTMLStencilElement {
    }
    var HTMLIxSelectItemElement: {
        prototype: HTMLIxSelectItemElement;
        new (): HTMLIxSelectItemElement;
    };
    interface HTMLIxSpinnerElement extends Components.IxSpinner, HTMLStencilElement {
    }
    var HTMLIxSpinnerElement: {
        prototype: HTMLIxSpinnerElement;
        new (): HTMLIxSpinnerElement;
    };
    interface HTMLIxSplitButtonElement extends Components.IxSplitButton, HTMLStencilElement {
    }
    var HTMLIxSplitButtonElement: {
        prototype: HTMLIxSplitButtonElement;
        new (): HTMLIxSplitButtonElement;
    };
    interface HTMLIxSplitButtonItemElement extends Components.IxSplitButtonItem, HTMLStencilElement {
    }
    var HTMLIxSplitButtonItemElement: {
        prototype: HTMLIxSplitButtonItemElement;
        new (): HTMLIxSplitButtonItemElement;
    };
    interface HTMLIxTabItemElement extends Components.IxTabItem, HTMLStencilElement {
    }
    var HTMLIxTabItemElement: {
        prototype: HTMLIxTabItemElement;
        new (): HTMLIxTabItemElement;
    };
    interface HTMLIxTabsElement extends Components.IxTabs, HTMLStencilElement {
    }
    var HTMLIxTabsElement: {
        prototype: HTMLIxTabsElement;
        new (): HTMLIxTabsElement;
    };
    interface HTMLIxTileElement extends Components.IxTile, HTMLStencilElement {
    }
    var HTMLIxTileElement: {
        prototype: HTMLIxTileElement;
        new (): HTMLIxTileElement;
    };
    interface HTMLIxTimePickerElement extends Components.IxTimePicker, HTMLStencilElement {
    }
    var HTMLIxTimePickerElement: {
        prototype: HTMLIxTimePickerElement;
        new (): HTMLIxTimePickerElement;
    };
    interface HTMLIxToastElement extends Components.IxToast, HTMLStencilElement {
    }
    var HTMLIxToastElement: {
        prototype: HTMLIxToastElement;
        new (): HTMLIxToastElement;
    };
    interface HTMLIxToastContainerElement extends Components.IxToastContainer, HTMLStencilElement {
    }
    var HTMLIxToastContainerElement: {
        prototype: HTMLIxToastContainerElement;
        new (): HTMLIxToastContainerElement;
    };
    interface HTMLIxToggleElement extends Components.IxToggle, HTMLStencilElement {
    }
    var HTMLIxToggleElement: {
        prototype: HTMLIxToggleElement;
        new (): HTMLIxToggleElement;
    };
    /**
     * @since 1.4.0
     */
    interface HTMLIxTooltipElement extends Components.IxTooltip, HTMLStencilElement {
    }
    var HTMLIxTooltipElement: {
        prototype: HTMLIxTooltipElement;
        new (): HTMLIxTooltipElement;
    };
    interface HTMLIxTreeElement extends Components.IxTree, HTMLStencilElement {
    }
    var HTMLIxTreeElement: {
        prototype: HTMLIxTreeElement;
        new (): HTMLIxTreeElement;
    };
    interface HTMLIxTreeItemElement extends Components.IxTreeItem, HTMLStencilElement {
    }
    var HTMLIxTreeItemElement: {
        prototype: HTMLIxTreeItemElement;
        new (): HTMLIxTreeItemElement;
    };
    interface HTMLIxTypographyElement extends Components.IxTypography, HTMLStencilElement {
    }
    var HTMLIxTypographyElement: {
        prototype: HTMLIxTypographyElement;
        new (): HTMLIxTypographyElement;
    };
    interface HTMLIxUploadElement extends Components.IxUpload, HTMLStencilElement {
    }
    var HTMLIxUploadElement: {
        prototype: HTMLIxUploadElement;
        new (): HTMLIxUploadElement;
    };
    interface HTMLIxValidationTooltipElement extends Components.IxValidationTooltip, HTMLStencilElement {
    }
    var HTMLIxValidationTooltipElement: {
        prototype: HTMLIxValidationTooltipElement;
        new (): HTMLIxValidationTooltipElement;
    };
    interface HTMLIxWorkflowStepElement extends Components.IxWorkflowStep, HTMLStencilElement {
    }
    var HTMLIxWorkflowStepElement: {
        prototype: HTMLIxWorkflowStepElement;
        new (): HTMLIxWorkflowStepElement;
    };
    interface HTMLIxWorkflowStepsElement extends Components.IxWorkflowSteps, HTMLStencilElement {
    }
    var HTMLIxWorkflowStepsElement: {
        prototype: HTMLIxWorkflowStepsElement;
        new (): HTMLIxWorkflowStepsElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "ix-animated-tab": HTMLIxAnimatedTabElement;
        "ix-animated-tabs": HTMLIxAnimatedTabsElement;
        "ix-application-header": HTMLIxApplicationHeaderElement;
        "ix-basic-navigation": HTMLIxBasicNavigationElement;
        "ix-blind": HTMLIxBlindElement;
        "ix-breadcrumb": HTMLIxBreadcrumbElement;
        "ix-breadcrumb-item": HTMLIxBreadcrumbItemElement;
        "ix-burger-menu": HTMLIxBurgerMenuElement;
        "ix-button": HTMLIxButtonElement;
        "ix-category-filter": HTMLIxCategoryFilterElement;
        "ix-chip": HTMLIxChipElement;
        "ix-counter-pill": HTMLIxCounterPillElement;
        "ix-date-picker": HTMLIxDatePickerElement;
        "ix-date-time-card": HTMLIxDateTimeCardElement;
        "ix-datetime-picker": HTMLIxDatetimePickerElement;
        "ix-divider": HTMLIxDividerElement;
        "ix-drawer": HTMLIxDrawerElement;
        "ix-dropdown": HTMLIxDropdownElement;
        "ix-dropdown-button": HTMLIxDropdownButtonElement;
        "ix-dropdown-item": HTMLIxDropdownItemElement;
        "ix-dropdown-quick-actions": HTMLIxDropdownQuickActionsElement;
        "ix-empty-state": HTMLIxEmptyStateElement;
        "ix-event-list": HTMLIxEventListElement;
        "ix-event-list-item": HTMLIxEventListItemElement;
        "ix-expanding-search": HTMLIxExpandingSearchElement;
        "ix-filter-chip": HTMLIxFilterChipElement;
        "ix-flip-tile": HTMLIxFlipTileElement;
        "ix-flip-tile-content": HTMLIxFlipTileContentElement;
        "ix-group": HTMLIxGroupElement;
        "ix-group-context-menu": HTMLIxGroupContextMenuElement;
        "ix-group-dropdown-item": HTMLIxGroupDropdownItemElement;
        "ix-group-item": HTMLIxGroupItemElement;
        "ix-icon-button": HTMLIxIconButtonElement;
        "ix-index-button": HTMLIxIndexButtonElement;
        "ix-input-group": HTMLIxInputGroupElement;
        "ix-key-value": HTMLIxKeyValueElement;
        "ix-key-value-list": HTMLIxKeyValueListElement;
        "ix-kpi": HTMLIxKpiElement;
        "ix-map-navigation": HTMLIxMapNavigationElement;
        "ix-map-navigation-overlay": HTMLIxMapNavigationOverlayElement;
        "ix-menu": HTMLIxMenuElement;
        "ix-menu-about": HTMLIxMenuAboutElement;
        "ix-menu-about-item": HTMLIxMenuAboutItemElement;
        "ix-menu-about-news": HTMLIxMenuAboutNewsElement;
        "ix-menu-avatar": HTMLIxMenuAvatarElement;
        "ix-menu-avatar-item": HTMLIxMenuAvatarItemElement;
        "ix-menu-item": HTMLIxMenuItemElement;
        "ix-menu-settings": HTMLIxMenuSettingsElement;
        "ix-menu-settings-item": HTMLIxMenuSettingsItemElement;
        "ix-message-bar": HTMLIxMessageBarElement;
        "ix-modal": HTMLIxModalElement;
        "ix-modal-container": HTMLIxModalContainerElement;
        "ix-modal-example": HTMLIxModalExampleElement;
        "ix-page-header": HTMLIxPageHeaderElement;
        "ix-pagination": HTMLIxPaginationElement;
        "ix-pill": HTMLIxPillElement;
        "ix-select": HTMLIxSelectElement;
        "ix-select-item": HTMLIxSelectItemElement;
        "ix-spinner": HTMLIxSpinnerElement;
        "ix-split-button": HTMLIxSplitButtonElement;
        "ix-split-button-item": HTMLIxSplitButtonItemElement;
        "ix-tab-item": HTMLIxTabItemElement;
        "ix-tabs": HTMLIxTabsElement;
        "ix-tile": HTMLIxTileElement;
        "ix-time-picker": HTMLIxTimePickerElement;
        "ix-toast": HTMLIxToastElement;
        "ix-toast-container": HTMLIxToastContainerElement;
        "ix-toggle": HTMLIxToggleElement;
        "ix-tooltip": HTMLIxTooltipElement;
        "ix-tree": HTMLIxTreeElement;
        "ix-tree-item": HTMLIxTreeItemElement;
        "ix-typography": HTMLIxTypographyElement;
        "ix-upload": HTMLIxUploadElement;
        "ix-validation-tooltip": HTMLIxValidationTooltipElement;
        "ix-workflow-step": HTMLIxWorkflowStepElement;
        "ix-workflow-steps": HTMLIxWorkflowStepsElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface IxAnimatedTab {
        /**
          * Show notification number
         */
        "count"?: number;
        /**
          * Icon of the tab
         */
        "icon"?: string;
    }
    interface IxAnimatedTabs {
        "disableAnimations"?: boolean;
        /**
          * Tab navigated
         */
        "onTabClick"?: (event: IxAnimatedTabsCustomEvent<any>) => void;
        /**
          * Current selected tab index
         */
        "selectedIndex"?: number;
        /**
          * Placement of the tabs
         */
        "tabPlacement"?: 'top' | 'bottom';
    }
    interface IxApplicationHeader {
        /**
          * Application name
         */
        "name"?: string;
    }
    interface IxBasicNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Hide application header. Will disable responsive feature of basic navigation.
         */
        "hideHeader"?: boolean;
    }
    interface IxBlind {
        /**
          * Collapsed state
         */
        "collapsed"?: boolean;
        /**
          * Optional icon to be displayed next to the header label
          * @since 1.5.0
         */
        "icon"?: string;
        /**
          * Label of blind
         */
        "label"?: string;
        /**
          * Collapsed state changed
         */
        "onCollapsedChange"?: (event: IxBlindCustomEvent<boolean>) => void;
    }
    interface IxBreadcrumb {
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
         */
        "ghost"?: boolean;
        /**
          * Items will be accessible through a dropdown
         */
        "nextItems"?: string[];
        /**
          * Crumb item clicked event
         */
        "onItemClick"?: (event: IxBreadcrumbCustomEvent<string>) => void;
        /**
          * Next item clicked event
         */
        "onNextClick"?: (event: IxBreadcrumbCustomEvent<{ event: UIEvent; item: string }>) => void;
        /**
          * Excess items will get hidden inside of dropdown
         */
        "visibleItemCount"?: number;
    }
    interface IxBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon"?: string;
        /**
          * Breadcrumb label
         */
        "label"?: string;
    }
    interface IxBurgerMenu {
        /**
          * Is menu displayed as expanded
         */
        "expanded"?: boolean;
    }
    interface IxButton {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
         */
        "ghost"?: boolean;
        /**
          * Invisible button
          * @deprecated use ghost property
         */
        "invisible"?: boolean;
        /**
          * Outline button
         */
        "outline"?: boolean;
        /**
          * Show button as selected. Should be used with outline or ghost
         */
        "selected"?: boolean;
        /**
          * Type of the button
         */
        "type"?: 'button' | 'submit';
        /**
          * Button varaint
         */
        "variant"?: ButtonVariant;
    }
    interface IxCategoryFilter {
        /**
          * Configuration object hash used to populate the dropwdown menu for typeahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories"?: {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState"?: FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
         */
        "hideIcon"?: boolean;
        /**
          * i18n
         */
        "i18nPlainText"?: string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon"?: string;
        /**
          * When set this will initially populate the component with the provided search criteria. This will trigger all input events accordingly.
          * @deprecated Will be removed with 2.0.0. Use the member filterState instead.
         */
        "initialState"?: FilterState;
        /**
          * i18n
         */
        "labelCategories"?: string;
        /**
          * In certain use cases some categories may not be available for selection anymore. To allow proper display of set filters with these categories this ID to label mapping can be populated.  Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Event dispatched whenever the filter state changes.
         */
        "onFilterChanged"?: (event: IxCategoryFilterCustomEvent<FilterState>) => void;
        /**
          * Event dispatched whenever the text input changes.
         */
        "onInputChanged"?: (event: IxCategoryFilterCustomEvent<InputState>) => void;
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder"?: string;
        /**
          * If set to true allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
         */
        "repeatCategories"?: boolean;
        /**
          * A list of strings that will be supplied as typeahead suggestions not tied to any categories.
         */
        "suggestions"?: string[];
        "tmpDisableScrollIntoView"?: boolean;
    }
    interface IxChip {
        /**
          * Determines if the chip is interactive. If false no user input (e.g. mouse states, keyboard navigation) will be possible and also the close button will not be present.
         */
        "active"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Show close icon
         */
        "closable"?: boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show icon
         */
        "icon"?: string | undefined;
        /**
          * Fire event if close button is clicked
          * @deprecated Will be removed in 2.0.0. Use `closeChip`
         */
        "onClose"?: (event: IxChipCustomEvent<any>) => void;
        /**
          * Fire event if close button is clicked
          * @since 1.5.0
         */
        "onCloseChip"?: (event: IxChipCustomEvent<any>) => void;
        /**
          * Show chip with outline style
         */
        "outline"?: boolean;
        /**
          * Chip variant
         */
        "variant"?: | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxCounterPill {
        /**
          * Align pill content left
         */
        "alignLeft"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show pill as outline
         */
        "outline"?: boolean;
        /**
          * Pill variant
         */
        "variant"?: | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxDatePicker {
        /**
          * Corner style
         */
        "corners"?: DateTimeCardCorners;
        /**
          * Default behavior of the done event is to join the two events (date and time) into one combined string output. This combination can be configured over the delimiter
          * @since 1.1.0
         */
        "eventDelimiter"?: string;
        /**
          * Date format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
         */
        "format"?: string;
        /**
          * Picker date. If the picker is in range mode this property is the start date. If set to `null` no default start date will be pre-selected.  Format is based on `format`
          * @since 1.1.0
         */
        "from"?: string | null;
        /**
          * @deprecated Will be removed in 2.0.0
         */
        "individual"?: boolean;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "minDate"?: string;
        /**
          * Date change event  If datepicker is in range mode the event detail will be sperated with a `-` e.g. `2022/10/22 - 2022/10/24` (start and end). If range mode is chosen consider to use `dateRangeChange`.
          * @deprecated String output will be removed. Set ´doneEventDelimiter´ to undefined or null to get date change object instead of a string
         */
        "onDateChange"?: (event: IxDatePickerCustomEvent<LegacyDateChangeEvent>) => void;
        /**
          * Date range change. Only triggered if datepicker is in range mode
          * @since 1.1.0
         */
        "onDateRangeChange"?: (event: IxDatePickerCustomEvent<DateChangeEvent>) => void;
        /**
          * Date selection confirmed via button action
          * @since 1.1.0
         */
        "onDateSelect"?: (event: IxDatePickerCustomEvent<DateChangeEvent>) => void;
        /**
          * Date selection confirmed via button action
          * @deprecated Will be removed in 2.0.0. Use `dateSelect`
         */
        "onDone"?: (event: IxDatePickerCustomEvent<string>) => void;
        /**
          * If true a range of dates can be selected.
         */
        "range"?: boolean;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectDate"?: string;
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @since 1.1.0
         */
        "to"?: string | null;
    }
    interface IxDateTimeCard {
        /**
          * Set corners style
         */
        "corners"?: DateTimeCardCorners1;
        /**
          * set styles
         */
        "individual"?: boolean;
    }
    interface IxDatetimePicker {
        /**
          * Date format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @since 1.1.0
         */
        "dateFormat"?: string;
        /**
          * Default behavior of the done event is to join the two events (date and time) into one combined string output. This combination can be configured over the delimiter
          * @since 1.1.0
         */
        "eventDelimiter"?: string;
        /**
          * Picker date. If the picker is in range mode this property is the start date.  Format is based on `format`
          * @since 1.1.0
         */
        "from"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @since 1.1.0
         */
        "minDate"?: string;
        /**
          * Date change
          * @since 1.1.0
         */
        "onDateChange"?: (event: IxDatetimePickerCustomEvent<DateTimeDateChangeEvent>) => void;
        /**
          * Date selection event is fired after confirm button is pressend
          * @since 1.1.0
         */
        "onDateSelect"?: (event: IxDatetimePickerCustomEvent<DateTimeSelectEvent>) => void;
        /**
          * Done event  Set `doneEventDelimiter` to null or undefine to get the typed event
         */
        "onDone"?: (event: IxDatetimePickerCustomEvent<string>) => void;
        /**
          * Time change
          * @since 1.1.0
         */
        "onTimeChange"?: (event: IxDatetimePickerCustomEvent<string>) => void;
        /**
          * Set range size
         */
        "range"?: boolean;
        /**
          * Show hour input
         */
        "showHour"?: boolean;
        /**
          * Show minutes input
         */
        "showMinutes"?: boolean;
        /**
          * Show seconds input
         */
        "showSeconds"?: boolean;
        /**
          * Show time reference input Time reference is default aligned with @see {this.timeFormat}
          * @since 1.1.0
         */
        "showTimeReference"?: any;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectDate"?: string;
        /**
          * Select time with format string
          * @since 1.1.0
         */
        "time"?: string;
        /**
          * Time format string. See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @since 1.1.0
         */
        "timeFormat"?: string;
        /**
          * Set time reference
         */
        "timeReference"?: 'AM' | 'PM';
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @since 1.1.0
         */
        "to"?: string | null;
    }
    /**
     * @since 1.4.0
     */
    interface IxDivider {
    }
    interface IxDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Render the drawer with maximum height
         */
        "fullHeight"?: boolean;
        /**
          * Max width interpreted as REM
         */
        "maxWidth"?: number;
        /**
          * Min width interpreted as REM
         */
        "minWidth"?: number;
        /**
          * Fire event after drawer is close
         */
        "onDrawerClose"?: (event: IxDrawerCustomEvent<any>) => void;
        /**
          * Fire event after drawer is open
         */
        "onOpen"?: (event: IxDrawerCustomEvent<any>) => void;
        /**
          * Show or hide the drawer
         */
        "show"?: boolean;
        /**
          * Width interpreted as REM if not set to 'auto'
         */
        "width"?: number | 'auto';
    }
    interface IxDropdown {
        /**
          * Adjust dropdown width to the parent width
          * @deprecated Will be removed. Not used anymore
         */
        "adjustDropdownWidthToReferenceWidth"?: boolean;
        /**
          * Adjust dropdown width to the parent width
          * @deprecated Will be removed in 2.0.0. Property has a typo use `adjustDropdownWidthToReferenceWidth` instead.
         */
        "adjustDropdownWidthToReferenceWith"?: boolean;
        /**
          * Define an anchor element
         */
        "anchor"?: string | HTMLElement;
        /**
          * Close behavior
         */
        "closeBehavior"?: 'inside' | 'outside' | 'both' | boolean;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * Move dropdown along main axis of alignment
         */
        "offset"?: {
    mainAxis?: number;
    crossAxis?: number;
    alignmentAxis?: number;
  };
        /**
          * Fire event after visibility of dropdown has changed
         */
        "onShowChanged"?: (event: IxDropdownCustomEvent<boolean>) => void;
        "overwriteDropdownStyle"?: (delegate: {
    dropdownRef: HTMLElement;
    triggerRef?: HTMLElement;
  }) => Promise<Partial<CSSStyleDeclaration>>;
        /**
          * Placement of the dropdown
         */
        "placement"?: Placement;
        /**
          * Position strategy
         */
        "positioningStrategy"?: 'absolute' | 'fixed';
        /**
          * Show dropdown
         */
        "show"?: boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interpreted as id attribute or a DOM element.
         */
        "trigger"?: string | HTMLElement;
        /**
          * Define one or more events to open dropdown
         */
        "triggerEvent"?: DropdownTriggerEvent | DropdownTriggerEvent[];
    }
    /**
     * @since 1.3.0
     */
    interface IxDropdownButton {
        /**
          * Active button
         */
        "active"?: boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Set label
         */
        "label"?: string;
        /**
          * Outline button
         */
        "outline"?: boolean;
        /**
          * Button variant
         */
        "variant"?: DropdownButtonVariant;
    }
    interface IxDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
         */
        "checked"?: boolean;
        /**
          * Disable item and remove event listeners
         */
        "disabled"?: boolean;
        /**
          * Display hover state
         */
        "hover"?: boolean;
        /**
          * Icon of dropdown item
         */
        "icon"?: string;
        /**
          * Label of dropdown item
         */
        "label"?: string;
        /**
          * Click on item
         */
        "onItemClick"?: (event: IxDropdownItemCustomEvent<HTMLIxDropdownItemElement>) => void;
    }
    /**
     * @since 1.4.0
     */
    interface IxDropdownQuickActions {
    }
    /**
     * @since 1.6.0
     */
    interface IxEmptyState {
        /**
          * Optional empty state action
         */
        "action"?: string;
        /**
          * Empty state header
         */
        "header": string;
        /**
          * Optional empty state icon
         */
        "icon"?: string;
        /**
          * Optional empty state layout - one of 'large', 'compact' or 'compactBreak'
         */
        "layout"?: EmptyStateLayout;
        /**
          * Empty state action click event
         */
        "onActionClick"?: (event: IxEmptyStateCustomEvent<void>) => void;
        /**
          * Optional empty state sub header
         */
        "subHeader"?: string;
    }
    interface IxEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
         */
        "animated"?: boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
         */
        "chevron"?: boolean;
        /**
          * Make event-list items more compact
         */
        "compact"?: boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
         */
        "itemHeight"?: 'S' | 'L' | number;
    }
    interface IxEventListItem {
        /**
          * Show chevron on right side of the event list item
         */
        "chevron"?: boolean;
        /**
          * Color of the status indicator. Allowed values are all Core UI color names.
         */
        "color"?: string;
        /**
          * Disable event list item
         */
        "disabled"?: boolean;
        /**
          * Event list item click
         */
        "onItemClick"?: (event: IxEventListItemCustomEvent<any>) => void;
        /**
          * Opacity of the status indicator. Defaults to 1.0
          * @deprecated Will be removed in 2.0.0
         */
        "opacity"?: number;
        /**
          * Show event list item as selected
         */
        "selected"?: boolean;
    }
    interface IxExpandingSearch {
        /**
          * Search icon
         */
        "icon"?: string;
        /**
          * Value changed
         */
        "onValueChange"?: (event: IxExpandingSearchCustomEvent<string>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Default value
         */
        "value"?: string;
    }
    interface IxFilterChip {
        /**
          * If true the filter chip will be in disabled state
         */
        "disabled"?: boolean;
        /**
          * Close clicked
         */
        "onCloseClick"?: (event: IxFilterChipCustomEvent<void>) => void;
    }
    interface IxFlipTile {
        /**
          * Tmp property name
          * @deprecated Will be removed in 2.0.0. Setting this property has no effect
         */
        "footer"?: string;
        /**
          * Height interpreted as REM
          * @since 1.5.0
         */
        "height"?: number | 'auto';
        /**
          * Variation of the Flip
         */
        "state"?: FlipTileState;
        /**
          * Width interpreted as REM
          * @since 1.5.0
         */
        "width"?: number | 'auto';
    }
    interface IxFlipTileContent {
    }
    interface IxGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
         */
        "collapsed"?: boolean;
        /**
          * Expand the group if the header is clicked
         */
        "expandOnHeaderClick"?: boolean;
        /**
          * Group header
         */
        "header"?: string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index"?: number;
        /**
          * Group collapsed
         */
        "onCollapsedChanged"?: (event: IxGroupCustomEvent<boolean>) => void;
        /**
          * Emits when whole group gets selected.
         */
        "onSelectGroup"?: (event: IxGroupCustomEvent<boolean>) => void;
        /**
          * Emits when group item gets selected.
         */
        "onSelectItem"?: (event: IxGroupCustomEvent<number>) => void;
        /**
          * Whether the group is selected.
         */
        "selected"?: boolean;
        /**
          * Group header subtitle
         */
        "subHeader"?: string;
        /**
          * Prevent header from being selectable
         */
        "suppressHeaderSelection"?: boolean;
    }
    interface IxGroupContextMenu {
    }
    interface IxGroupDropdownItem {
        /**
          * Group dropdown icon
         */
        "icon"?: string;
        /**
          * Group dropdown label
         */
        "label"?: string;
    }
    interface IxGroupItem {
        /**
          * The elements tabindex attribute will get set accordingly. If true tabindex will be 0, -1 otherwise.
         */
        "focusable"?: boolean;
        /**
          * Group item icon
         */
        "icon"?: string;
        /**
          * Index
         */
        "index"?: number;
        /**
          * Selection changed
         */
        "onSelectedChanged"?: (event: IxGroupItemCustomEvent<HTMLIxGroupItemElement>) => void;
        /**
          * Group item secondary text
         */
        "secondaryText"?: string;
        /**
          * Show selected state
         */
        "selected"?: boolean;
        /**
          * Supress the selection of the group
         */
        "suppressSelection"?: boolean;
        /**
          * Group item text
         */
        "text"?: string;
    }
    interface IxIconButton {
        /**
          * Color of icon in  button
         */
        "color"?: string;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Button invisible
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button invisible
          * @deprecated Use ghost property
         */
        "invisible"?: boolean;
        /**
          * Button outline
         */
        "outline"?: boolean;
        /**
          * Button in oval shape
         */
        "oval"?: boolean;
        /**
          * Selected state only working with outline or invisible
         */
        "selected"?: boolean;
        /**
          * Size of icon in button
         */
        "size"?: '32' | '24' | '16' | '12';
        /**
          * Type of the button
         */
        "type"?: 'button' | 'submit';
        /**
          * Variant of button
         */
        "variant"?: IconButtonVariant;
    }
    interface IxIndexButton {
        /**
          * Selection state
         */
        "selected"?: boolean;
        /**
          * Button variant
         */
        "variant"?: IndexButtonVariant;
    }
    interface IxInputGroup {
    }
    /**
     * @since 1.6.0
     */
    interface IxKeyValue {
        /**
          * Optional key value icon
         */
        "icon"?: string;
        /**
          * Key value label
         */
        "label": string;
        /**
          * Optional key value label position - 'top' or 'left'
         */
        "labelPosition"?: KeyValueLabelPosition;
        /**
          * Optional key value text value
         */
        "value"?: string;
    }
    /**
     * @since 1.6.0
     */
    interface IxKeyValueList {
        /**
          * Optional striped key value list style
         */
        "striped"?: boolean;
    }
    interface IxKpi {
        "label"?: string;
        "orientation"?: 'horizontal' | 'vertical';
        "state"?: 'neutral' | 'warning' | 'alarm';
        "unit"?: string;
        "value"?: string | number;
    }
    interface IxMapNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Hide the sidebar context menu button when set to true
         */
        "hideContextMenu"?: boolean;
        /**
          * Navigation title
         */
        "navigationTitle"?: string;
        /**
          * Context menu clicked
         */
        "onContextMenuClick"?: (event: IxMapNavigationCustomEvent<void>) => void;
        /**
          * Navigation toggled
         */
        "onNavigationToggled"?: (event: IxMapNavigationCustomEvent<boolean>) => void;
    }
    interface IxMapNavigationOverlay {
        /**
          * Color of icon
         */
        "color"?: string;
        /**
          * Icon of overlay
         */
        "icon"?: string;
        /**
          * Title of overlay
         */
        "name"?: string;
        /**
          * Event closed
         */
        "onCloseClick"?: (event: IxMapNavigationOverlayCustomEvent<any>) => void;
    }
    interface IxMenu {
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationDescription"?: string;
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationName"?: string;
        /**
          * Internal
         */
        "enableMapExpand"?: boolean;
        /**
          * Is settings tab is visible
         */
        "enableSettings"?: boolean;
        /**
          * Show toggle between light and dark variant. Only if the provided theme have implemented both!
         */
        "enableToggleTheme"?: boolean;
        /**
          * Expand menu
         */
        "expand"?: boolean;
        "i18nCollapse"?: string;
        "i18nExpand"?: string;
        "i18nLegal"?: string;
        "i18nMore"?: string;
        "i18nSettings"?: string;
        "i18nToggleTheme"?: string;
        /**
          * Maximum number of menu items to show in case enough vertical space is available. Extra menu items will be collapsed to 'show more' menu item.
         */
        "maxVisibleMenuItems"?: number;
        /**
          * Menu expanded
         */
        "onExpandChange"?: (event: IxMenuCustomEvent<boolean>) => void;
        /**
          * Map Sidebar expanded
         */
        "onMapExpandChange"?: (event: IxMenuCustomEvent<boolean>) => void;
        /**
          * Is about tab visible
         */
        "showAbout"?: boolean;
        /**
          * Is settings tab visible
         */
        "showSettings"?: boolean;
    }
    interface IxMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Label of first tab
         */
        "label"?: string;
        /**
          * About and Legal closed
         */
        "onClose"?: (event: IxMenuAboutCustomEvent<MouseEvent>) => void;
        /**
          * Internal
         */
        "show"?: boolean;
    }
    interface IxMenuAboutItem {
        /**
          * About Item label
         */
        "label"?: string;
    }
    interface IxMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel"?: string;
        /**
          * Internal
         */
        "expanded"?: boolean;
        "i18nShowMore"?: string;
        /**
          * Title of the about news
         */
        "label"?: string;
        /**
          * Bottom offset
         */
        "offsetBottom"?: number;
        /**
          * Popover closed
         */
        "onClosePopover"?: (event: IxMenuAboutNewsCustomEvent<void>) => void;
        /**
          * Show More button is pressed
         */
        "onShowMore"?: (event: IxMenuAboutNewsCustomEvent<MouseEvent>) => void;
        /**
          * Show about news
         */
        "show"?: boolean;
    }
    interface IxMenuAvatar {
        /**
          * Second line of text
         */
        "bottom"?: string;
        /**
          * Use for translation
         */
        "i18nLogout"?: string;
        /**
          * Display a avatar image
          * @since 1.4.0
         */
        "image"?: string;
        /**
          * Display the initials of the user. Will be overwritten by image
          * @since 1.4.0
         */
        "initials"?: string;
        /**
          * Logout click
         */
        "onLogoutClick"?: (event: IxMenuAvatarCustomEvent<any>) => void;
        /**
          * First line of text
         */
        "top"?: string;
    }
    interface IxMenuAvatarItem {
        /**
          * Avatar dropdown icon
         */
        "icon"?: string;
        /**
          * Avatar dropdown label
         */
        "label"?: string;
        /**
          * Avatar dropdown item clicked
         */
        "onItemClick"?: (event: IxMenuAvatarItemCustomEvent<MouseEvent>) => void;
    }
    interface IxMenuItem {
        /**
          * State to display active
         */
        "active"?: boolean;
        /**
          * Caution: this is no longer working. Please use slot="bottom" instead.  Place tab on bottom
          * @deprecated Will be removed in 2.0.0. Replaced by slot based implementation
         */
        "bottom"?: boolean;
        /**
          * Disable tab and remove event handlers
         */
        "disabled"?: boolean;
        /**
          * Move the Tab to a top position.
         */
        "home"?: boolean;
        /**
          * Show notification count on tab
         */
        "notifications"?: number;
        /**
          * Icon name from @siemens/ix-icons
         */
        "tabIcon"?: string;
    }
    interface IxMenuSettings {
        /**
          * active tab
         */
        "activeTabLabel"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Popover closed
         */
        "onClose"?: (event: IxMenuSettingsCustomEvent<MouseEvent>) => void;
        /**
          * Internal
         */
        "show"?: boolean;
    }
    interface IxMenuSettingsItem {
        /**
          * Label
         */
        "label"?: string;
    }
    interface IxMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
         */
        "dismissible"?: boolean;
        /**
          * An event emitted when the close button is clicked
         */
        "onClosedChange"?: (event: IxMessageBarCustomEvent<any>) => void;
        /**
          * Specifies the type of the alert.
         */
        "type"?: 'danger' | 'warning' | 'info';
    }
    interface IxModal {
        /**
          * Should the modal be animtated
         */
        "animation"?: boolean;
        "ariaDescribedBy"?: string;
        "ariaLabelledBy"?: string;
        /**
          * Adds a dimming layer to the modal. This should only be used when it it necessary to focus the user's attention to the dialog content (e.g. errors, warnings, complex tasks).
         */
        "backdrop"?: boolean | 'static';
        /**
          * Backdrop class
         */
        "backdropClass"?: string;
        /**
          * BeforeDismiss callback
         */
        "beforeDismiss"?: (reason?: any) => boolean | Promise<boolean>;
        /**
          * Centered modal
         */
        "centered"?: boolean;
        /**
          * Content of modal
         */
        "content"?: HTMLElement | string;
        /**
          * Header title
         */
        "headerTitle"?: string;
        /**
          * Optional icon displayed next to the title
         */
        "icon"?: string;
        /**
          * Color of the header {@see ix-icon}
         */
        "iconColor"?: NotificationColor;
        /**
          * ESC close modal dialog
         */
        "keyboard"?: boolean;
        /**
          * Modal dialog class
         */
        "modalDialogClass"?: string;
        /**
          * Modal closed
         */
        "onClosed"?: (event: IxModalCustomEvent<any>) => void;
        /**
          * Modal dismissed
         */
        "onDismissed"?: (event: IxModalCustomEvent<any>) => void;
        /**
          * Modal scollable
         */
        "scrollable"?: boolean;
        /**
          * Modal size
         */
        "size"?: 'sm' | 'lg' | 'xl';
        /**
          * Window class
         */
        "windowClass"?: string;
    }
    interface IxModalContainer {
    }
    interface IxModalExample {
    }
    interface IxPageHeader {
        /**
          * has back button
         */
        "hasBackButton"?: boolean;
        /**
          * subtitle
         */
        "headerSubtitle"?: string | undefined;
        /**
          * title
         */
        "headerTitle"?: string;
        /**
          * triggered when back button is clicked
         */
        "onBackButtonClick"?: (event: IxPageHeaderCustomEvent<void>) => void;
        /**
          * page header variant
         */
        "variant"?: PageHeaderVariant;
    }
    /**
     * @since 1.5.0
     */
    interface IxPagination {
        /**
          * Advanced mode
         */
        "advanced"?: boolean;
        /**
          * Total number of pages
         */
        "count"?: number;
        /**
          * /**   i18n
         */
        "i18nItems"?: string;
        /**
          * i18n
         */
        "i18nOf"?: string;
        /**
          * i18n
         */
        "i18nPage"?: string;
        /**
          * Number of items shown at once. Can only be changed in advaced mode.
         */
        "itemCount"?: number;
        /**
          * Item count change event
         */
        "onItemCountChanged"?: (event: IxPaginationCustomEvent<number>) => void;
        /**
          * Page selection event
         */
        "onPageSelected"?: (event: IxPaginationCustomEvent<number>) => void;
        /**
          * Zero based index of currently selected page
         */
        "selectedPage"?: number;
        /**
          * Show item count in advanced mode
         */
        "showItemCount"?: boolean;
    }
    interface IxPill {
        /**
          * Align pill content left
         */
        "alignLeft"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show icon
         */
        "icon"?: string | undefined;
        /**
          * Show pill as outline
         */
        "outline"?: boolean;
        /**
          * Pill variant
         */
        "variant"?: | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxSelect {
        /**
          * Show clear button
         */
        "allowClear"?: boolean;
        /**
          * If true the select will be in disabled state
         */
        "disabled"?: boolean;
        /**
          * Select is extendable
         */
        "editable"?: boolean;
        /**
          * Hide list header
          * @since 1.5.0
          * @
         */
        "hideListHeader"?: boolean;
        /**
          * Hint inside of dropdown if no items where found with current filter text
          * @since 1.5.0
         */
        "i18nNoMatches"?: string;
        /**
          * Input field placeholder
         */
        "i18nPlaceholder"?: string;
        /**
          * Input field placeholder for editable select
         */
        "i18nPlaceholderEditable"?: string;
        /**
          * Select list header
         */
        "i18nSelectListHeader"?: string;
        /**
          * Selection mode
         */
        "mode"?: 'single' | 'multiple';
        /**
          * Item added to selection
         */
        "onAddItem"?: (event: IxSelectCustomEvent<string>) => void;
        /**
          * Item selection changed
         */
        "onItemSelectionChange"?: (event: IxSelectCustomEvent<string | string[]>) => void;
        /**
          * If true the select will be in readonly mode
         */
        "readonly"?: boolean;
        /**
          * Indices of selected items This corresponds to the value property of ix-select-items and therefor not neccessarily the indices of the items in the list.
         */
        "selectedIndices"?: string | string[];
    }
    interface IxSelectItem {
        "hover"?: boolean;
        /**
          * Displayed name of the item
         */
        "label"?: string;
        /**
          * Item clicked
         */
        "onItemClick"?: (event: IxSelectItemCustomEvent<string>) => void;
        /**
          * Whether the item is selected.
         */
        "selected"?: boolean;
        /**
          * Item value
         */
        "value": any;
    }
    interface IxSpinner {
        /**
          * Size of spinner
         */
        "size"?: 'medium' | 'large';
        /**
          * Variant of spinner
         */
        "variant"?: 'primary' | 'sencodary' | 'secondary';
    }
    interface IxSplitButton {
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Button invisible
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button invisible
          * @deprecated Will be removed in 2.0.0. Use ghost property
         */
        "invisible"?: boolean;
        /**
          * Button label
         */
        "label"?: string;
        /**
          * Button clicked
         */
        "onButtonClick"?: (event: IxSplitButtonCustomEvent<MouseEvent>) => void;
        /**
          * Button outline variant
         */
        "outline"?: boolean;
        /**
          * Placement of the dropdown
         */
        "placement"?: Placement;
        /**
          * Splitbutton icon
         */
        "splitIcon"?: string;
        /**
          * Color variant of button
         */
        "variant"?: SplitButtonVariant;
    }
    interface IxSplitButtonItem {
        /**
          * Dropdown icon
         */
        "icon"?: string;
        /**
          * Dropdown label
         */
        "label"?: string;
        /**
          * Dropdown item clicked
         */
        "onItemClick"?: (event: IxSplitButtonItemCustomEvent<MouseEvent>) => void;
    }
    interface IxTabItem {
        /**
          * Set counter value
         */
        "counter"?: number;
        /**
          * Set disabled tab
         */
        "disabled"?: boolean;
        /**
          * Set icon only tab
         */
        "icon"?: boolean;
        /**
          * Set layout width style
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * Set selected placement
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set rounded tab
         */
        "rounded"?: boolean;
        /**
          * Set selected tab
         */
        "selected"?: boolean;
        /**
          * Set small size tab
         */
        "small"?: boolean;
    }
    interface IxTabs {
        /**
          * Set layout width style
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * Set placement style
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set rounded tabs
         */
        "rounded"?: boolean;
        /**
          * Set default selected tab by index
         */
        "selected"?: number;
        /**
          * Set tab items to small size
         */
        "small"?: boolean;
    }
    interface IxTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
         */
        "size"?: 'small' | 'medium' | 'big';
    }
    interface IxTimePicker {
        /**
          * Corner style
         */
        "corners"?: TimePickerCorners;
        /**
          * Format of time string
          * @since 1.1.0
         */
        "format"?: string;
        /**
          * @deprecated Will be removed in 2.0.0
         */
        "individual"?: boolean;
        /**
          * Time event
         */
        "onDone"?: (event: IxTimePickerCustomEvent<string>) => void;
        /**
          * Time change event
         */
        "onTimeChange"?: (event: IxTimePickerCustomEvent<string>) => void;
        /**
          * Show hour input
         */
        "showHour"?: boolean;
        /**
          * Show minutes input
         */
        "showMinutes"?: boolean;
        /**
          * Show seconds input
         */
        "showSeconds"?: boolean;
        /**
          * Show time reference input
          * @since 1.1.0 time reference is default aligned with formt tt
         */
        "showTimeReference"?: any;
        /**
          * Text of date select button
          * @since 1.1.0
         */
        "textSelectTime"?: string;
        /**
          * Select time with format string
          * @since 1.1.0
         */
        "time"?: string;
        /**
          * Set time reference
         */
        "timeReference"?: 'AM' | 'PM';
    }
    interface IxToast {
        /**
          * Autoclose behavior
         */
        "autoClose"?: boolean;
        /**
          * Autoclose title after delay
         */
        "autoCloseDelay"?: number;
        /**
          * Icon of toast
         */
        "icon"?: string;
        /**
          * Icon color of toast
         */
        "iconColor"?: string;
        /**
          * Toast closed
         */
        "onCloseToast"?: (event: IxToastCustomEvent<any>) => void;
        /**
          * Toast title
         */
        "toastTitle"?: string;
        /**
          * Toast type
         */
        "type"?: ToastType;
    }
    interface IxToastContainer {
        "containerClass"?: string;
        "containerId"?: string;
        "position"?: 'bottom-right' | 'top-right';
    }
    interface IxToggle {
        /**
          * Whether the slide-toggle element is checked or not.
         */
        "checked"?: boolean;
        /**
          * Basic and status colors from color palette
          * @deprecated Will be removed in 2.0.0
         */
        "color"?: string;
        /**
          * Whether the slide-toggle element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Hide `on` and `off` text
         */
        "hideText"?: boolean;
        /**
          * If true the control is in indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * An event will be dispatched each time the slide-toggle changes its value.
         */
        "onCheckedChange"?: (event: IxToggleCustomEvent<boolean>) => void;
        /**
          * Text for indeterminate state
         */
        "textIndeterminate"?: string;
        /**
          * Text for off state
         */
        "textOff"?: string;
        /**
          * Text for on state
         */
        "textOn"?: string;
    }
    /**
     * @since 1.4.0
     */
    interface IxTooltip {
        /**
          * CSS selector for hover trigger element e.g. `for="[data-my-custom-select]"`
         */
        "for"?: string;
        /**
          * Define if the user can access the tooltip via mouse.
         */
        "interactive"?: boolean;
        /**
          * Initial placement of the tooltip. If the placement don"t have enough space, the tooltip will placed on another location.
          * @since 1.5.0
         */
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
        /**
          * Title of the tooltip
         */
        "titleContent"?: string;
    }
    interface IxTree {
        /**
          * Selection and collapsed state management
         */
        "context"?: TreeContext;
        /**
          * Tree model
         */
        "model"?: TreeModel<any>;
        /**
          * Context changed
         */
        "onContextChange"?: (event: IxTreeCustomEvent<TreeContext>) => void;
        /**
          * Node clicked event
          * @since 1.5.0
         */
        "onNodeClicked"?: (event: IxTreeCustomEvent<string>) => void;
        /**
          * Emits removed nodes
         */
        "onNodeRemoved"?: (event: IxTreeCustomEvent<any>) => void;
        /**
          * Node toggled event
          * @since 1.5.0
         */
        "onNodeToggled"?: (event: IxTreeCustomEvent<{ id: string; isExpaned: boolean }>) => void;
        /**
          * Render function of tree items
         */
        "renderItem"?: <T = any>(
    index: number,
    data: T,
    dataList: Array<T>,
    context: TreeContext,
    update: (callback: UpdateCallback) => void
  ) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root"?: string;
    }
    interface IxTreeItem {
        /**
          * Context
         */
        "context"?: TreeItemContext;
        /**
          * Has tree item children
         */
        "hasChildren"?: boolean;
        /**
          * Clicked
         */
        "onItemClick"?: (event: IxTreeItemCustomEvent<void>) => void;
        /**
          * Expand/Collapsed toggled
         */
        "onToggle"?: (event: IxTreeItemCustomEvent<void>) => void;
        /**
          * Text
         */
        "text"?: string;
    }
    interface IxTypography {
        /**
          * Text color based on theme variables
         */
        "color"?: TypographyColors;
        /**
          * Font variant based on theme variables
         */
        "variant"?: TypographyVariants;
    }
    interface IxUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link "https://www.w3schools.com/tags/att_input_accept.asp"}
         */
        "accept"?: string;
        /**
          * Disable all input events
         */
        "disabled"?: boolean;
        /**
          * Text for disabled state
         */
        "i18nUploadDisabled"?: string;
        /**
          * Label for upload file button
         */
        "i18nUploadFile"?: string;
        /**
          * Will be used by state = UploadFileState.LOADING
         */
        "loadingText"?: string;
        /**
          * Whether the text should wrap to more than one line
         */
        "multiline"?: boolean;
        /**
          * If multiple is true the user can drop or select multiple files
         */
        "multiple"?: boolean;
        /**
          * You get an array of Files after drop-action or browse action is finished
         */
        "onFilesChanged"?: (event: IxUploadCustomEvent<Array<File>>) => void;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
         */
        "selectFileText"?: string;
        /**
          * After a file is uploaded you can set the upload component to a defined state
         */
        "state"?: UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
         */
        "uploadFailedText"?: string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
         */
        "uploadSuccessText"?: string;
    }
    interface IxValidationTooltip {
        /**
          * Message of the tooltip
         */
        "message"?: string;
        /**
          * Placement of the tooltip
         */
        "placement"?: Placement;
    }
    interface IxWorkflowStep {
        /**
          * Activate navigation click
         */
        "clickable"?: boolean;
        /**
          * Set disabled
         */
        "disabled"?: boolean;
        "onSelectedChanged"?: (event: IxWorkflowStepCustomEvent<HTMLIxWorkflowStepElement>) => void;
        /**
          * Activate navigation click
          * @deprecated Will be changed to '@internal' in 2.0.0
         */
        "position"?: 'first' | 'last' | 'single' | 'undefined';
        /**
          * Set selected
         */
        "selected"?: boolean;
        /**
          * Set status
         */
        "status"?: 'open' | 'success' | 'done' | 'warning' | 'error';
        /**
          * Select orientation
         */
        "vertical"?: boolean;
    }
    interface IxWorkflowSteps {
        /**
          * Activate navigation click
         */
        "clickable"?: boolean;
        /**
          * Select linear mode
          * @deprecated Has no effect on component. Will get removed in 2.0.0
         */
        "linear"?: boolean;
        /**
          * On step selected event
         */
        "onStepSelected"?: (event: IxWorkflowStepsCustomEvent<number>) => void;
        /**
          * Activate navigation click
         */
        "selectedIndex"?: number;
        /**
          * Select orientation
         */
        "vertical"?: boolean;
    }
    interface MyComponent {
    }
    interface IntrinsicElements {
        "ix-animated-tab": IxAnimatedTab;
        "ix-animated-tabs": IxAnimatedTabs;
        "ix-application-header": IxApplicationHeader;
        "ix-basic-navigation": IxBasicNavigation;
        "ix-blind": IxBlind;
        "ix-breadcrumb": IxBreadcrumb;
        "ix-breadcrumb-item": IxBreadcrumbItem;
        "ix-burger-menu": IxBurgerMenu;
        "ix-button": IxButton;
        "ix-category-filter": IxCategoryFilter;
        "ix-chip": IxChip;
        "ix-counter-pill": IxCounterPill;
        "ix-date-picker": IxDatePicker;
        "ix-date-time-card": IxDateTimeCard;
        "ix-datetime-picker": IxDatetimePicker;
        "ix-divider": IxDivider;
        "ix-drawer": IxDrawer;
        "ix-dropdown": IxDropdown;
        "ix-dropdown-button": IxDropdownButton;
        "ix-dropdown-item": IxDropdownItem;
        "ix-dropdown-quick-actions": IxDropdownQuickActions;
        "ix-empty-state": IxEmptyState;
        "ix-event-list": IxEventList;
        "ix-event-list-item": IxEventListItem;
        "ix-expanding-search": IxExpandingSearch;
        "ix-filter-chip": IxFilterChip;
        "ix-flip-tile": IxFlipTile;
        "ix-flip-tile-content": IxFlipTileContent;
        "ix-group": IxGroup;
        "ix-group-context-menu": IxGroupContextMenu;
        "ix-group-dropdown-item": IxGroupDropdownItem;
        "ix-group-item": IxGroupItem;
        "ix-icon-button": IxIconButton;
        "ix-index-button": IxIndexButton;
        "ix-input-group": IxInputGroup;
        "ix-key-value": IxKeyValue;
        "ix-key-value-list": IxKeyValueList;
        "ix-kpi": IxKpi;
        "ix-map-navigation": IxMapNavigation;
        "ix-map-navigation-overlay": IxMapNavigationOverlay;
        "ix-menu": IxMenu;
        "ix-menu-about": IxMenuAbout;
        "ix-menu-about-item": IxMenuAboutItem;
        "ix-menu-about-news": IxMenuAboutNews;
        "ix-menu-avatar": IxMenuAvatar;
        "ix-menu-avatar-item": IxMenuAvatarItem;
        "ix-menu-item": IxMenuItem;
        "ix-menu-settings": IxMenuSettings;
        "ix-menu-settings-item": IxMenuSettingsItem;
        "ix-message-bar": IxMessageBar;
        "ix-modal": IxModal;
        "ix-modal-container": IxModalContainer;
        "ix-modal-example": IxModalExample;
        "ix-page-header": IxPageHeader;
        "ix-pagination": IxPagination;
        "ix-pill": IxPill;
        "ix-select": IxSelect;
        "ix-select-item": IxSelectItem;
        "ix-spinner": IxSpinner;
        "ix-split-button": IxSplitButton;
        "ix-split-button-item": IxSplitButtonItem;
        "ix-tab-item": IxTabItem;
        "ix-tabs": IxTabs;
        "ix-tile": IxTile;
        "ix-time-picker": IxTimePicker;
        "ix-toast": IxToast;
        "ix-toast-container": IxToastContainer;
        "ix-toggle": IxToggle;
        "ix-tooltip": IxTooltip;
        "ix-tree": IxTree;
        "ix-tree-item": IxTreeItem;
        "ix-typography": IxTypography;
        "ix-upload": IxUpload;
        "ix-validation-tooltip": IxValidationTooltip;
        "ix-workflow-step": IxWorkflowStep;
        "ix-workflow-steps": IxWorkflowSteps;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ix-animated-tab": LocalJSX.IxAnimatedTab & JSXBase.HTMLAttributes<HTMLIxAnimatedTabElement>;
            "ix-animated-tabs": LocalJSX.IxAnimatedTabs & JSXBase.HTMLAttributes<HTMLIxAnimatedTabsElement>;
            "ix-application-header": LocalJSX.IxApplicationHeader & JSXBase.HTMLAttributes<HTMLIxApplicationHeaderElement>;
            "ix-basic-navigation": LocalJSX.IxBasicNavigation & JSXBase.HTMLAttributes<HTMLIxBasicNavigationElement>;
            "ix-blind": LocalJSX.IxBlind & JSXBase.HTMLAttributes<HTMLIxBlindElement>;
            "ix-breadcrumb": LocalJSX.IxBreadcrumb & JSXBase.HTMLAttributes<HTMLIxBreadcrumbElement>;
            "ix-breadcrumb-item": LocalJSX.IxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLIxBreadcrumbItemElement>;
            "ix-burger-menu": LocalJSX.IxBurgerMenu & JSXBase.HTMLAttributes<HTMLIxBurgerMenuElement>;
            "ix-button": LocalJSX.IxButton & JSXBase.HTMLAttributes<HTMLIxButtonElement>;
            "ix-category-filter": LocalJSX.IxCategoryFilter & JSXBase.HTMLAttributes<HTMLIxCategoryFilterElement>;
            "ix-chip": LocalJSX.IxChip & JSXBase.HTMLAttributes<HTMLIxChipElement>;
            "ix-counter-pill": LocalJSX.IxCounterPill & JSXBase.HTMLAttributes<HTMLIxCounterPillElement>;
            "ix-date-picker": LocalJSX.IxDatePicker & JSXBase.HTMLAttributes<HTMLIxDatePickerElement>;
            "ix-date-time-card": LocalJSX.IxDateTimeCard & JSXBase.HTMLAttributes<HTMLIxDateTimeCardElement>;
            "ix-datetime-picker": LocalJSX.IxDatetimePicker & JSXBase.HTMLAttributes<HTMLIxDatetimePickerElement>;
            /**
             * @since 1.4.0
             */
            "ix-divider": LocalJSX.IxDivider & JSXBase.HTMLAttributes<HTMLIxDividerElement>;
            "ix-drawer": LocalJSX.IxDrawer & JSXBase.HTMLAttributes<HTMLIxDrawerElement>;
            "ix-dropdown": LocalJSX.IxDropdown & JSXBase.HTMLAttributes<HTMLIxDropdownElement>;
            /**
             * @since 1.3.0
             */
            "ix-dropdown-button": LocalJSX.IxDropdownButton & JSXBase.HTMLAttributes<HTMLIxDropdownButtonElement>;
            "ix-dropdown-item": LocalJSX.IxDropdownItem & JSXBase.HTMLAttributes<HTMLIxDropdownItemElement>;
            /**
             * @since 1.4.0
             */
            "ix-dropdown-quick-actions": LocalJSX.IxDropdownQuickActions & JSXBase.HTMLAttributes<HTMLIxDropdownQuickActionsElement>;
            /**
             * @since 1.6.0
             */
            "ix-empty-state": LocalJSX.IxEmptyState & JSXBase.HTMLAttributes<HTMLIxEmptyStateElement>;
            "ix-event-list": LocalJSX.IxEventList & JSXBase.HTMLAttributes<HTMLIxEventListElement>;
            "ix-event-list-item": LocalJSX.IxEventListItem & JSXBase.HTMLAttributes<HTMLIxEventListItemElement>;
            "ix-expanding-search": LocalJSX.IxExpandingSearch & JSXBase.HTMLAttributes<HTMLIxExpandingSearchElement>;
            "ix-filter-chip": LocalJSX.IxFilterChip & JSXBase.HTMLAttributes<HTMLIxFilterChipElement>;
            "ix-flip-tile": LocalJSX.IxFlipTile & JSXBase.HTMLAttributes<HTMLIxFlipTileElement>;
            "ix-flip-tile-content": LocalJSX.IxFlipTileContent & JSXBase.HTMLAttributes<HTMLIxFlipTileContentElement>;
            "ix-group": LocalJSX.IxGroup & JSXBase.HTMLAttributes<HTMLIxGroupElement>;
            "ix-group-context-menu": LocalJSX.IxGroupContextMenu & JSXBase.HTMLAttributes<HTMLIxGroupContextMenuElement>;
            "ix-group-dropdown-item": LocalJSX.IxGroupDropdownItem & JSXBase.HTMLAttributes<HTMLIxGroupDropdownItemElement>;
            "ix-group-item": LocalJSX.IxGroupItem & JSXBase.HTMLAttributes<HTMLIxGroupItemElement>;
            "ix-icon-button": LocalJSX.IxIconButton & JSXBase.HTMLAttributes<HTMLIxIconButtonElement>;
            "ix-index-button": LocalJSX.IxIndexButton & JSXBase.HTMLAttributes<HTMLIxIndexButtonElement>;
            "ix-input-group": LocalJSX.IxInputGroup & JSXBase.HTMLAttributes<HTMLIxInputGroupElement>;
            /**
             * @since 1.6.0
             */
            "ix-key-value": LocalJSX.IxKeyValue & JSXBase.HTMLAttributes<HTMLIxKeyValueElement>;
            /**
             * @since 1.6.0
             */
            "ix-key-value-list": LocalJSX.IxKeyValueList & JSXBase.HTMLAttributes<HTMLIxKeyValueListElement>;
            "ix-kpi": LocalJSX.IxKpi & JSXBase.HTMLAttributes<HTMLIxKpiElement>;
            "ix-map-navigation": LocalJSX.IxMapNavigation & JSXBase.HTMLAttributes<HTMLIxMapNavigationElement>;
            "ix-map-navigation-overlay": LocalJSX.IxMapNavigationOverlay & JSXBase.HTMLAttributes<HTMLIxMapNavigationOverlayElement>;
            "ix-menu": LocalJSX.IxMenu & JSXBase.HTMLAttributes<HTMLIxMenuElement>;
            "ix-menu-about": LocalJSX.IxMenuAbout & JSXBase.HTMLAttributes<HTMLIxMenuAboutElement>;
            "ix-menu-about-item": LocalJSX.IxMenuAboutItem & JSXBase.HTMLAttributes<HTMLIxMenuAboutItemElement>;
            "ix-menu-about-news": LocalJSX.IxMenuAboutNews & JSXBase.HTMLAttributes<HTMLIxMenuAboutNewsElement>;
            "ix-menu-avatar": LocalJSX.IxMenuAvatar & JSXBase.HTMLAttributes<HTMLIxMenuAvatarElement>;
            "ix-menu-avatar-item": LocalJSX.IxMenuAvatarItem & JSXBase.HTMLAttributes<HTMLIxMenuAvatarItemElement>;
            "ix-menu-item": LocalJSX.IxMenuItem & JSXBase.HTMLAttributes<HTMLIxMenuItemElement>;
            "ix-menu-settings": LocalJSX.IxMenuSettings & JSXBase.HTMLAttributes<HTMLIxMenuSettingsElement>;
            "ix-menu-settings-item": LocalJSX.IxMenuSettingsItem & JSXBase.HTMLAttributes<HTMLIxMenuSettingsItemElement>;
            "ix-message-bar": LocalJSX.IxMessageBar & JSXBase.HTMLAttributes<HTMLIxMessageBarElement>;
            "ix-modal": LocalJSX.IxModal & JSXBase.HTMLAttributes<HTMLIxModalElement>;
            "ix-modal-container": LocalJSX.IxModalContainer & JSXBase.HTMLAttributes<HTMLIxModalContainerElement>;
            "ix-modal-example": LocalJSX.IxModalExample & JSXBase.HTMLAttributes<HTMLIxModalExampleElement>;
            "ix-page-header": LocalJSX.IxPageHeader & JSXBase.HTMLAttributes<HTMLIxPageHeaderElement>;
            /**
             * @since 1.5.0
             */
            "ix-pagination": LocalJSX.IxPagination & JSXBase.HTMLAttributes<HTMLIxPaginationElement>;
            "ix-pill": LocalJSX.IxPill & JSXBase.HTMLAttributes<HTMLIxPillElement>;
            "ix-select": LocalJSX.IxSelect & JSXBase.HTMLAttributes<HTMLIxSelectElement>;
            "ix-select-item": LocalJSX.IxSelectItem & JSXBase.HTMLAttributes<HTMLIxSelectItemElement>;
            "ix-spinner": LocalJSX.IxSpinner & JSXBase.HTMLAttributes<HTMLIxSpinnerElement>;
            "ix-split-button": LocalJSX.IxSplitButton & JSXBase.HTMLAttributes<HTMLIxSplitButtonElement>;
            "ix-split-button-item": LocalJSX.IxSplitButtonItem & JSXBase.HTMLAttributes<HTMLIxSplitButtonItemElement>;
            "ix-tab-item": LocalJSX.IxTabItem & JSXBase.HTMLAttributes<HTMLIxTabItemElement>;
            "ix-tabs": LocalJSX.IxTabs & JSXBase.HTMLAttributes<HTMLIxTabsElement>;
            "ix-tile": LocalJSX.IxTile & JSXBase.HTMLAttributes<HTMLIxTileElement>;
            "ix-time-picker": LocalJSX.IxTimePicker & JSXBase.HTMLAttributes<HTMLIxTimePickerElement>;
            "ix-toast": LocalJSX.IxToast & JSXBase.HTMLAttributes<HTMLIxToastElement>;
            "ix-toast-container": LocalJSX.IxToastContainer & JSXBase.HTMLAttributes<HTMLIxToastContainerElement>;
            "ix-toggle": LocalJSX.IxToggle & JSXBase.HTMLAttributes<HTMLIxToggleElement>;
            /**
             * @since 1.4.0
             */
            "ix-tooltip": LocalJSX.IxTooltip & JSXBase.HTMLAttributes<HTMLIxTooltipElement>;
            "ix-tree": LocalJSX.IxTree & JSXBase.HTMLAttributes<HTMLIxTreeElement>;
            "ix-tree-item": LocalJSX.IxTreeItem & JSXBase.HTMLAttributes<HTMLIxTreeItemElement>;
            "ix-typography": LocalJSX.IxTypography & JSXBase.HTMLAttributes<HTMLIxTypographyElement>;
            "ix-upload": LocalJSX.IxUpload & JSXBase.HTMLAttributes<HTMLIxUploadElement>;
            "ix-validation-tooltip": LocalJSX.IxValidationTooltip & JSXBase.HTMLAttributes<HTMLIxValidationTooltipElement>;
            "ix-workflow-step": LocalJSX.IxWorkflowStep & JSXBase.HTMLAttributes<HTMLIxWorkflowStepElement>;
            "ix-workflow-steps": LocalJSX.IxWorkflowSteps & JSXBase.HTMLAttributes<HTMLIxWorkflowStepsElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
