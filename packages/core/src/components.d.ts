/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionCardVariant } from "./components/action-card/action-card.types";
import { IxTheme } from "./components/utils/theme-switcher";
import { Breakpoint } from "./components/utils/breakpoints";
import { AppSwitchConfiguration } from "./components/utils/application-layout/context";
import { BlindVariant } from "./components/blind/blind.types";
import { ButtonVariant } from "./components/button/button";
import { CardVariant } from "./components/card/card.types";
import { CardAccordionExpandChangeEvent } from "./components/card-accordion/card-accordion.types";
import { FilterState } from "./components/category-filter/filter-state";
import { LogicalFilterOperator } from "./components/category-filter/logical-filter-operator";
import { InputState } from "./components/category-filter/input-state";
import { ColumnSize } from "./components/col/col.types";
import { ContentHeaderVariant } from "./components/content-header/content-header.types";
import { CssGridTemplateType } from "./components/css-grid/css-grid.types";
import { ButtonVariant as ButtonVariant1 } from "./components/button/button";
import { DateDropdownOption, DateRangeChangeEvent } from "./components/date-dropdown/date-dropdown.types";
import { DateInputValidityState } from "./components/date-input/date-input.types";
import { DateTimeCardCorners } from "./components/date-time-card/date-time-card.types";
import { DateChangeEvent } from "./components/date-picker/date-picker.events";
import { DateTimeDateChangeEvent, DateTimeSelectEvent } from "./components/datetime-picker/datetime-picker.types";
import { ElementReference } from "./components/utils/element-reference";
import { CloseBehavior } from "./components/dropdown/dropdown-controller";
import { AlignedPlacement, Side } from "./components/dropdown/placement";
import { DropdownButtonVariant } from "./components/dropdown-button/dropdown-button.types";
import { EmptyStateLayout } from "./components/empty-state/empty-state.types";
import { MakeRef } from "./components/utils/make-ref";
import { FlipTileState } from "./components/flip-tile/flip-tile-state";
import { IconButtonVariant } from "./components/icon-button/icon-button.types";
import { KeyValueLabelPosition } from "./components/key-value/key-value.types";
import { CustomCloseEvent, CustomLabelChangeEvent } from "./components/utils/menu-tabs/menu-tabs-utils";
import { IxModalSize } from "./components/modal/modal.types";
import { BorderlessChangedEvent, Composition, ExpandedChangedEvent, HideOnCollapseChangedEvent, SlotChangedEvent, VariantChangedEvent } from "./components/pane/pane.types";
import { ProgressIndicatorSize } from "./components/progress-indicator/progress-indicator.types";
import { PushCardVariant } from "./components/push-card/push-card.types";
import { SliderMarker } from "./components/slider/slider.types";
import { SplitButtonVariant } from "./components/split-button/split-button.types";
import { TabClickDetail } from "./components/tab-item/tab-item.types";
import { TextareaResizeBehavior } from "./components/input/textarea.types";
import { TimeInputValidityState } from "./components/time-input/time-input.types";
import { TimePickerCorners } from "./components/time-picker/time-picker.types";
import { ToastConfig, ToastType } from "./components/toast/toast-utils";
import { ShowToastResult } from "./components/toast/toast-container.types";
import { ElementReference as ElementReference1 } from "./components.d";
import { Element } from "@stencil/core";
import { TreeContext, TreeItemContext, TreeModel, UpdateCallback } from "./components/tree/tree-model";
import { TextDecoration, TypographyColors, TypographyFormat } from "./components/typography/typography.types";
import { UploadFileState } from "./components/upload/upload-file-state";
export { ActionCardVariant } from "./components/action-card/action-card.types";
export { IxTheme } from "./components/utils/theme-switcher";
export { Breakpoint } from "./components/utils/breakpoints";
export { AppSwitchConfiguration } from "./components/utils/application-layout/context";
export { BlindVariant } from "./components/blind/blind.types";
export { ButtonVariant } from "./components/button/button";
export { CardVariant } from "./components/card/card.types";
export { CardAccordionExpandChangeEvent } from "./components/card-accordion/card-accordion.types";
export { FilterState } from "./components/category-filter/filter-state";
export { LogicalFilterOperator } from "./components/category-filter/logical-filter-operator";
export { InputState } from "./components/category-filter/input-state";
export { ColumnSize } from "./components/col/col.types";
export { ContentHeaderVariant } from "./components/content-header/content-header.types";
export { CssGridTemplateType } from "./components/css-grid/css-grid.types";
export { ButtonVariant as ButtonVariant1 } from "./components/button/button";
export { DateDropdownOption, DateRangeChangeEvent } from "./components/date-dropdown/date-dropdown.types";
export { DateInputValidityState } from "./components/date-input/date-input.types";
export { DateTimeCardCorners } from "./components/date-time-card/date-time-card.types";
export { DateChangeEvent } from "./components/date-picker/date-picker.events";
export { DateTimeDateChangeEvent, DateTimeSelectEvent } from "./components/datetime-picker/datetime-picker.types";
export { ElementReference } from "./components/utils/element-reference";
export { CloseBehavior } from "./components/dropdown/dropdown-controller";
export { AlignedPlacement, Side } from "./components/dropdown/placement";
export { DropdownButtonVariant } from "./components/dropdown-button/dropdown-button.types";
export { EmptyStateLayout } from "./components/empty-state/empty-state.types";
export { MakeRef } from "./components/utils/make-ref";
export { FlipTileState } from "./components/flip-tile/flip-tile-state";
export { IconButtonVariant } from "./components/icon-button/icon-button.types";
export { KeyValueLabelPosition } from "./components/key-value/key-value.types";
export { CustomCloseEvent, CustomLabelChangeEvent } from "./components/utils/menu-tabs/menu-tabs-utils";
export { IxModalSize } from "./components/modal/modal.types";
export { BorderlessChangedEvent, Composition, ExpandedChangedEvent, HideOnCollapseChangedEvent, SlotChangedEvent, VariantChangedEvent } from "./components/pane/pane.types";
export { ProgressIndicatorSize } from "./components/progress-indicator/progress-indicator.types";
export { PushCardVariant } from "./components/push-card/push-card.types";
export { SliderMarker } from "./components/slider/slider.types";
export { SplitButtonVariant } from "./components/split-button/split-button.types";
export { TabClickDetail } from "./components/tab-item/tab-item.types";
export { TextareaResizeBehavior } from "./components/input/textarea.types";
export { TimeInputValidityState } from "./components/time-input/time-input.types";
export { TimePickerCorners } from "./components/time-picker/time-picker.types";
export { ToastConfig, ToastType } from "./components/toast/toast-utils";
export { ShowToastResult } from "./components/toast/toast-container.types";
export { ElementReference as ElementReference1 } from "./components.d";
export { Element } from "@stencil/core";
export { TreeContext, TreeItemContext, TreeModel, UpdateCallback } from "./components/tree/tree-model";
export { TextDecoration, TypographyColors, TypographyFormat } from "./components/typography/typography.types";
export { UploadFileState } from "./components/upload/upload-file-state";
export namespace Components {
    interface IxActionCard {
        /**
          * Card heading
         */
        "heading"?: string;
        /**
          * Card icon
          * @default undefined
         */
        "icon": string | undefined;
        /**
          * Card selection
          * @default false
         */
        "selected": boolean;
        /**
          * Card subheading
         */
        "subheading"?: string;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant": ActionCardVariant;
    }
    interface IxApplication {
        /**
          * Define application switch configuration
         */
        "appSwitchConfig"?: AppSwitchConfiguration;
        /**
          * Supported layouts
          * @default ['sm', 'md', 'lg']
         */
        "breakpoints": Breakpoint[];
        /**
          * Change the responsive layout of the menu structure
         */
        "forceBreakpoint": Breakpoint | undefined;
        /**
          * Application theme
         */
        "theme"?: IxTheme;
        /**
          * Use the system appearance dark or light
          * @default false
         */
        "themeSystemAppearance": boolean;
    }
    interface IxApplicationHeader {
        /**
          * Application name
         */
        "name"?: string;
        /**
          * Controls the visibility of the menu toggle button based on the context of the application header.  When the application header is utilized outside the application frame, the menu toggle button is displayed. Conversely, if the header is within the application frame, this property is ineffective.
          * @default false
         */
        "showMenu"?: boolean;
    }
    interface IxApplicationSidebar {
    }
    interface IxApplicationSwitchModal {
        "config"?: AppSwitchConfiguration;
    }
    interface IxAvatar {
        /**
          * Optional description text that will be displayed underneath the username. Note: Only working if avatar is part of the ix-application-header
         */
        "extra"?: string;
        /**
          * Display an avatar image
         */
        "image"?: string;
        /**
          * Display the initials of the user. Will be overwritten by image
         */
        "initials"?: string;
        /**
          * If set an info card displaying the username will be placed inside the dropdown. Note: Only working if avatar is part of the ix-application-header
         */
        "username"?: string;
    }
    interface IxBasicNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Supported layouts
          * @example ['sm', 'md']
          * @default ['sm', 'md', 'lg']
         */
        "breakpoints": Breakpoint[];
        /**
          * Change the responsive layout of the menu structure
         */
        "forceBreakpoint": Breakpoint | undefined;
        /**
          * Hide application header. Will disable responsive feature of basic navigation.
          * @default false
         */
        "hideHeader": boolean;
    }
    interface IxBlind {
        /**
          * Collapsed state
          * @default false
         */
        "collapsed": boolean;
        /**
          * Optional icon to be displayed next to the header label
         */
        "icon"?: string;
        /**
          * Label of blind
         */
        "label"?: string;
        /**
          * Secondary label inside blind header
         */
        "sublabel"?: string;
        /**
          * Blind variant
          * @default 'filled'
         */
        "variant": BlindVariant;
    }
    interface IxBreadcrumb {
        /**
          * Accessibility label for the dropdown button (ellipsis icon) used to access the dropdown list with conditionally hidden previous items
          * @default 'previous'
         */
        "ariaLabelPreviousButton": string;
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
          * @default true
         */
        "ghost": boolean;
        /**
          * Items will be accessible through a dropdown
          * @default []
         */
        "nextItems": string[];
        /**
          * Excess items will get hidden inside of dropdown
          * @default 9
         */
        "visibleItemCount": number;
    }
    interface IxBreadcrumbItem {
        /**
          * @default true
         */
        "ghost": boolean;
        /**
          * Icon to be displayed next ot the label
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isDropdownTrigger": boolean;
        /**
          * Breadcrumb label
         */
        "label"?: string;
        /**
          * @default true
         */
        "showChevron": boolean;
        /**
          * @default true
         */
        "visible": boolean;
    }
    interface IxButton {
        /**
          * @default 'center'
         */
        "alignment": 'center' | 'start';
        /**
          * Disable the button
          * @default false
         */
        "disabled": boolean;
        /**
          * Provide a form element ID to automatically submit the from if the button is pressed. Only works in combination with type="submit".
          * @since 3.1.0
         */
        "form"?: string;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost": boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * @default '24'
         */
        "iconSize": '12' | '16' | '24';
        /**
          * Loading button
          * @default false
         */
        "loading": boolean;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * Type of the button
          * @default 'button'
         */
        "type": 'button' | 'submit';
        /**
          * Button variant
          * @default 'primary'
         */
        "variant": ButtonVariant;
    }
    interface IxCard {
        /**
          * Show card in selected state
          * @default false
         */
        "selected": boolean;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant": CardVariant;
    }
    interface IxCardAccordion {
        /**
          * Collapse the card
          * @default false
         */
        "collapse": boolean;
    }
    interface IxCardContent {
    }
    interface IxCardList {
        /**
          * Collapse the list
          * @default false
         */
        "collapse": boolean;
        /**
          * Hide the show all button
          * @default false
         */
        "hideShowAll": boolean;
        /**
          * i18n More cards available
          * @default 'There are more cards available'
         */
        "i18nMoreCards": string;
        /**
          * i18n Show all button
          * @default 'Show all'
         */
        "i18nShowAll": string;
        /**
          * Name the card list
         */
        "label"?: string;
        /**
          * List style
          * @default 'stack'
         */
        "listStyle": 'stack' | 'scroll';
        /**
          * Maximal visible cards
          * @default 12
         */
        "maxVisibleCards": number;
        /**
          * Overwrite the default show all count.
         */
        "showAllCount"?: number;
        /**
          * Suppress the overflow handling of child elements
          * @default false
         */
        "suppressOverflowHandling": boolean;
    }
    interface IxCardTitle {
    }
    interface IxCategoryFilter {
        /**
          * Configuration object hash used to populate the dropdown menu for type-ahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories"?: {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * If true the filter will be in disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState"?: FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
          * @default false
         */
        "hideIcon": boolean;
        /**
          * i18n
          * @default 'Filter by text'
         */
        "i18nPlainText": string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon"?: string;
        /**
          * i18n
          * @default 'Categories'
         */
        "labelCategories": string;
        /**
          * In certain use cases some categories may not be available for selection anymore. To allow proper display of set filters with these categories this ID to label mapping can be populated.  Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
          * @default {}
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder"?: string;
        /**
          * If true the filter will be in readonly mode
          * @default false
         */
        "readonly": boolean;
        /**
          * If set to true, allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
          * @default true
         */
        "repeatCategories": boolean;
        /**
          * If set categories will always be filtered via the respective logical operator. Toggling of the operator will not be available to the user.
         */
        "staticOperator"?: LogicalFilterOperator;
        /**
          * A list of strings that will be supplied as type-ahead suggestions not tied to any categories.
         */
        "suggestions"?: string[];
        /**
          * @default true
         */
        "tmpDisableScrollIntoView": boolean;
    }
    /**
     * @form-ready 
     */
    interface IxCheckbox {
        /**
          * Checked state of the checkbox component
          * @default false
         */
        "checked": boolean;
        /**
          * Disabled state of the checkbox component
          * @default false
         */
        "disabled": boolean;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Indeterminate state of the checkbox component
          * @default false
         */
        "indeterminate": boolean;
        "isTouched": () => Promise<boolean>;
        /**
          * Label for the checkbox component
         */
        "label"?: string;
        /**
          * Name of the checkbox component
         */
        "name"?: string;
        /**
          * Required state of the checkbox component.  If true, checkbox needs to be checked to be valid
          * @default false
         */
        "required": boolean;
        /**
          * Value of the checkbox component
          * @default 'on'
         */
        "value": string;
    }
    /**
     * @form-ready 
     */
    interface IxCheckboxGroup {
        /**
          * Alignment of the checkboxes in the group
          * @default 'column'
         */
        "direction": 'row' | 'column';
        "hasValidValue": () => Promise<boolean>;
        /**
          * Optional helper text displayed below the checkbox group
         */
        "helperText"?: string;
        /**
          * Info text for the checkbox group
         */
        "infoText"?: string;
        /**
          * Error text for the checkbox group
         */
        "invalidText"?: string;
        "isTouched": () => Promise<boolean>;
        /**
          * Label for the checkbox group
         */
        "label"?: string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
          * @default false
         */
        "showTextAsTooltip": boolean;
        /**
          * Valid text for the checkbox group
         */
        "validText"?: string;
        /**
          * Warning text for the checkbox group
         */
        "warningText"?: string;
    }
    interface IxChip {
        /**
          * Determines if the chip is interactive. If false no user input (e.g. mouse states, keyboard navigation) will be possible and also the close button will not be present.
          * @default true
         */
        "active": boolean;
        /**
          * Custom background color. Only has an effect on chips with `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Center the content of the chip. Set to false to disable centering.
          * @since 3.2.0
          * @default false
         */
        "centerContent": boolean;
        /**
          * Custom font and icon color. Only has an effect on chips with `variant='custom'`
         */
        "chipColor": string | undefined;
        /**
          * Show close icon
          * @default false
         */
        "closable": boolean;
        /**
          * Show icon
         */
        "icon"?: string;
        /**
          * Show chip with outline style
          * @default false
         */
        "outline": boolean;
        /**
          * Display a tooltip. By default, no tooltip will be displayed. Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.
          * @since 3.0.0
          * @default false
         */
        "tooltipText": string | boolean;
        /**
          * Chip variant
          * @default 'primary'
         */
        "variant": | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxCol {
        /**
          * Size of the column
         */
        "size"?: ColumnSize;
        /**
          * Size of the column for lg screens
         */
        "sizeLg"?: ColumnSize;
        /**
          * Size of the column for md screens
         */
        "sizeMd"?: ColumnSize;
        /**
          * Size of the column for sm screens
         */
        "sizeSm"?: ColumnSize;
    }
    interface IxContent {
    }
    interface IxContentHeader {
        /**
          * Display a back button
          * @default false
         */
        "hasBackButton": boolean;
        /**
          * Subtitle of Header
          * @default undefined
         */
        "headerSubtitle": string | undefined;
        /**
          * Title of Header
         */
        "headerTitle"?: string;
        /**
          * Variant of content header
          * @default 'primary'
         */
        "variant": ContentHeaderVariant;
    }
    interface IxCssGrid {
        /**
          * Define css grid template
         */
        "templates"?: Partial<Record<CssGridTemplateType, string[][]>>;
    }
    interface IxCssGridItem {
        /**
          * Grid item name
         */
        "itemName": string;
    }
    interface IxCustomField {
        /**
          * Show text below the field component which show additional information
         */
        "helperText"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * A value is required or must be checked for the form to be submittable
          * @default false
         */
        "required": boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxDateDropdown {
        /**
          * Controls whether the user is allowed to pick custom date ranges in the component. When set to 'true', the user can select a custom date range using the date picker. When set to 'false', only predefined time date ranges are available for selection.
          * @default true
         */
        "customRangeAllowed": boolean;
        /**
          * Used to set the initial select date range as well as the button name, if not set or no according date range label is found, nothing will be selected
          * @default 'custom'
         */
        "dateRangeId": string;
        /**
          * An array of predefined date range options for the date picker. Each option is an object with a label describing the range and a function that returns the start and end dates of the range as a DateRangeOption object.  Example format:   {     id: 'some unique id',     label: 'Name of the range',     from: undefined, to: '2023/03/29'   },   // ... other predefined date range options ...
          * @default []
         */
        "dateRangeOptions": DateDropdownOption[];
        /**
          * Disable the button that opens the dropdown containing the date picker.
          * @default false
         */
        "disabled": boolean;
        /**
          * Date format string. See
          * @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format": string;
        /**
          * Picker date. If the picker is in range mode this property is the start date. If set to `null` no default start date will be pre-selected.  Format is based on `format`
          * @default ''
         */
        "from": string;
        /**
          * Retrieves the currently selected date range from the component. This method returns the selected date range as a `DateChangeEvent` object.
         */
        "getDateRange": () => Promise<DateRangeChangeEvent>;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost": boolean;
        /**
          * Text for custom dropdown item. Will be used for translation.
          * @default 'Custom...'
         */
        "i18nCustomItem": string;
        /**
          * Text for the done button. Will be used for translation.
          * @default 'Done'
         */
        "i18nDone": string;
        /**
          * Text for the done button. Will be used for translation.
          * @default 'No range set'
         */
        "i18nNoRange": string;
        /**
          * Loading button
          * @default false
         */
        "loading": boolean;
        /**
          * Locale identifier (e.g. 'en' or 'de').
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "maxDate": string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "minDate": string;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * If true a range of dates can be selected.
          * @default true
         */
        "range": boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @default ''
         */
        "to": string;
        /**
          * @default DateTime.now().toISO()
         */
        "today": string;
        /**
          * Button variant
          * @default 'primary'
         */
        "variant": ButtonVariant1;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex": number;
    }
    /**
     * @form-ready 
     */
    interface IxDateInput {
        /**
          * Disabled attribute
          * @default false
         */
        "disabled": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format": string;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Get the native input element
         */
        "getNativeInputElement": () => Promise<HTMLInputElement>;
        "getValidityState": () => Promise<ValidityState>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Helper text below the input field
         */
        "helperText"?: string;
        /**
          * I18n string for the error message when the date is not parsable
          * @default 'Date is not valid'
         */
        "i18nErrorDateUnparsable": string;
        /**
          * Info text below the input field
         */
        "infoText"?: string;
        /**
          * Error text below the input field
         */
        "invalidText"?: string;
        /**
          * Returns whether the text field has been touched.
         */
        "isTouched": () => Promise<boolean>;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Locale identifier (e.g. 'en' or 'de').
         */
        "locale"?: string;
        /**
          * Name of the input element
         */
        "name"?: string;
        /**
          * Placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Readonly attribute
          * @default false
         */
        "readonly": boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * Show text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * Valid text below the input field
         */
        "validText"?: string;
        /**
          * Value of the input element
          * @default ''
         */
        "value"?: string;
        /**
          * Warning text below the input field
         */
        "warningText"?: string;
    }
    interface IxDatePicker {
        /**
          * Corner style
          * @default 'rounded'
         */
        "corners": DateTimeCardCorners;
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format": string;
        /**
          * The selected starting date. If the date-picker-rework is not in range mode this is the selected date. Format has to match the `format` property.
         */
        "from": string | undefined;
        /**
          * Get the currently selected date or range. The object returned contains `from` and `to` properties. The property strings are formatted according to the `format` property and not affected by the `locale` property. The locale applied is always `en-US`.
         */
        "getCurrentDate": () => Promise<{ from: string | undefined; to: string | undefined; }>;
        /**
          * Text of date select button
          * @default 'Done'
         */
        "i18nDone": string;
        /**
          * Locale identifier (e.g. 'en' or 'de'). The locale is used to translate the labels for weekdays and months. When the locale changes, the weekday labels are rotated according to the `weekStartIndex`. It does not affect the values returned by methods and events.
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "maxDate": string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "minDate": string;
        /**
          * If true a date-range can be selected (from/to).
          * @default true
         */
        "range": boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * @default true
         */
        "standaloneAppearance": boolean;
        /**
          * The selected end date. If the the date-picker-rework is not in range mode this property has no impact. Format has to match the `format` property.
         */
        "to": string | undefined;
        /**
          * @default DateTime.now().toISO()
         */
        "today": string;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex": number;
    }
    interface IxDateTimeCard {
        /**
          * Set corners style
          * @default 'rounded'
         */
        "corners": DateTimeCardCorners;
        /**
          * Display footer
          * @default false
         */
        "hasFooter": boolean;
        /**
          * Hide header
          * @default false
         */
        "hideHeader": boolean;
        /**
          * set styles
          * @default true
         */
        "individual": boolean;
        "standaloneAppearance"?: boolean;
        /**
          * Timepicker specific styling
          * @default false
         */
        "timePickerAppearance": boolean;
    }
    interface IxDatetimePicker {
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "dateFormat": string;
        /**
          * The selected starting date. If the picker is not in range mode this is the selected date. Format has to match the `format` property.
         */
        "from"?: string;
        /**
          * Text of date select button
          * @default 'Done'
         */
        "i18nDone": string;
        /**
          * Top label of time picker
          * @since 3.0.0
          * @default 'Time'
         */
        "i18nTime": string;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
         */
        "minDate"?: string;
        /**
          * If true a date-range can be selected (from/to).
          * @default true
         */
        "range": boolean;
        /**
          * Show hour input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showHour": boolean;
        /**
          * Show minutes input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showMinutes": boolean;
        /**
          * Show seconds input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showSeconds": boolean;
        /**
          * Show time reference input Time reference is default aligned with
          * @see { this.timeFormat}
          * @default false
         */
        "showTimeReference": boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * Select time with format string
         */
        "time"?: string;
        /**
          * Time format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'HH:mm:ss'
         */
        "timeFormat": string;
        /**
          * Set time reference
         */
        "timeReference"?: 'AM' | 'PM';
        /**
          * The selected end date. If the the picker is not in range mode this property has no impact. Format has to match the `format` property.
         */
        "to"?: string;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex": number;
    }
    interface IxDivider {
    }
    interface IxDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
          * @default true
         */
        "closeOnClickOutside": boolean;
        /**
          * Render the drawer with maximum height
          * @default false
         */
        "fullHeight": boolean;
        /**
          * Max width interpreted as REM
          * @default 28
         */
        "maxWidth": number;
        /**
          * Min width interpreted as REM
          * @default 16
         */
        "minWidth": number;
        /**
          * Show or hide the drawer
          * @default false
         */
        "show": boolean;
        /**
          * Toggle or define show state of drawer
          * @param show Overwrite toggle state with boolean
         */
        "toggleDrawer": (show?: boolean) => Promise<void>;
        /**
          * Width interpreted as REM if not set to 'auto'
          * @default this.minWidth
         */
        "width": number | 'auto';
    }
    interface IxDropdown {
        /**
          * Define an anchor element
         */
        "anchor"?: ElementReference;
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown. If the dropdown is a child of another one, it will be closed with the parent, regardless of its own close behavior.
          * @default 'both'
         */
        "closeBehavior": CloseBehavior;
        /**
          * @default false
         */
        "discoverAllSubmenus": boolean;
        "discoverSubmenu": () => Promise<void>;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * @default false
         */
        "ignoreRelatedSubmenu": boolean;
        /**
          * Move dropdown along main axis of alignment
         */
        "offset"?: {
    mainAxis?: number;
    crossAxis?: number;
    alignmentAxis?: number;
  };
        "overwriteDropdownStyle"?: (delegate: {
    dropdownRef: HTMLElement;
    triggerRef?: HTMLElement;
  }) => Promise<Partial<CSSStyleDeclaration>>;
        /**
          * Placement of the dropdown
          * @default 'bottom-start'
         */
        "placement": AlignedPlacement;
        /**
          * Position strategy
          * @default 'fixed'
         */
        "positioningStrategy": 'absolute' | 'fixed';
        /**
          * Show dropdown
          * @default false
         */
        "show": boolean;
        /**
          * Suppress the automatic placement of the dropdown.
          * @default false
         */
        "suppressAutomaticPlacement": boolean;
        /**
          * @default false
         */
        "suppressOverflowBehavior": boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interpreted as id attribute or a DOM element.
         */
        "trigger"?: ElementReference;
        /**
          * Update position of dropdown
         */
        "updatePosition": () => Promise<void>;
    }
    interface IxDropdownButton {
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown.
          * @default 'both'
         */
        "closeBehavior": 'inside' | 'outside' | 'both' | boolean;
        /**
          * Disable button
          * @default false
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Set label
         */
        "label"?: string;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * Placement of the dropdown
         */
        "placement"?: AlignedPlacement;
        /**
          * Button variant
          * @default 'primary'
         */
        "variant": DropdownButtonVariant;
    }
    interface IxDropdownHeader {
        /**
          * Display name of the header
         */
        "label"?: string;
    }
    interface IxDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
          * @default false
         */
        "checked": boolean;
        /**
          * Disable item and remove event listeners
          * @default false
         */
        "disabled": boolean;
        "emitItemClick": () => Promise<void>;
        "getDropdownItemElement": () => Promise<HTMLIxDropdownItemElement>;
        /**
          * Display hover state
          * @default false
         */
        "hover": boolean;
        /**
          * Icon of dropdown item
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isSubMenu": boolean;
        /**
          * Label of dropdown item
         */
        "label"?: string;
        /**
          * @default false
         */
        "suppressChecked": boolean;
    }
    interface IxDropdownQuickActions {
    }
    interface IxEmptyState {
        /**
          * Optional empty state action
         */
        "action"?: string;
        /**
          * Empty state header
         */
        "header": string;
        /**
          * Optional empty state icon
         */
        "icon"?: string;
        /**
          * Optional empty state layout - one of 'large', 'compact' or 'compactBreak'
          * @default 'large'
         */
        "layout": EmptyStateLayout;
        /**
          * Optional empty state sub header
         */
        "subHeader"?: string;
    }
    interface IxEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
          * @default true
         */
        "animated": boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
          * @default false
         */
        "chevron": boolean;
        /**
          * Make event-list items more compact
          * @default false
         */
        "compact": boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
          * @default 'S'
         */
        "itemHeight": 'S' | 'L' | number;
    }
    interface IxEventListItem {
        /**
          * Show chevron on right side of the event list item
          * @default false
         */
        "chevron": boolean;
        /**
          * Disable event list item
          * @default false
         */
        "disabled": boolean;
        /**
          * Color of the status indicator. You can find a list of all available colors in our documentation. Example values are `--theme-color-alarm` or `color-alarm`
          * @link https://ix.siemens.io/docs/theming/colors/
         */
        "itemColor"?: string;
        /**
          * Show event list item as selected
          * @default false
         */
        "selected": boolean;
    }
    interface IxExpandingSearch {
        /**
          * If true the search field will fill all available horizontal space of it's parent container when expanded.
          * @default false
         */
        "fullWidth": boolean;
        /**
          * Button with no background or outline
          * @default true
         */
        "ghost": boolean;
        /**
          * Search icon
         */
        "icon"?: string;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * Placeholder text
          * @default 'Enter text here'
         */
        "placeholder": string;
        /**
          * Default value
          * @default ''
         */
        "value": string;
        /**
          * button variant
          * @default 'primary'
         */
        "variant": ButtonVariant1;
    }
    interface IxFieldLabel {
        "controlRef"?: | MakeRef<HTMLElement>
    | MakeRef<HTMLInputElement>
    | MakeRef<HTMLTextAreaElement>;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlFor"?: string;
        /**
          * @default false
         */
        "isInvalid": boolean;
        /**
          * A value is required or must be checked for the form to be submittable
         */
        "required"?: boolean;
    }
    interface IxFieldWrapper {
        /**
          * The control element that the label is associated with
         */
        "controlRef"?: | MakeRef<HTMLElement>
    | MakeRef<HTMLInputElement>
    | MakeRef<HTMLTextAreaElement>;
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlForLabel"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Is the field component info
          * @default false
         */
        "isInfo": boolean;
        /**
          * Is the field component invalid
          * @default false
         */
        "isInvalid": boolean;
        /**
          * Is the field component valid
          * @default false
         */
        "isValid": boolean;
        /**
          * Is the field component warning
          * @default false
         */
        "isWarning": boolean;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * Show label as required
          * @default false
         */
        "required": boolean;
        /**
          * Show helper, error, info, warning text as tooltip
          * @default false
         */
        "showTextAsTooltip": boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxFilterChip {
        /**
          * If true the filter chip will be in disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * If true the filter chip will be in readonly mode
          * @default false
         */
        "readonly": boolean;
    }
    interface IxFlipTile {
        /**
          * Height interpreted as REM
          * @default 15.125
         */
        "height": number | 'auto';
        /**
          * Index of the currently visible content
          * @since 3.0.0
          * @default 0
         */
        "index": number;
        /**
          * Variation of the Flip
         */
        "state"?: FlipTileState;
        /**
          * Width interpreted as REM
          * @default 16
         */
        "width": number | 'auto';
    }
    interface IxFlipTileContent {
        /**
          * Controls the visibility of the content
          * @default false
         */
        "contentVisible": boolean;
    }
    interface IxGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
          * @default true
         */
        "collapsed": boolean;
        /**
          * Expand the group if the header is clicked
          * @default false
         */
        "expandOnHeaderClick": boolean;
        /**
          * Group header
         */
        "header"?: string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index"?: number;
        /**
          * Whether the group is selected.
          * @default false
         */
        "selected": boolean;
        /**
          * Group header subtitle
         */
        "subHeader"?: string;
        /**
          * Prevent header from being selectable
          * @default false
         */
        "suppressHeaderSelection": boolean;
    }
    interface IxGroupContextMenu {
    }
    interface IxGroupItem {
        /**
          * The elements tabindex attribute will get set accordingly. If true tabindex will be 0, -1 otherwise.
          * @default true
         */
        "focusable": boolean;
        /**
          * Group item icon
         */
        "icon"?: string;
        /**
          * Index
         */
        "index"?: number;
        /**
          * Group item secondary text
         */
        "secondaryText"?: string;
        /**
          * Show selected state
          * @default false
         */
        "selected": boolean;
        /**
          * Supress the selection of the group
          * @default false
         */
        "suppressSelection": boolean;
        /**
          * Group item text
         */
        "text"?: string;
    }
    interface IxHelperText {
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlFor"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxIconButton {
        /**
          * Accessibility label for the icon button Will be set as aria-label on the nested HTML button element
         */
        "a11yLabel"?: string;
        /**
          * Disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Button invisible
          * @default false
         */
        "ghost": boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Color of icon in  button
         */
        "iconColor"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading": boolean;
        /**
          * Button outline
          * @default false
         */
        "outline": boolean;
        /**
          * Button in oval shape
          * @default false
         */
        "oval": boolean;
        /**
          * Size of icon in button
          * @default '24'
         */
        "size": '24' | '16' | '12';
        /**
          * Type of the button
          * @default 'button'
         */
        "type": 'button' | 'submit';
        /**
          * Variant of button
          * @default 'secondary'
         */
        "variant": IconButtonVariant;
    }
    interface IxIconToggleButton {
        /**
          * Disable the button
          * @default false
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost": boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading": boolean;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * Button in oval shape
          * @since 3.1.0
          * @default false
         */
        "oval": boolean;
        /**
          * Show button as pressed
          * @default false
         */
        "pressed": boolean;
        /**
          * Size of icon in button
          * @default '24'
         */
        "size": '24' | '16' | '12';
        /**
          * Button variant.
          * @default 'secondary'
         */
        "variant": ButtonVariant1;
    }
    /**
     * @form-ready 
     */
    interface IxInput {
        /**
          * The allowed characters pattern for the text field.
         */
        "allowedCharactersPattern"?: string;
        /**
          * Specifies whether the text field is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Returns the native input element used in the text field.
         */
        "getNativeInputElement": () => Promise<HTMLInputElement>;
        /**
          * Returns the validity state of the input field.
         */
        "getValidityState": () => Promise<ValidityState>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * The helper text for the text field.
         */
        "helperText"?: string;
        /**
          * The info text for the text field.
         */
        "infoText"?: string;
        /**
          * The error text for the text field.
         */
        "invalidText"?: string;
        /**
          * Returns whether the text field has been touched.
         */
        "isTouched": () => Promise<boolean>;
        /**
          * The label for the text field.
         */
        "label"?: string;
        /**
          * The maximum length of the text field.
         */
        "maxLength"?: number;
        /**
          * The minimum length of the text field.
         */
        "minLength"?: number;
        /**
          * The name of the text field.
         */
        "name"?: string;
        /**
          * The pattern for the text field.
         */
        "pattern"?: string;
        /**
          * The placeholder text for the text field.
         */
        "placeholder"?: string;
        /**
          * Specifies whether the text field is readonly.
          * @default false
         */
        "readonly": boolean;
        /**
          * Specifies whether the text field is required.
          * @default false
         */
        "required": boolean;
        /**
          * Specifies whether to show the text as a tooltip.
         */
        "showTextAsTooltip"?: boolean;
        /**
          * The type of the text field. Possible values are 'text', 'email', or 'password'.
          * @default 'text'
         */
        "type": 'text' | 'email' | 'password' | 'tel' | 'url';
        /**
          * The valid text for the text field.
         */
        "validText"?: string;
        /**
          * The value of the text field.
          * @default ''
         */
        "value": string;
        /**
          * The warning text for the text field.
         */
        "warningText"?: string;
    }
    /**
     * @deprecated Will be removed with 4.0.0
     * Use the 'ix-input' component instead
     */
    interface IxInputGroup {
    }
    interface IxKeyValue {
        /**
          * Optional key value icon
         */
        "icon"?: string;
        /**
          * Key value label
         */
        "label": string;
        /**
          * Optional key value label position - 'top' or 'left'
          * @default 'top'
         */
        "labelPosition": KeyValueLabelPosition;
        /**
          * Optional key value text value
         */
        "value"?: string;
    }
    interface IxKeyValueList {
        /**
          * Optional striped key value list style
          * @default false
         */
        "striped": boolean;
    }
    interface IxKpi {
        "label"?: string;
        /**
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * @default 'neutral'
         */
        "state": 'neutral' | 'warning' | 'alarm';
        "unit"?: string;
        "value"?: string | number;
    }
    interface IxLayoutAuto {
        /**
          * Defines the layout of the form.
          * @default [     { minWidth: '0', columns: 1 },     { minWidth: '48em', columns: 2 },   ]
         */
        "layout": {
    minWidth: string;
    columns: number;
  }[];
    }
    interface IxLayoutGrid {
        /**
          * Overwrite the default number of columns. Choose between 2 and 12 columns.
          * @default 12
         */
        "columns": number;
        /**
          * Grid gap
          * @default '24'
         */
        "gap": '8' | '12' | '16' | '24';
        /**
          * The grid will not have any horizontal padding
          * @default false
         */
        "noMargin": boolean;
    }
    interface IxLinkButton {
        /**
          * Disable the link button
          * @default false
         */
        "disabled": boolean;
        /**
          * Specifies where to open the link  https://www.w3schools.com/html/html_links.asp
          * @default '_self'
         */
        "target": '_self' | '_blank' | '_parent' | '_top';
        /**
          * Url for the link button
         */
        "url"?: string;
    }
    interface IxMapNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Close current shown overlay
          * @deprecated Will be removed in 2.0.0. Use slot based approach
         */
        "closeOverlay": () => Promise<void>;
        /**
          * Hide the sidebar context menu button when set to true
          * @default true
         */
        "hideContextMenu": boolean;
        /**
          * Navigation title
         */
        "navigationTitle"?: string;
        /**
          * Open a overlay inside content area
          * @deprecated Will be removed in 2.0.0. Use slot based approach
          * @param name
          * @param component
          * @param icon
          * @param color
         */
        "openOverlay": (name: string, component: HTMLElement, icon?: string, color?: string) => Promise<void>;
        /**
          * Change the visibility of the sidebar
          * @param show new visibility state
         */
        "toggleSidebar": (show?: boolean) => Promise<void>;
    }
    interface IxMapNavigationOverlay {
        /**
          * Color of icon
          * @deprecated since 2.1.0. Use `icon-color`
         */
        "color"?: string;
        /**
          * Icon of overlay
         */
        "icon"?: string;
        /**
          * Color of icon
         */
        "iconColor"?: string;
        /**
          * Title of overlay
         */
        "name"?: string;
    }
    interface IxMenu {
        /**
          * Should only be set if you use ix-menu standalone
          * @default ''
         */
        "applicationDescription": string;
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationName"?: string;
        /**
          * @default false
         */
        "enableMapExpand": boolean;
        /**
          * Is settings tab is visible
          * @default true
         */
        "enableSettings": boolean;
        /**
          * Show toggle between light and dark variant. Only if the provided theme have implemented both!
          * @default false
         */
        "enableToggleTheme": boolean;
        /**
          * Toggle the expand state of the menu
          * @default false
         */
        "expand": boolean;
        /**
          * @default 'Collapse'
         */
        "i18nCollapse": string;
        /**
          * @default ' Expand'
         */
        "i18nExpand": string;
        /**
          * Accessibility i18n label for the burger menu of the sidebar
          * @default 'Expand sidebar'
         */
        "i18nExpandSidebar": string;
        /**
          * @default 'About & legal information'
         */
        "i18nLegal": string;
        /**
          * @default 'Settings'
         */
        "i18nSettings": string;
        /**
          * @default 'Toggle theme'
         */
        "i18nToggleTheme": string;
        /**
          * Menu stays pinned to the left
          * @default false
         */
        "pinned": boolean;
        /**
          * Is about tab visible
          * @default false
         */
        "showAbout": boolean;
        /**
          * Is settings tab visible
          * @default false
         */
        "showSettings": boolean;
        /**
          * If set the menu will be expanded initially. This will only take effect at the breakpoint 'lg'.
          * @default false
         */
        "startExpanded": boolean;
        /**
          * Toggle About tabs
          * @param show
         */
        "toggleAbout": (show: boolean) => Promise<void>;
        /**
          * Toggle map sidebar expand
          * @param show
         */
        "toggleMapExpand": (show?: boolean) => Promise<void>;
        /**
          * Toggle menu
          * @param show
         */
        "toggleMenu": (show?: boolean) => Promise<void>;
        /**
          * Toggle Settings tabs
          * @param show
         */
        "toggleSettings": (show: boolean) => Promise<void>;
    }
    interface IxMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Content of the header
          * @default 'About & legal information'
         */
        "label": string;
        /**
          * @default false
         */
        "show": boolean;
    }
    interface IxMenuAboutItem {
        /**
          * About Item label
         */
        "label"?: string;
    }
    interface IxMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel"?: string;
        /**
          * @default false
         */
        "expanded": boolean;
        /**
          * @default 'Show more'
         */
        "i18nShowMore": string;
        /**
          * Title of the about news
         */
        "label"?: string;
        /**
          * Bottom offset
          * @default 0
         */
        "offsetBottom": number;
        /**
          * Show about news
          * @default false
         */
        "show": boolean;
    }
    interface IxMenuAvatar {
        /**
          * Second line of text
         */
        "bottom"?: string;
        /**
          * Use for translation
          * @default 'Logout'
         */
        "i18nLogout": string;
        /**
          * Display a avatar image
         */
        "image"?: string;
        /**
          * Display the initials of the user. Will be overwritten by image
         */
        "initials"?: string;
        /**
          * Control the visibility of the logout button
          * @default true
         */
        "showLogoutButton": boolean;
        /**
          * First line of text
         */
        "top"?: string;
    }
    interface IxMenuAvatarItem {
        "getDropdownItemElement": () => Promise<HTMLIxDropdownItemElement>;
        /**
          * Avatar dropdown icon
         */
        "icon"?: string;
        /**
          * Avatar dropdown label
         */
        "label"?: string;
    }
    interface IxMenuCategory {
        /**
          * Icon of the category
         */
        "icon"?: string;
        /**
          * Display name of the category
         */
        "label"?: string;
        /**
          * Show notification count on the category
         */
        "notifications"?: number;
    }
    interface IxMenuExpandIcon {
        /**
          * Controls which icon is displayed
         */
        "breakpoint"?: Breakpoint;
        /**
          * Whether the menu expand icon displays the expanded state or not
          * @default false
         */
        "expanded": boolean;
        /**
          * Accessibility label for the menu expand icon (MANDATORY)
          * @default 'Expand'
         */
        "ixAriaLabel": string;
        /**
          * Display as pinned
          * @default false
         */
        "pinned": boolean;
    }
    interface IxMenuItem {
        /**
          * State to display active
          * @default false
         */
        "active": boolean;
        /**
          * Caution: this is no longer working. Please use slot="bottom" instead.  Place tab on bottom
          * @default false
         */
        "bottom": boolean;
        /**
          * Disable tab and remove event handlers
          * @default false
         */
        "disabled": boolean;
        /**
          * Move the Tab to a top position.
          * @default false
         */
        "home": boolean;
        /**
          * Name of the icon you want to display. Icon names can be resolved from the documentation
          * @link https://ix.siemens.io/docs/icon-library/icons
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isCategory": boolean;
        /**
          * Label of the menu item. Will also be used as tooltip text
         */
        "label"?: string;
        /**
          * Show notification count on tab
         */
        "notifications"?: number;
    }
    interface IxMenuSettings {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Label of first tab
          * @default 'Settings'
         */
        "label": string;
        /**
          * @default false
         */
        "show": boolean;
    }
    interface IxMenuSettingsItem {
        /**
          * Settings Item label
         */
        "label"?: string;
    }
    interface IxMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
          * @default true
         */
        "dismissible": boolean;
        /**
          * Specifies the type of the alert.
          * @deprecated Type `danger` will be removed in 4.0. Use `alarm` instead.
          * @default 'info'
         */
        "type": | 'alarm'
    | 'danger'
    | 'critical'
    | 'warning'
    | 'success'
    | 'info'
    | 'neutral'
    | 'primary';
    }
    interface IxModal {
        /**
          * Should the modal be animated
          * @default true
         */
        "animation": boolean;
        /**
          * Show a backdrop behind the modal dialog
          * @default true
         */
        "backdrop": boolean;
        /**
          * Is called before the modal is dismissed.  - Return `true` to proceed in dismissing the modal - Return `false` to abort in dismissing the modal
         */
        "beforeDismiss"?: (reason?: any) => boolean | Promise<boolean>;
        /**
          * Centered modal
          * @default false
         */
        "centered": boolean;
        /**
          * Close the dialog
         */
        "closeModal": <T = any>(reason: T) => Promise<void>;
        /**
          * Dismiss modal on backdrop click
          * @default false
         */
        "closeOnBackdropClick": boolean;
        /**
          * If set to true the modal can be closed by pressing the Escape key
          * @default true
         */
        "closeOnEscape": boolean;
        /**
          * Dismiss the dialog
         */
        "dismissModal": <T = any>(reason?: T) => Promise<void>;
        /**
          * Show the dialog
         */
        "showModal": () => Promise<void>;
        /**
          * Modal size
          * @default '360'
         */
        "size": IxModalSize;
    }
    interface IxModalContent {
    }
    interface IxModalFooter {
    }
    interface IxModalHeader {
        /**
          * Hide the close button
          * @default false
         */
        "hideClose": boolean;
        /**
          * Icon of the Header
         */
        "icon"?: string;
        /**
          * Icon color
         */
        "iconColor"?: string;
    }
    interface IxModalLoading {
    }
    /**
     * @form-ready 
     */
    interface IxNumberInput {
        /**
          * The allowed characters pattern for the input field
         */
        "allowedCharactersPattern"?: string;
        /**
          * Disables the input field
          * @default false
         */
        "disabled": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Returns the native input element used under the hood
         */
        "getNativeInputElement": () => Promise<HTMLInputElement>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * The helper text for the input field
         */
        "helperText"?: string;
        /**
          * The info text for the input field
         */
        "infoText"?: string;
        /**
          * The error text for the input field
         */
        "invalidText"?: string;
        /**
          * Returns true if the input field has been touched
         */
        "isTouched": () => Promise<boolean>;
        /**
          * The label for the input field
         */
        "label"?: string;
        /**
          * The maximum value for the input field
         */
        "max"?: string | number;
        /**
          * The minimum value for the input field
         */
        "min"?: string | number;
        /**
          * name of the input element
         */
        "name"?: string;
        /**
          * The pattern for the input field
         */
        "pattern"?: string;
        /**
          * placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Indicates if the field is read-only
          * @default false
         */
        "readonly": boolean;
        /**
          * Indicates if the field is required
          * @default false
         */
        "required": boolean;
        /**
          * Indicates if the stepper buttons should be shown
         */
        "showStepperButtons"?: boolean;
        /**
          * Indicates if the text should be shown as a tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Step value to increment or decrement the input value
          * @since 3.0.0
         */
        "step"?: string | number;
        /**
          * The valid text for the input field
         */
        "validText"?: string;
        /**
          * The value of the input field
          * @default 0
         */
        "value": number;
        /**
          * The warning text for the input field
         */
        "warningText"?: string;
    }
    interface IxPagination {
        /**
          * Advanced mode
          * @default false
         */
        "advanced": boolean;
        /**
          * Total number of pages
          * @default 0
         */
        "count": number;
        /**
          * /**   i18n
          * @default 'Items'
         */
        "i18nItems": string;
        /**
          * i18n
          * @default 'of'
         */
        "i18nOf": string;
        /**
          * i18n
          * @default 'Page'
         */
        "i18nPage": string;
        /**
          * Number of items shown at once. Can only be changed in advaced mode.
          * @default 15
         */
        "itemCount": number;
        /**
          * Zero based index of currently selected page
          * @default 0
         */
        "selectedPage": number;
        /**
          * Show item count in advanced mode
          * @default true
         */
        "showItemCount": boolean;
    }
    interface IxPane {
        /**
          * Toggle the border of the pane. Defaults to the borderless attribute of the pane layout. If used standalone it defaults to false.
          * @default false
         */
        "borderless": boolean;
        /**
          * Defines the position of the pane inside it's container. Inside a pane layout this property will automatically be set to the name of slot the pane is assigned to.
          * @default 'top'
         */
        "composition": Composition;
        /**
          * State of the pane
          * @default false
         */
        "expanded": boolean;
        /**
          * Title of the side panel
         */
        "heading"?: string;
        /**
          * Define if the pane should have a collapsed state
          * @default false
         */
        "hideOnCollapse": boolean;
        /**
          * Name of the icon
         */
        "icon"?: string;
        /**
          * @default false
         */
        "ignoreLayoutSettings": boolean;
        /**
          * @default false
         */
        "isMobile": boolean;
        /**
          * The maximum size of the sidebar, when it is expanded
          * @default '240px'
         */
        "size": | '240px'
    | '320px'
    | '360px'
    | '480px'
    | '600px'
    | '33%'
    | '50%';
        /**
          * Variant of the side pane. Defaults to the variant attribute of the pane layout. If used standalone it defaults to inline.
          * @default 'inline'
         */
        "variant": 'floating' | 'inline';
    }
    interface IxPaneLayout {
        /**
          * Set the default border state for all panes in the layout
          * @default false
         */
        "borderless": boolean;
        /**
          * Choose the layout of the panes. When set to 'full-vertical' the vertical panes (left, right) will get the full height. When set to 'full-horizontal' the horizontal panes (top, bottom) will get the full width.
          * @default 'full-vertical'
         */
        "layout": 'full-vertical' | 'full-horizontal';
        /**
          * Set the default variant for all panes in the layout
          * @default 'inline'
         */
        "variant": 'floating' | 'inline';
    }
    interface IxPill {
        /**
          * Align pill content left
          * @default false
         */
        "alignLeft": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Show icon
         */
        "icon"?: string;
        /**
          * Show pill as outline
          * @default false
         */
        "outline": boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "pillColor": string | undefined;
        /**
          * Display a tooltip. By default, no tooltip will be displayed. Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.
          * @since 3.0.0
          * @default false
         */
        "tooltipText": string | boolean;
        /**
          * Pill variant
          * @default 'primary'
         */
        "variant": | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    /**
     * @since 3.2.0
     */
    interface IxProgressIndicator {
        /**
          * The helper text for the progress indicator.
         */
        "helperText"?: string;
        /**
          * The label for the progress indicator.
         */
        "label"?: string;
        /**
          * The maximum value of the progress indicator.
          * @default 100
         */
        "max": number;
        /**
          * The minimum value of the progress indicator.
          * @default 0
         */
        "min": number;
        /**
          * Show the helper text as a tooltip
          * @default false
         */
        "showTextAsTooltip": boolean;
        /**
          * The size of the progress indicator.
          * @default 'md'
         */
        "size": ProgressIndicatorSize;
        /**
          * The state of the progress indicator. This is used to indicate the current state of the progress indicator.
          * @default 'default'
         */
        "status": | 'default'
    | 'success'
    | 'error'
    | 'info'
    | 'warning'
    | 'paused';
        /**
          * The text alignment for the helper text. Can be 'left', 'center', or 'right'.
          * @default 'left'
         */
        "textAlignment": 'left' | 'center' | 'right';
        /**
          * The type of progress indicator to use.
          * @default 'linear'
         */
        "type": 'linear' | 'circular';
        /**
          * The value of the progress indicator.
          * @default 0
         */
        "value": number;
    }
    interface IxPushCard {
        /**
          * Collapse the card
          * @default true
         */
        "collapse": boolean;
        /**
          * Card heading
         */
        "heading"?: string;
        /**
          * Card icon
         */
        "icon"?: string;
        /**
          * Card KPI value
         */
        "notification"?: string;
        /**
          * Card subheading
         */
        "subheading"?: string;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant": PushCardVariant;
    }
    /**
     * @form-ready 
     */
    interface IxRadio {
        /**
          * Checked state of the radio component
          * @default false
         */
        "checked": boolean;
        /**
          * Disabled state of the radio component
          * @default false
         */
        "disabled": boolean;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Label for the radio component
         */
        "label"?: string;
        /**
          * Name of the radio component
         */
        "name"?: string;
        /**
          * Requires the radio component and its group to be checked for the form to be submittable
          * @since 3.0.0
          * @default false
         */
        "required": boolean;
        /**
          * Value of the radio component
         */
        "value"?: string;
    }
    /**
     * @form-ready 
     */
    interface IxRadioGroup {
        /**
          * Alignment of the radio buttons in the group
          * @default 'column'
         */
        "direction": 'column' | 'row';
        "hasValidValue": () => Promise<boolean>;
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        "isTouched": () => Promise<boolean>;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * Required state of the checkbox component
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Value of the radiobutton group component
         */
        "value"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxRow {
    }
    /**
     * @form-ready 
     */
    interface IxSelect {
        /**
          * Show clear button
          * @default false
         */
        "allowClear": boolean;
        /**
          * If true the select will be in disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * The maximum width of the dropdown element with value and unit (e.g. "200px" or "12.5rem"). By default the maximum width of the dropdown element is set to 100%.
         */
        "dropdownMaxWidth"?: string;
        /**
          * The width of the dropdown element with value and unit (e.g. "200px" or "12.5rem").
         */
        "dropdownWidth"?: string;
        /**
          * Select is extendable
          * @default false
         */
        "editable": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Returns the native input element used in the component.
         */
        "getNativeInputElement": () => Promise<HTMLInputElement>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Helper text for the select component
         */
        "helperText"?: string;
        /**
          * Hide list header
          * @default false
         */
        "hideListHeader": boolean;
        /**
          * Information inside of dropdown if no items where found with current filter text
          * @default 'No matches'
         */
        "i18nNoMatches": string;
        /**
          * Input field placeholder
          * @default 'Select an option'
         */
        "i18nPlaceholder": string;
        /**
          * Input field placeholder for editable select
          * @default 'Type of select option'
         */
        "i18nPlaceholderEditable": string;
        /**
          * Select list header
          * @default 'Select an option'
         */
        "i18nSelectListHeader": string;
        /**
          * Info text for the select component
         */
        "infoText"?: string;
        /**
          * Error text for the select component
         */
        "invalidText"?: string;
        /**
          * Check if the input field has been touched.
         */
        "isTouched": () => Promise<boolean>;
        /**
          * Label for the select component
         */
        "label"?: string;
        /**
          * Selection mode
          * @default 'single'
         */
        "mode": 'single' | 'multiple';
        /**
          * A string that represents the element's name attribute, containing a name that identifies the element when submitting the form.
         */
        "name"?: string;
        /**
          * If true the select will be in readonly mode
          * @default false
         */
        "readonly": boolean;
        /**
          * A Boolean attribute indicating that an option with a non-empty string value must be selected
          * @default false
         */
        "required": boolean;
        /**
          * Show helper, error, info, warning text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the select component
         */
        "validText"?: string;
        /**
          * Current selected value. This corresponds to the value property of ix-select-items
          * @default []
         */
        "value": string | string[];
        /**
          * Warning text for the select component
         */
        "warningText"?: string;
    }
    interface IxSelectItem {
        "getDropdownItemElement": () => Promise<HTMLIxDropdownItemElement>;
        /**
          * @default false
         */
        "hover": boolean;
        /**
          * Displayed name of the item
         */
        "label"?: string;
        /**
          * @param event
         */
        "onItemClick": (event?: CustomEvent<HTMLIxDropdownItemElement>) => Promise<void>;
        /**
          * Flag indicating whether the item is selected
          * @default false
         */
        "selected": boolean;
        /**
          * The value of the item. Important: The select component uses string values to handle selection and will call toString() on this value. Therefor a string should be passed to value to prevent unexpected behavior.
         */
        "value": string;
    }
    interface IxSlider {
        /**
          * Show control as disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Show error state and message
         */
        "error"?: boolean | string;
        /**
          * Define tick marker on the slider. Marker has to be within slider min/max
         */
        "marker"?: SliderMarker;
        /**
          * Maximum slider value
          * @default 100
         */
        "max": number;
        /**
          * Minimum slider value
          * @default 0
         */
        "min": number;
        /**
          * Legal number intervals
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range#step
          * @default 1
         */
        "step": number;
        /**
          * Show a trace line
          * @default false
         */
        "trace": boolean;
        /**
          * Define the start point of the trace line
          * @default 0
         */
        "traceReference": number;
        /**
          * Current value of the slider
          * @default 0
         */
        "value": number;
    }
    interface IxSpinner {
        /**
          * @default false
         */
        "hideTrack": boolean;
        /**
          * Size of spinner
          * @default 'medium'
         */
        "size": 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';
        /**
          * Variant of spinner
          * @default 'secondary'
         */
        "variant": 'primary' | 'secondary';
    }
    interface IxSplitButton {
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown.
          * @default 'both'
         */
        "closeBehavior": CloseBehavior;
        /**
          * Disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Button invisible
          * @default false
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button label
         */
        "label"?: string;
        /**
          * Button outline variant
          * @default false
         */
        "outline": boolean;
        /**
          * Placement of the dropdown
          * @default 'bottom-start'
         */
        "placement": AlignedPlacement;
        /**
          * Icon of the button on the right
         */
        "splitIcon"?: string;
        /**
          * Color variant of button
          * @default 'primary'
         */
        "variant": SplitButtonVariant;
    }
    interface IxTabItem {
        /**
          * Set counter value
         */
        "counter"?: number;
        /**
          * Set disabled tab
          * @default false
         */
        "disabled": boolean;
        /**
          * Set icon only tab
          * @default false
         */
        "icon": boolean;
        /**
          * Set layout width style
          * @default 'auto'
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set selected placement
          * @default 'bottom'
         */
        "placement": 'bottom' | 'top';
        /**
          * Set rounded tab
          * @default false
         */
        "rounded": boolean;
        /**
          * Set selected tab
          * @default false
         */
        "selected": boolean;
        /**
          * Set small size tab
          * @default false
         */
        "small": boolean;
    }
    interface IxTabs {
        /**
          * Set layout width style
          * @default 'auto'
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set placement style
          * @default 'bottom'
         */
        "placement": 'bottom' | 'top';
        /**
          * Set rounded tabs
          * @default false
         */
        "rounded": boolean;
        /**
          * Set default selected tab by index
          * @default 0
         */
        "selected": number;
        /**
          * Set tab items to small size
          * @default false
         */
        "small": boolean;
    }
    /**
     * @form-ready 
     */
    interface IxTextarea {
        /**
          * Determines if the textarea field is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Get the native textarea element.
         */
        "getNativeInputElement": () => Promise<HTMLTextAreaElement>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * The helper text for the textarea field.
         */
        "helperText"?: string;
        /**
          * The info text for the textarea field.
         */
        "infoText"?: string;
        /**
          * The error text for the textarea field.
         */
        "invalidText"?: string;
        /**
          * Check if the textarea field has been touched.
         */
        "isTouched": () => Promise<boolean>;
        /**
          * The label for the textarea field.
         */
        "label"?: string;
        /**
          * The maximum length of the textarea field.
         */
        "maxLength"?: number;
        /**
          * The minimum length of the textarea field.
         */
        "minLength"?: number;
        /**
          * The name of the textarea field.
         */
        "name"?: string;
        /**
          * The placeholder text for the textarea field.
         */
        "placeholder"?: string;
        /**
          * Determines if the textarea field is readonly.
          * @default false
         */
        "readonly": boolean;
        /**
          * Determines if the textarea field is required.
          * @default false
         */
        "required": boolean;
        /**
          * Determines the resize behavior of the textarea field. Resizing can be enabled in one direction, both directions or completely disabled.
          * @default 'both'
         */
        "resizeBehavior": TextareaResizeBehavior;
        /**
          * Determines if the text should be displayed as a tooltip.
         */
        "showTextAsTooltip"?: boolean;
        /**
          * The width of the textarea specified by number of characters.
         */
        "textareaCols"?: number;
        /**
          * The height of the textarea field (e.g. "52px").
         */
        "textareaHeight"?: string;
        /**
          * The height of the textarea specified by number of rows.
         */
        "textareaRows"?: number;
        /**
          * The width of the textarea field (e.g. "200px").
         */
        "textareaWidth"?: string;
        /**
          * The valid text for the textarea field.
         */
        "validText"?: string;
        /**
          * The value of the textarea field.
          * @default ''
         */
        "value": string;
        /**
          * The warning text for the textarea field.
         */
        "warningText"?: string;
    }
    interface IxTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'big';
    }
    /**
     * @since 3.2.0
     * @form-ready 
     */
    interface IxTimeInput {
        /**
          * Disabled attribute
          * @default false
         */
        "disabled": boolean;
        /**
          * Focuses the input field
         */
        "focusInput": () => Promise<void>;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'TT'
         */
        "format": string;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        /**
          * Get the native input element
         */
        "getNativeInputElement": () => Promise<HTMLInputElement>;
        "getValidityState": () => Promise<ValidityState>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Helper text below the input field
         */
        "helperText"?: string;
        /**
          * Interval for hour selection
          * @default 1
         */
        "hourInterval": number;
        /**
          * I18n string for the error message when the time is not parsable
          * @default 'Time is not valid'
         */
        "i18nErrorTimeUnparsable": string;
        /**
          * Text for time-picker hour column header
          * @default 'hr'
         */
        "i18nHourColumnHeader": string;
        /**
          * Text for time-picker millisecond column header
          * @default 'ms'
         */
        "i18nMillisecondColumnHeader": string;
        /**
          * Text for time-picker minute column header
          * @default 'min'
         */
        "i18nMinuteColumnHeader": string;
        /**
          * Text for time-picker second column header
          * @default 'sec'
         */
        "i18nSecondColumnHeader": string;
        /**
          * Text of time-picker time select button
          * @default 'Confirm'
         */
        "i18nSelectTime": string;
        /**
          * Text for time-picker top label
          * @default 'Time'
         */
        "i18nTime": string;
        /**
          * Info text below the input field
         */
        "infoText"?: string;
        /**
          * Error text below the input field
         */
        "invalidText"?: string;
        /**
          * Returns whether the text field has been touched.
         */
        "isTouched": () => Promise<boolean>;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Interval for millisecond selection
          * @default 100
         */
        "millisecondInterval": number;
        /**
          * Interval for minute selection
          * @default 1
         */
        "minuteInterval": number;
        /**
          * Name of the input element
         */
        "name"?: string;
        /**
          * Placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Readonly attribute
          * @default false
         */
        "readonly": boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * Interval for second selection
          * @default 1
         */
        "secondInterval": number;
        /**
          * Show text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text below the input field
         */
        "validText"?: string;
        /**
          * Value of the input element
          * @default ''
         */
        "value": string;
        /**
          * Warning text below the input field
         */
        "warningText"?: string;
    }
    interface IxTimePicker {
        /**
          * Corner style
          * @default 'rounded'
         */
        "corners": TimePickerCorners;
        /**
          * @default false
         */
        "dateTimePickerAppearance": boolean;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens. Note: Formats that combine date and time (like f or F) are not supported. Timestamp tokens x and X are not supported either.
          * @default 'TT'
         */
        "format": string;
        /**
          * Get the current time based on the wanted format
         */
        "getCurrentTime": () => Promise<string | undefined>;
        /**
          * Hides the header of the picker.
          * @since 3.2.0
          * @default false
         */
        "hideHeader": boolean;
        /**
          * Interval for hour selection
          * @since 3.2.0
          * @default HOUR_INTERVAL_DEFAULT
         */
        "hourInterval": number;
        /**
          * Text of the time confirm button
          * @default CONFIRM_BUTTON_DEFAULT
         */
        "i18nConfirmTime": string;
        /**
          * Text for top header
          * @default HEADER_DEFAULT
         */
        "i18nHeader": string;
        /**
          * Text for hour column header
          * @default 'hr'
         */
        "i18nHourColumnHeader": string;
        /**
          * Text for millisecond column header
          * @default 'ms'
         */
        "i18nMillisecondColumnHeader": string;
        /**
          * Text for minute column header
          * @default 'min'
         */
        "i18nMinuteColumnHeader": string;
        /**
          * Text for second column header
          * @default 'sec'
         */
        "i18nSecondColumnHeader": string;
        /**
          * Interval for millisecond selection
          * @since 3.2.0
          * @default MILLISECOND_INTERVAL_DEFAULT
         */
        "millisecondInterval": number;
        /**
          * Interval for minute selection
          * @since 3.2.0
          * @default MINUTE_INTERVAL_DEFAULT
         */
        "minuteInterval": number;
        /**
          * Interval for second selection
          * @since 3.2.0
          * @default SECOND_INTERVAL_DEFAULT
         */
        "secondInterval": number;
        /**
          * Show hour input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showHour": boolean;
        /**
          * Show minutes input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showMinutes": boolean;
        /**
          * Show seconds input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showSeconds": boolean;
        /**
          * Controls the visual presentation and styling of the component when it is displayed as a standalone element
          * @default true
         */
        "standaloneAppearance": boolean;
        /**
          * Text of time select button
          * @deprecated Use `i18nConfirmTime` instead. Will be removed in 4.0.0.
          * @default CONFIRM_BUTTON_DEFAULT
         */
        "textSelectTime": string;
        /**
          * Text for top label
          * @deprecated Use `i18nHeader` instead. Will be removed in 4.0.0.
          * @default HEADER_DEFAULT
         */
        "textTime": string;
        /**
          * Select time with format string Format has to match the `format` property.
          * @default DateTime.now().toFormat(this.format)
         */
        "time": string;
        /**
          * Set time reference
          * @deprecated This is determined by the currently set time. Will be removed in 4.0.0.
         */
        "timeReference": 'AM' | 'PM' | undefined;
    }
    interface IxToast {
        /**
          * Autoclose behavior
          * @default true
         */
        "autoClose": boolean;
        /**
          * Autoclose title after delay
          * @default 5000
         */
        "autoCloseDelay": number;
        /**
          * Icon of toast
         */
        "icon"?: string;
        /**
          * Icon color of toast
         */
        "iconColor"?: string;
        /**
          * Toast title
         */
        "toastTitle"?: string;
        /**
          * Toast type
          * @default 'info'
         */
        "type": ToastType;
    }
    interface IxToastContainer {
        /**
          * @default 'toast-container'
         */
        "containerClass": string;
        /**
          * @default 'toast-container'
         */
        "containerId": string;
        /**
          * @default 'bottom-right'
         */
        "position": 'bottom-right' | 'top-right';
        /**
          * Display a toast message
          * @param config
         */
        "showToast": (config: ToastConfig) => Promise<ShowToastResult>;
    }
    /**
     * @form-ready 
     */
    interface IxToggle {
        /**
          * Whether the slide-toggle element is checked or not.
          * @default false
         */
        "checked": boolean;
        /**
          * Whether the slide-toggle element is disabled or not.
          * @default false
         */
        "disabled": boolean;
        "getAssociatedFormElement": () => Promise<HTMLFormElement | null>;
        "hasValidValue": () => Promise<boolean>;
        /**
          * Hide `on` and `off` text
          * @default false
         */
        "hideText": boolean;
        /**
          * If true the control is in indeterminate state
          * @default false
         */
        "indeterminate": boolean;
        "isTouched": () => Promise<boolean>;
        /**
          * Name of the checkbox component
         */
        "name"?: string;
        /**
          * Required state of the checkbox component.  If true, checkbox needs to be checked to be valid
          * @default false
         */
        "required": boolean;
        /**
          * Text for indeterminate state
          * @default 'Mixed'
         */
        "textIndeterminate": string;
        /**
          * Text for off state
          * @default 'Off'
         */
        "textOff": string;
        /**
          * Text for on state
          * @default 'On'
         */
        "textOn": string;
        /**
          * Value of the checkbox component
          * @default 'on'
         */
        "value": string;
    }
    interface IxToggleButton {
        /**
          * Disable the button
          * @default false
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost": boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading": boolean;
        /**
          * Outline button
          * @default false
         */
        "outline": boolean;
        /**
          * Show button as pressed
          * @default false
         */
        "pressed": boolean;
        /**
          * Button variant.
          * @default 'secondary'
         */
        "variant": ButtonVariant1;
    }
    interface IxTooltip {
        /**
          * @default false
         */
        "animationFrame": boolean;
        /**
          * CSS selector for hover trigger element e.g. `for="[data-my-custom-select]"`
         */
        "for"?: ElementReference | ElementReference[];
        /**
          * @default 50
         */
        "hideDelay": number;
        "hideTooltip": (hideDelay?: number) => Promise<void>;
        /**
          * Define if the user can access the tooltip via mouse.
          * @default false
         */
        "interactive": boolean;
        /**
          * Initial placement of the tooltip. If the selected placement doesn't have enough space, the tooltip will be repositioned to another location.
          * @default 'top'
         */
        "placement": 'top' | 'right' | 'bottom' | 'left';
        /**
          * @default 0
         */
        "showDelay": number;
        "showTooltip": (anchorElement: Element) => Promise<void>;
        /**
          * Title of the tooltip
         */
        "titleContent"?: string;
    }
    interface IxTree {
        /**
          * Selection and collapsed state management
          * @default {}
         */
        "context": TreeContext;
        /**
          * Tree model
          * @default {}
         */
        "model": TreeModel<any>;
        /**
          * Render function of tree items
         */
        "renderItem"?: <T = any>(
    index: number,
    data: T,
    dataList: Array<T>,
    context: TreeContext,
    update: (callback: UpdateCallback) => void
  ) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root": string;
        /**
          * Enable to toggle items by click on the item
          * @since 3.0.0
         */
        "toggleOnItemClick"?: boolean;
    }
    interface IxTreeItem {
        /**
          * Context
         */
        "context"?: TreeItemContext;
        /**
          * Has tree item children
          * @default false
         */
        "hasChildren": boolean;
        /**
          * Text
         */
        "text"?: string;
    }
    interface IxTypography {
        /**
          * Display text bold
          * @default false
         */
        "bold": boolean;
        /**
          * Text format
         */
        "format"?: TypographyFormat;
        /**
          * Text color based on theme variables
         */
        "textColor"?: TypographyColors;
        /**
          * Text decoration
          * @default 'none'
         */
        "textDecoration": TextDecoration;
    }
    interface IxUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link "https://www.w3schools.com/tags/att_input_accept.asp"}
         */
        "accept"?: string;
        /**
          * Disable all input events
          * @default false
         */
        "disabled": boolean;
        /**
          * Text for disabled state
          * @default 'File upload currently not possible.'
         */
        "i18nUploadDisabled": string;
        /**
          * Label for upload file button
          * @default 'Upload file…'
         */
        "i18nUploadFile": string;
        /**
          * Will be used by state = UploadFileState.LOADING
          * @default 'Checking files…'
         */
        "loadingText": string;
        /**
          * Whether the text should wrap to more than one line
          * @default false
         */
        "multiline": boolean;
        /**
          * If multiple is true the user can drop or select multiple files
          * @default false
         */
        "multiple": boolean;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
          * @default '+ Drag files here or…'
         */
        "selectFileText": string;
        /**
          * Set files
          * @param obj
         */
        "setFilesToUpload": (obj: any) => Promise<void>;
        /**
          * After a file is uploaded you can set the upload component to a defined state
          * @default UploadFileState.SELECT_FILE
         */
        "state": UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
          * @default 'Upload failed. Please try again.'
         */
        "uploadFailedText": string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
          * @default 'Upload successful'
         */
        "uploadSuccessText": string;
    }
    /**
     * @deprecated Will be removed with 4.0.0
     */
    interface IxValidationTooltip {
        /**
          * Message of the tooltip
         */
        "message"?: string;
        /**
          * Placement of the tooltip
          * @default 'top'
         */
        "placement": Side;
        /**
          * Suppress the automatic placement of the dropdown.
          * @default false
         */
        "suppressAutomaticPlacement": boolean;
    }
    interface IxWorkflowStep {
        /**
          * Activate navigation click
          * @default false
         */
        "clickable": boolean;
        /**
          * Set disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Activate navigation click
          * @default 'undefined'
         */
        "position": 'first' | 'last' | 'single' | 'undefined';
        /**
          * Set selected
          * @default false
         */
        "selected": boolean;
        /**
          * Set status
          * @default 'open'
         */
        "status": 'open' | 'success' | 'done' | 'warning' | 'error';
        /**
          * Select orientation
          * @default false
         */
        "vertical": boolean;
    }
    interface IxWorkflowSteps {
        /**
          * Activate navigation click
          * @default false
         */
        "clickable": boolean;
        /**
          * Activate navigation click
          * @default 0
         */
        "selectedIndex": number;
        /**
          * Select orientation
          * @default false
         */
        "vertical": boolean;
    }
}
export interface IxApplicationHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxApplicationHeaderElement;
}
export interface IxBlindCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxBlindElement;
}
export interface IxBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxBreadcrumbElement;
}
export interface IxBreadcrumbItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxBreadcrumbItemElement;
}
export interface IxCardAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxCardAccordionElement;
}
export interface IxCardListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxCardListElement;
}
export interface IxCategoryFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxCategoryFilterElement;
}
export interface IxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxCheckboxElement;
}
export interface IxChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxChipElement;
}
export interface IxContentHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxContentHeaderElement;
}
export interface IxDateDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDateDropdownElement;
}
export interface IxDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDateInputElement;
}
export interface IxDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDatePickerElement;
}
export interface IxDatetimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDatetimePickerElement;
}
export interface IxDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDrawerElement;
}
export interface IxDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDropdownElement;
}
export interface IxDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxDropdownItemElement;
}
export interface IxEmptyStateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxEmptyStateElement;
}
export interface IxEventListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxEventListItemElement;
}
export interface IxExpandingSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxExpandingSearchElement;
}
export interface IxFilterChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxFilterChipElement;
}
export interface IxFlipTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxFlipTileElement;
}
export interface IxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxGroupElement;
}
export interface IxGroupItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxGroupItemElement;
}
export interface IxIconToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxIconToggleButtonElement;
}
export interface IxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxInputElement;
}
export interface IxMapNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMapNavigationElement;
}
export interface IxMapNavigationOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMapNavigationOverlayElement;
}
export interface IxMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuElement;
}
export interface IxMenuAboutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAboutElement;
}
export interface IxMenuAboutItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAboutItemElement;
}
export interface IxMenuAboutNewsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAboutNewsElement;
}
export interface IxMenuAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAvatarElement;
}
export interface IxMenuAvatarItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuAvatarItemElement;
}
export interface IxMenuCategoryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuCategoryElement;
}
export interface IxMenuSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuSettingsElement;
}
export interface IxMenuSettingsItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMenuSettingsItemElement;
}
export interface IxMessageBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxMessageBarElement;
}
export interface IxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxModalElement;
}
export interface IxModalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxModalHeaderElement;
}
export interface IxNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxNumberInputElement;
}
export interface IxPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxPaginationElement;
}
export interface IxPaneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxPaneElement;
}
export interface IxRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxRadioElement;
}
export interface IxRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxRadioGroupElement;
}
export interface IxSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSelectElement;
}
export interface IxSelectItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSelectItemElement;
}
export interface IxSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSliderElement;
}
export interface IxSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxSplitButtonElement;
}
export interface IxTabItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTabItemElement;
}
export interface IxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTabsElement;
}
export interface IxTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTextareaElement;
}
export interface IxTimeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTimeInputElement;
}
export interface IxTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTimePickerElement;
}
export interface IxToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxToastElement;
}
export interface IxToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxToggleElement;
}
export interface IxToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxToggleButtonElement;
}
export interface IxTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTreeElement;
}
export interface IxTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxTreeItemElement;
}
export interface IxUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxUploadElement;
}
export interface IxWorkflowStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxWorkflowStepElement;
}
export interface IxWorkflowStepsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIxWorkflowStepsElement;
}
declare global {
    interface HTMLIxActionCardElement extends Components.IxActionCard, HTMLStencilElement {
    }
    var HTMLIxActionCardElement: {
        prototype: HTMLIxActionCardElement;
        new (): HTMLIxActionCardElement;
    };
    interface HTMLIxApplicationElement extends Components.IxApplication, HTMLStencilElement {
    }
    var HTMLIxApplicationElement: {
        prototype: HTMLIxApplicationElement;
        new (): HTMLIxApplicationElement;
    };
    interface HTMLIxApplicationHeaderElementEventMap {
        "menuToggle": boolean;
        "openAppSwitch": void;
    }
    interface HTMLIxApplicationHeaderElement extends Components.IxApplicationHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxApplicationHeaderElementEventMap>(type: K, listener: (this: HTMLIxApplicationHeaderElement, ev: IxApplicationHeaderCustomEvent<HTMLIxApplicationHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxApplicationHeaderElementEventMap>(type: K, listener: (this: HTMLIxApplicationHeaderElement, ev: IxApplicationHeaderCustomEvent<HTMLIxApplicationHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxApplicationHeaderElement: {
        prototype: HTMLIxApplicationHeaderElement;
        new (): HTMLIxApplicationHeaderElement;
    };
    interface HTMLIxApplicationSidebarElement extends Components.IxApplicationSidebar, HTMLStencilElement {
    }
    var HTMLIxApplicationSidebarElement: {
        prototype: HTMLIxApplicationSidebarElement;
        new (): HTMLIxApplicationSidebarElement;
    };
    interface HTMLIxApplicationSwitchModalElement extends Components.IxApplicationSwitchModal, HTMLStencilElement {
    }
    var HTMLIxApplicationSwitchModalElement: {
        prototype: HTMLIxApplicationSwitchModalElement;
        new (): HTMLIxApplicationSwitchModalElement;
    };
    interface HTMLIxAvatarElement extends Components.IxAvatar, HTMLStencilElement {
    }
    var HTMLIxAvatarElement: {
        prototype: HTMLIxAvatarElement;
        new (): HTMLIxAvatarElement;
    };
    interface HTMLIxBasicNavigationElement extends Components.IxBasicNavigation, HTMLStencilElement {
    }
    var HTMLIxBasicNavigationElement: {
        prototype: HTMLIxBasicNavigationElement;
        new (): HTMLIxBasicNavigationElement;
    };
    interface HTMLIxBlindElementEventMap {
        "collapsedChange": boolean;
    }
    interface HTMLIxBlindElement extends Components.IxBlind, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxBlindElementEventMap>(type: K, listener: (this: HTMLIxBlindElement, ev: IxBlindCustomEvent<HTMLIxBlindElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxBlindElementEventMap>(type: K, listener: (this: HTMLIxBlindElement, ev: IxBlindCustomEvent<HTMLIxBlindElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxBlindElement: {
        prototype: HTMLIxBlindElement;
        new (): HTMLIxBlindElement;
    };
    interface HTMLIxBreadcrumbElementEventMap {
        "itemClick": string;
        "nextClick": { event: UIEvent; item: string };
    }
    interface HTMLIxBreadcrumbElement extends Components.IxBreadcrumb, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxBreadcrumbElementEventMap>(type: K, listener: (this: HTMLIxBreadcrumbElement, ev: IxBreadcrumbCustomEvent<HTMLIxBreadcrumbElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxBreadcrumbElementEventMap>(type: K, listener: (this: HTMLIxBreadcrumbElement, ev: IxBreadcrumbCustomEvent<HTMLIxBreadcrumbElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxBreadcrumbElement: {
        prototype: HTMLIxBreadcrumbElement;
        new (): HTMLIxBreadcrumbElement;
    };
    interface HTMLIxBreadcrumbItemElementEventMap {
        "itemClick": string;
    }
    interface HTMLIxBreadcrumbItemElement extends Components.IxBreadcrumbItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLIxBreadcrumbItemElement, ev: IxBreadcrumbItemCustomEvent<HTMLIxBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLIxBreadcrumbItemElement, ev: IxBreadcrumbItemCustomEvent<HTMLIxBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxBreadcrumbItemElement: {
        prototype: HTMLIxBreadcrumbItemElement;
        new (): HTMLIxBreadcrumbItemElement;
    };
    interface HTMLIxButtonElement extends Components.IxButton, HTMLStencilElement {
    }
    var HTMLIxButtonElement: {
        prototype: HTMLIxButtonElement;
        new (): HTMLIxButtonElement;
    };
    interface HTMLIxCardElement extends Components.IxCard, HTMLStencilElement {
    }
    var HTMLIxCardElement: {
        prototype: HTMLIxCardElement;
        new (): HTMLIxCardElement;
    };
    interface HTMLIxCardAccordionElementEventMap {
        "accordionExpand": CardAccordionExpandChangeEvent;
    }
    interface HTMLIxCardAccordionElement extends Components.IxCardAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxCardAccordionElementEventMap>(type: K, listener: (this: HTMLIxCardAccordionElement, ev: IxCardAccordionCustomEvent<HTMLIxCardAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxCardAccordionElementEventMap>(type: K, listener: (this: HTMLIxCardAccordionElement, ev: IxCardAccordionCustomEvent<HTMLIxCardAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxCardAccordionElement: {
        prototype: HTMLIxCardAccordionElement;
        new (): HTMLIxCardAccordionElement;
    };
    interface HTMLIxCardContentElement extends Components.IxCardContent, HTMLStencilElement {
    }
    var HTMLIxCardContentElement: {
        prototype: HTMLIxCardContentElement;
        new (): HTMLIxCardContentElement;
    };
    interface HTMLIxCardListElementEventMap {
        "collapseChanged": boolean;
        "showAllClick": {
    nativeEvent: MouseEvent;
  };
        "showMoreCardClick": {
    nativeEvent: MouseEvent;
  };
    }
    interface HTMLIxCardListElement extends Components.IxCardList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxCardListElementEventMap>(type: K, listener: (this: HTMLIxCardListElement, ev: IxCardListCustomEvent<HTMLIxCardListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxCardListElementEventMap>(type: K, listener: (this: HTMLIxCardListElement, ev: IxCardListCustomEvent<HTMLIxCardListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxCardListElement: {
        prototype: HTMLIxCardListElement;
        new (): HTMLIxCardListElement;
    };
    interface HTMLIxCardTitleElement extends Components.IxCardTitle, HTMLStencilElement {
    }
    var HTMLIxCardTitleElement: {
        prototype: HTMLIxCardTitleElement;
        new (): HTMLIxCardTitleElement;
    };
    interface HTMLIxCategoryFilterElementEventMap {
        "categoryChanged": string;
        "inputChanged": InputState;
        "filterChanged": FilterState;
        "filterCleared": void;
    }
    interface HTMLIxCategoryFilterElement extends Components.IxCategoryFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxCategoryFilterElementEventMap>(type: K, listener: (this: HTMLIxCategoryFilterElement, ev: IxCategoryFilterCustomEvent<HTMLIxCategoryFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxCategoryFilterElementEventMap>(type: K, listener: (this: HTMLIxCategoryFilterElement, ev: IxCategoryFilterCustomEvent<HTMLIxCategoryFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxCategoryFilterElement: {
        prototype: HTMLIxCategoryFilterElement;
        new (): HTMLIxCategoryFilterElement;
    };
    interface HTMLIxCheckboxElementEventMap {
        "checkedChange": boolean;
        "valueChange": string;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxCheckboxElement extends Components.IxCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxCheckboxElementEventMap>(type: K, listener: (this: HTMLIxCheckboxElement, ev: IxCheckboxCustomEvent<HTMLIxCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxCheckboxElementEventMap>(type: K, listener: (this: HTMLIxCheckboxElement, ev: IxCheckboxCustomEvent<HTMLIxCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxCheckboxElement: {
        prototype: HTMLIxCheckboxElement;
        new (): HTMLIxCheckboxElement;
    };
    /**
     * @form-ready 
     */
    interface HTMLIxCheckboxGroupElement extends Components.IxCheckboxGroup, HTMLStencilElement {
    }
    var HTMLIxCheckboxGroupElement: {
        prototype: HTMLIxCheckboxGroupElement;
        new (): HTMLIxCheckboxGroupElement;
    };
    interface HTMLIxChipElementEventMap {
        "closeChip": any;
    }
    interface HTMLIxChipElement extends Components.IxChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxChipElementEventMap>(type: K, listener: (this: HTMLIxChipElement, ev: IxChipCustomEvent<HTMLIxChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxChipElementEventMap>(type: K, listener: (this: HTMLIxChipElement, ev: IxChipCustomEvent<HTMLIxChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxChipElement: {
        prototype: HTMLIxChipElement;
        new (): HTMLIxChipElement;
    };
    interface HTMLIxColElement extends Components.IxCol, HTMLStencilElement {
    }
    var HTMLIxColElement: {
        prototype: HTMLIxColElement;
        new (): HTMLIxColElement;
    };
    interface HTMLIxContentElement extends Components.IxContent, HTMLStencilElement {
    }
    var HTMLIxContentElement: {
        prototype: HTMLIxContentElement;
        new (): HTMLIxContentElement;
    };
    interface HTMLIxContentHeaderElementEventMap {
        "backButtonClick": void;
    }
    interface HTMLIxContentHeaderElement extends Components.IxContentHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxContentHeaderElementEventMap>(type: K, listener: (this: HTMLIxContentHeaderElement, ev: IxContentHeaderCustomEvent<HTMLIxContentHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxContentHeaderElementEventMap>(type: K, listener: (this: HTMLIxContentHeaderElement, ev: IxContentHeaderCustomEvent<HTMLIxContentHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxContentHeaderElement: {
        prototype: HTMLIxContentHeaderElement;
        new (): HTMLIxContentHeaderElement;
    };
    interface HTMLIxCssGridElement extends Components.IxCssGrid, HTMLStencilElement {
    }
    var HTMLIxCssGridElement: {
        prototype: HTMLIxCssGridElement;
        new (): HTMLIxCssGridElement;
    };
    interface HTMLIxCssGridItemElement extends Components.IxCssGridItem, HTMLStencilElement {
    }
    var HTMLIxCssGridItemElement: {
        prototype: HTMLIxCssGridItemElement;
        new (): HTMLIxCssGridItemElement;
    };
    interface HTMLIxCustomFieldElement extends Components.IxCustomField, HTMLStencilElement {
    }
    var HTMLIxCustomFieldElement: {
        prototype: HTMLIxCustomFieldElement;
        new (): HTMLIxCustomFieldElement;
    };
    interface HTMLIxDateDropdownElementEventMap {
        "dateRangeChange": DateRangeChangeEvent;
    }
    interface HTMLIxDateDropdownElement extends Components.IxDateDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDateDropdownElementEventMap>(type: K, listener: (this: HTMLIxDateDropdownElement, ev: IxDateDropdownCustomEvent<HTMLIxDateDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDateDropdownElementEventMap>(type: K, listener: (this: HTMLIxDateDropdownElement, ev: IxDateDropdownCustomEvent<HTMLIxDateDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDateDropdownElement: {
        prototype: HTMLIxDateDropdownElement;
        new (): HTMLIxDateDropdownElement;
    };
    interface HTMLIxDateInputElementEventMap {
        "valueChange": string | undefined;
        "validityStateChange": DateInputValidityState;
        "ixFocus": void;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxDateInputElement extends Components.IxDateInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDateInputElementEventMap>(type: K, listener: (this: HTMLIxDateInputElement, ev: IxDateInputCustomEvent<HTMLIxDateInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDateInputElementEventMap>(type: K, listener: (this: HTMLIxDateInputElement, ev: IxDateInputCustomEvent<HTMLIxDateInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDateInputElement: {
        prototype: HTMLIxDateInputElement;
        new (): HTMLIxDateInputElement;
    };
    interface HTMLIxDatePickerElementEventMap {
        "dateChange": DateChangeEvent;
        "dateRangeChange": DateChangeEvent;
        "dateSelect": DateChangeEvent;
    }
    interface HTMLIxDatePickerElement extends Components.IxDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDatePickerElementEventMap>(type: K, listener: (this: HTMLIxDatePickerElement, ev: IxDatePickerCustomEvent<HTMLIxDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDatePickerElementEventMap>(type: K, listener: (this: HTMLIxDatePickerElement, ev: IxDatePickerCustomEvent<HTMLIxDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDatePickerElement: {
        prototype: HTMLIxDatePickerElement;
        new (): HTMLIxDatePickerElement;
    };
    interface HTMLIxDateTimeCardElement extends Components.IxDateTimeCard, HTMLStencilElement {
    }
    var HTMLIxDateTimeCardElement: {
        prototype: HTMLIxDateTimeCardElement;
        new (): HTMLIxDateTimeCardElement;
    };
    interface HTMLIxDatetimePickerElementEventMap {
        "timeChange": string;
        "dateChange": DateTimeDateChangeEvent;
        "dateSelect": DateTimeSelectEvent;
    }
    interface HTMLIxDatetimePickerElement extends Components.IxDatetimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDatetimePickerElementEventMap>(type: K, listener: (this: HTMLIxDatetimePickerElement, ev: IxDatetimePickerCustomEvent<HTMLIxDatetimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDatetimePickerElementEventMap>(type: K, listener: (this: HTMLIxDatetimePickerElement, ev: IxDatetimePickerCustomEvent<HTMLIxDatetimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDatetimePickerElement: {
        prototype: HTMLIxDatetimePickerElement;
        new (): HTMLIxDatetimePickerElement;
    };
    interface HTMLIxDividerElement extends Components.IxDivider, HTMLStencilElement {
    }
    var HTMLIxDividerElement: {
        prototype: HTMLIxDividerElement;
        new (): HTMLIxDividerElement;
    };
    interface HTMLIxDrawerElementEventMap {
        "open": any;
        "drawerClose": any;
    }
    interface HTMLIxDrawerElement extends Components.IxDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDrawerElementEventMap>(type: K, listener: (this: HTMLIxDrawerElement, ev: IxDrawerCustomEvent<HTMLIxDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDrawerElementEventMap>(type: K, listener: (this: HTMLIxDrawerElement, ev: IxDrawerCustomEvent<HTMLIxDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDrawerElement: {
        prototype: HTMLIxDrawerElement;
        new (): HTMLIxDrawerElement;
    };
    interface HTMLIxDropdownElementEventMap {
        "showChanged": boolean;
    }
    interface HTMLIxDropdownElement extends Components.IxDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDropdownElementEventMap>(type: K, listener: (this: HTMLIxDropdownElement, ev: IxDropdownCustomEvent<HTMLIxDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDropdownElementEventMap>(type: K, listener: (this: HTMLIxDropdownElement, ev: IxDropdownCustomEvent<HTMLIxDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDropdownElement: {
        prototype: HTMLIxDropdownElement;
        new (): HTMLIxDropdownElement;
    };
    interface HTMLIxDropdownButtonElement extends Components.IxDropdownButton, HTMLStencilElement {
    }
    var HTMLIxDropdownButtonElement: {
        prototype: HTMLIxDropdownButtonElement;
        new (): HTMLIxDropdownButtonElement;
    };
    interface HTMLIxDropdownHeaderElement extends Components.IxDropdownHeader, HTMLStencilElement {
    }
    var HTMLIxDropdownHeaderElement: {
        prototype: HTMLIxDropdownHeaderElement;
        new (): HTMLIxDropdownHeaderElement;
    };
    interface HTMLIxDropdownItemElementEventMap {
        "itemClick": HTMLIxDropdownItemElement;
    }
    interface HTMLIxDropdownItemElement extends Components.IxDropdownItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxDropdownItemElementEventMap>(type: K, listener: (this: HTMLIxDropdownItemElement, ev: IxDropdownItemCustomEvent<HTMLIxDropdownItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxDropdownItemElementEventMap>(type: K, listener: (this: HTMLIxDropdownItemElement, ev: IxDropdownItemCustomEvent<HTMLIxDropdownItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxDropdownItemElement: {
        prototype: HTMLIxDropdownItemElement;
        new (): HTMLIxDropdownItemElement;
    };
    interface HTMLIxDropdownQuickActionsElement extends Components.IxDropdownQuickActions, HTMLStencilElement {
    }
    var HTMLIxDropdownQuickActionsElement: {
        prototype: HTMLIxDropdownQuickActionsElement;
        new (): HTMLIxDropdownQuickActionsElement;
    };
    interface HTMLIxEmptyStateElementEventMap {
        "actionClick": void;
    }
    interface HTMLIxEmptyStateElement extends Components.IxEmptyState, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxEmptyStateElementEventMap>(type: K, listener: (this: HTMLIxEmptyStateElement, ev: IxEmptyStateCustomEvent<HTMLIxEmptyStateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxEmptyStateElementEventMap>(type: K, listener: (this: HTMLIxEmptyStateElement, ev: IxEmptyStateCustomEvent<HTMLIxEmptyStateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxEmptyStateElement: {
        prototype: HTMLIxEmptyStateElement;
        new (): HTMLIxEmptyStateElement;
    };
    interface HTMLIxEventListElement extends Components.IxEventList, HTMLStencilElement {
    }
    var HTMLIxEventListElement: {
        prototype: HTMLIxEventListElement;
        new (): HTMLIxEventListElement;
    };
    interface HTMLIxEventListItemElementEventMap {
        "itemClick": any;
    }
    interface HTMLIxEventListItemElement extends Components.IxEventListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxEventListItemElementEventMap>(type: K, listener: (this: HTMLIxEventListItemElement, ev: IxEventListItemCustomEvent<HTMLIxEventListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxEventListItemElementEventMap>(type: K, listener: (this: HTMLIxEventListItemElement, ev: IxEventListItemCustomEvent<HTMLIxEventListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxEventListItemElement: {
        prototype: HTMLIxEventListItemElement;
        new (): HTMLIxEventListItemElement;
    };
    interface HTMLIxExpandingSearchElementEventMap {
        "valueChange": string;
    }
    interface HTMLIxExpandingSearchElement extends Components.IxExpandingSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxExpandingSearchElementEventMap>(type: K, listener: (this: HTMLIxExpandingSearchElement, ev: IxExpandingSearchCustomEvent<HTMLIxExpandingSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxExpandingSearchElementEventMap>(type: K, listener: (this: HTMLIxExpandingSearchElement, ev: IxExpandingSearchCustomEvent<HTMLIxExpandingSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxExpandingSearchElement: {
        prototype: HTMLIxExpandingSearchElement;
        new (): HTMLIxExpandingSearchElement;
    };
    interface HTMLIxFieldLabelElement extends Components.IxFieldLabel, HTMLStencilElement {
    }
    var HTMLIxFieldLabelElement: {
        prototype: HTMLIxFieldLabelElement;
        new (): HTMLIxFieldLabelElement;
    };
    interface HTMLIxFieldWrapperElement extends Components.IxFieldWrapper, HTMLStencilElement {
    }
    var HTMLIxFieldWrapperElement: {
        prototype: HTMLIxFieldWrapperElement;
        new (): HTMLIxFieldWrapperElement;
    };
    interface HTMLIxFilterChipElementEventMap {
        "closeClick": void;
    }
    interface HTMLIxFilterChipElement extends Components.IxFilterChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxFilterChipElementEventMap>(type: K, listener: (this: HTMLIxFilterChipElement, ev: IxFilterChipCustomEvent<HTMLIxFilterChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxFilterChipElementEventMap>(type: K, listener: (this: HTMLIxFilterChipElement, ev: IxFilterChipCustomEvent<HTMLIxFilterChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxFilterChipElement: {
        prototype: HTMLIxFilterChipElement;
        new (): HTMLIxFilterChipElement;
    };
    interface HTMLIxFlipTileElementEventMap {
        "toggle": number;
    }
    interface HTMLIxFlipTileElement extends Components.IxFlipTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxFlipTileElementEventMap>(type: K, listener: (this: HTMLIxFlipTileElement, ev: IxFlipTileCustomEvent<HTMLIxFlipTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxFlipTileElementEventMap>(type: K, listener: (this: HTMLIxFlipTileElement, ev: IxFlipTileCustomEvent<HTMLIxFlipTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxFlipTileElement: {
        prototype: HTMLIxFlipTileElement;
        new (): HTMLIxFlipTileElement;
    };
    interface HTMLIxFlipTileContentElement extends Components.IxFlipTileContent, HTMLStencilElement {
    }
    var HTMLIxFlipTileContentElement: {
        prototype: HTMLIxFlipTileContentElement;
        new (): HTMLIxFlipTileContentElement;
    };
    interface HTMLIxGroupElementEventMap {
        "selectGroup": boolean;
        "selectItem": number;
        "collapsedChanged": boolean;
    }
    interface HTMLIxGroupElement extends Components.IxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxGroupElementEventMap>(type: K, listener: (this: HTMLIxGroupElement, ev: IxGroupCustomEvent<HTMLIxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxGroupElementEventMap>(type: K, listener: (this: HTMLIxGroupElement, ev: IxGroupCustomEvent<HTMLIxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxGroupElement: {
        prototype: HTMLIxGroupElement;
        new (): HTMLIxGroupElement;
    };
    interface HTMLIxGroupContextMenuElement extends Components.IxGroupContextMenu, HTMLStencilElement {
    }
    var HTMLIxGroupContextMenuElement: {
        prototype: HTMLIxGroupContextMenuElement;
        new (): HTMLIxGroupContextMenuElement;
    };
    interface HTMLIxGroupItemElementEventMap {
        "selectedChanged": HTMLIxGroupItemElement;
    }
    interface HTMLIxGroupItemElement extends Components.IxGroupItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxGroupItemElementEventMap>(type: K, listener: (this: HTMLIxGroupItemElement, ev: IxGroupItemCustomEvent<HTMLIxGroupItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxGroupItemElementEventMap>(type: K, listener: (this: HTMLIxGroupItemElement, ev: IxGroupItemCustomEvent<HTMLIxGroupItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxGroupItemElement: {
        prototype: HTMLIxGroupItemElement;
        new (): HTMLIxGroupItemElement;
    };
    interface HTMLIxHelperTextElement extends Components.IxHelperText, HTMLStencilElement {
    }
    var HTMLIxHelperTextElement: {
        prototype: HTMLIxHelperTextElement;
        new (): HTMLIxHelperTextElement;
    };
    interface HTMLIxIconButtonElement extends Components.IxIconButton, HTMLStencilElement {
    }
    var HTMLIxIconButtonElement: {
        prototype: HTMLIxIconButtonElement;
        new (): HTMLIxIconButtonElement;
    };
    interface HTMLIxIconToggleButtonElementEventMap {
        "pressedChange": boolean;
    }
    interface HTMLIxIconToggleButtonElement extends Components.IxIconToggleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxIconToggleButtonElementEventMap>(type: K, listener: (this: HTMLIxIconToggleButtonElement, ev: IxIconToggleButtonCustomEvent<HTMLIxIconToggleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxIconToggleButtonElementEventMap>(type: K, listener: (this: HTMLIxIconToggleButtonElement, ev: IxIconToggleButtonCustomEvent<HTMLIxIconToggleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxIconToggleButtonElement: {
        prototype: HTMLIxIconToggleButtonElement;
        new (): HTMLIxIconToggleButtonElement;
    };
    interface HTMLIxInputElementEventMap {
        "valueChange": string;
        "validityStateChange": ValidityState;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxInputElement extends Components.IxInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxInputElementEventMap>(type: K, listener: (this: HTMLIxInputElement, ev: IxInputCustomEvent<HTMLIxInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxInputElementEventMap>(type: K, listener: (this: HTMLIxInputElement, ev: IxInputCustomEvent<HTMLIxInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxInputElement: {
        prototype: HTMLIxInputElement;
        new (): HTMLIxInputElement;
    };
    /**
     * @deprecated Will be removed with 4.0.0
     * Use the 'ix-input' component instead
     */
    interface HTMLIxInputGroupElement extends Components.IxInputGroup, HTMLStencilElement {
    }
    var HTMLIxInputGroupElement: {
        prototype: HTMLIxInputGroupElement;
        new (): HTMLIxInputGroupElement;
    };
    interface HTMLIxKeyValueElement extends Components.IxKeyValue, HTMLStencilElement {
    }
    var HTMLIxKeyValueElement: {
        prototype: HTMLIxKeyValueElement;
        new (): HTMLIxKeyValueElement;
    };
    interface HTMLIxKeyValueListElement extends Components.IxKeyValueList, HTMLStencilElement {
    }
    var HTMLIxKeyValueListElement: {
        prototype: HTMLIxKeyValueListElement;
        new (): HTMLIxKeyValueListElement;
    };
    interface HTMLIxKpiElement extends Components.IxKpi, HTMLStencilElement {
    }
    var HTMLIxKpiElement: {
        prototype: HTMLIxKpiElement;
        new (): HTMLIxKpiElement;
    };
    interface HTMLIxLayoutAutoElement extends Components.IxLayoutAuto, HTMLStencilElement {
    }
    var HTMLIxLayoutAutoElement: {
        prototype: HTMLIxLayoutAutoElement;
        new (): HTMLIxLayoutAutoElement;
    };
    interface HTMLIxLayoutGridElement extends Components.IxLayoutGrid, HTMLStencilElement {
    }
    var HTMLIxLayoutGridElement: {
        prototype: HTMLIxLayoutGridElement;
        new (): HTMLIxLayoutGridElement;
    };
    interface HTMLIxLinkButtonElement extends Components.IxLinkButton, HTMLStencilElement {
    }
    var HTMLIxLinkButtonElement: {
        prototype: HTMLIxLinkButtonElement;
        new (): HTMLIxLinkButtonElement;
    };
    interface HTMLIxMapNavigationElementEventMap {
        "navigationToggled": boolean;
        "contextMenuClick": void;
    }
    interface HTMLIxMapNavigationElement extends Components.IxMapNavigation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMapNavigationElementEventMap>(type: K, listener: (this: HTMLIxMapNavigationElement, ev: IxMapNavigationCustomEvent<HTMLIxMapNavigationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMapNavigationElementEventMap>(type: K, listener: (this: HTMLIxMapNavigationElement, ev: IxMapNavigationCustomEvent<HTMLIxMapNavigationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMapNavigationElement: {
        prototype: HTMLIxMapNavigationElement;
        new (): HTMLIxMapNavigationElement;
    };
    interface HTMLIxMapNavigationOverlayElementEventMap {
        "closeClick": any;
    }
    interface HTMLIxMapNavigationOverlayElement extends Components.IxMapNavigationOverlay, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMapNavigationOverlayElementEventMap>(type: K, listener: (this: HTMLIxMapNavigationOverlayElement, ev: IxMapNavigationOverlayCustomEvent<HTMLIxMapNavigationOverlayElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMapNavigationOverlayElementEventMap>(type: K, listener: (this: HTMLIxMapNavigationOverlayElement, ev: IxMapNavigationOverlayCustomEvent<HTMLIxMapNavigationOverlayElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMapNavigationOverlayElement: {
        prototype: HTMLIxMapNavigationOverlayElement;
        new (): HTMLIxMapNavigationOverlayElement;
    };
    interface HTMLIxMenuElementEventMap {
        "expandChange": boolean;
        "mapExpandChange": boolean;
        "openAppSwitch": void;
        "openSettings": void;
        "openAbout": void;
    }
    interface HTMLIxMenuElement extends Components.IxMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuElementEventMap>(type: K, listener: (this: HTMLIxMenuElement, ev: IxMenuCustomEvent<HTMLIxMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuElementEventMap>(type: K, listener: (this: HTMLIxMenuElement, ev: IxMenuCustomEvent<HTMLIxMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuElement: {
        prototype: HTMLIxMenuElement;
        new (): HTMLIxMenuElement;
    };
    interface HTMLIxMenuAboutElementEventMap {
        "tabChange": string;
        "close": CustomCloseEvent;
    }
    interface HTMLIxMenuAboutElement extends Components.IxMenuAbout, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuAboutElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutElement, ev: IxMenuAboutCustomEvent<HTMLIxMenuAboutElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuAboutElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutElement, ev: IxMenuAboutCustomEvent<HTMLIxMenuAboutElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuAboutElement: {
        prototype: HTMLIxMenuAboutElement;
        new (): HTMLIxMenuAboutElement;
    };
    interface HTMLIxMenuAboutItemElementEventMap {
        "labelChange": CustomLabelChangeEvent;
    }
    interface HTMLIxMenuAboutItemElement extends Components.IxMenuAboutItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuAboutItemElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutItemElement, ev: IxMenuAboutItemCustomEvent<HTMLIxMenuAboutItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuAboutItemElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutItemElement, ev: IxMenuAboutItemCustomEvent<HTMLIxMenuAboutItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuAboutItemElement: {
        prototype: HTMLIxMenuAboutItemElement;
        new (): HTMLIxMenuAboutItemElement;
    };
    interface HTMLIxMenuAboutNewsElementEventMap {
        "showMore": MouseEvent;
        "closePopover": void;
    }
    interface HTMLIxMenuAboutNewsElement extends Components.IxMenuAboutNews, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuAboutNewsElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutNewsElement, ev: IxMenuAboutNewsCustomEvent<HTMLIxMenuAboutNewsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuAboutNewsElementEventMap>(type: K, listener: (this: HTMLIxMenuAboutNewsElement, ev: IxMenuAboutNewsCustomEvent<HTMLIxMenuAboutNewsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuAboutNewsElement: {
        prototype: HTMLIxMenuAboutNewsElement;
        new (): HTMLIxMenuAboutNewsElement;
    };
    interface HTMLIxMenuAvatarElementEventMap {
        "logoutClick": any;
    }
    interface HTMLIxMenuAvatarElement extends Components.IxMenuAvatar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuAvatarElementEventMap>(type: K, listener: (this: HTMLIxMenuAvatarElement, ev: IxMenuAvatarCustomEvent<HTMLIxMenuAvatarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuAvatarElementEventMap>(type: K, listener: (this: HTMLIxMenuAvatarElement, ev: IxMenuAvatarCustomEvent<HTMLIxMenuAvatarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuAvatarElement: {
        prototype: HTMLIxMenuAvatarElement;
        new (): HTMLIxMenuAvatarElement;
    };
    interface HTMLIxMenuAvatarItemElementEventMap {
        "itemClick": MouseEvent;
    }
    interface HTMLIxMenuAvatarItemElement extends Components.IxMenuAvatarItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuAvatarItemElementEventMap>(type: K, listener: (this: HTMLIxMenuAvatarItemElement, ev: IxMenuAvatarItemCustomEvent<HTMLIxMenuAvatarItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuAvatarItemElementEventMap>(type: K, listener: (this: HTMLIxMenuAvatarItemElement, ev: IxMenuAvatarItemCustomEvent<HTMLIxMenuAvatarItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuAvatarItemElement: {
        prototype: HTMLIxMenuAvatarItemElement;
        new (): HTMLIxMenuAvatarItemElement;
    };
    interface HTMLIxMenuCategoryElementEventMap {
        "closeOtherCategories": any;
    }
    interface HTMLIxMenuCategoryElement extends Components.IxMenuCategory, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuCategoryElementEventMap>(type: K, listener: (this: HTMLIxMenuCategoryElement, ev: IxMenuCategoryCustomEvent<HTMLIxMenuCategoryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuCategoryElementEventMap>(type: K, listener: (this: HTMLIxMenuCategoryElement, ev: IxMenuCategoryCustomEvent<HTMLIxMenuCategoryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuCategoryElement: {
        prototype: HTMLIxMenuCategoryElement;
        new (): HTMLIxMenuCategoryElement;
    };
    interface HTMLIxMenuExpandIconElement extends Components.IxMenuExpandIcon, HTMLStencilElement {
    }
    var HTMLIxMenuExpandIconElement: {
        prototype: HTMLIxMenuExpandIconElement;
        new (): HTMLIxMenuExpandIconElement;
    };
    interface HTMLIxMenuItemElement extends Components.IxMenuItem, HTMLStencilElement {
    }
    var HTMLIxMenuItemElement: {
        prototype: HTMLIxMenuItemElement;
        new (): HTMLIxMenuItemElement;
    };
    interface HTMLIxMenuSettingsElementEventMap {
        "tabChange": string;
        "close": CustomCloseEvent;
    }
    interface HTMLIxMenuSettingsElement extends Components.IxMenuSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuSettingsElementEventMap>(type: K, listener: (this: HTMLIxMenuSettingsElement, ev: IxMenuSettingsCustomEvent<HTMLIxMenuSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuSettingsElementEventMap>(type: K, listener: (this: HTMLIxMenuSettingsElement, ev: IxMenuSettingsCustomEvent<HTMLIxMenuSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuSettingsElement: {
        prototype: HTMLIxMenuSettingsElement;
        new (): HTMLIxMenuSettingsElement;
    };
    interface HTMLIxMenuSettingsItemElementEventMap {
        "labelChange": CustomLabelChangeEvent;
    }
    interface HTMLIxMenuSettingsItemElement extends Components.IxMenuSettingsItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMenuSettingsItemElementEventMap>(type: K, listener: (this: HTMLIxMenuSettingsItemElement, ev: IxMenuSettingsItemCustomEvent<HTMLIxMenuSettingsItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMenuSettingsItemElementEventMap>(type: K, listener: (this: HTMLIxMenuSettingsItemElement, ev: IxMenuSettingsItemCustomEvent<HTMLIxMenuSettingsItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMenuSettingsItemElement: {
        prototype: HTMLIxMenuSettingsItemElement;
        new (): HTMLIxMenuSettingsItemElement;
    };
    interface HTMLIxMessageBarElementEventMap {
        "closedChange": any;
        "closeAnimationCompleted": any;
    }
    interface HTMLIxMessageBarElement extends Components.IxMessageBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxMessageBarElementEventMap>(type: K, listener: (this: HTMLIxMessageBarElement, ev: IxMessageBarCustomEvent<HTMLIxMessageBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxMessageBarElementEventMap>(type: K, listener: (this: HTMLIxMessageBarElement, ev: IxMessageBarCustomEvent<HTMLIxMessageBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxMessageBarElement: {
        prototype: HTMLIxMessageBarElement;
        new (): HTMLIxMessageBarElement;
    };
    interface HTMLIxModalElementEventMap {
        "dialogClose": any;
        "dialogDismiss": any;
    }
    interface HTMLIxModalElement extends Components.IxModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxModalElementEventMap>(type: K, listener: (this: HTMLIxModalElement, ev: IxModalCustomEvent<HTMLIxModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxModalElementEventMap>(type: K, listener: (this: HTMLIxModalElement, ev: IxModalCustomEvent<HTMLIxModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxModalElement: {
        prototype: HTMLIxModalElement;
        new (): HTMLIxModalElement;
    };
    interface HTMLIxModalContentElement extends Components.IxModalContent, HTMLStencilElement {
    }
    var HTMLIxModalContentElement: {
        prototype: HTMLIxModalContentElement;
        new (): HTMLIxModalContentElement;
    };
    interface HTMLIxModalFooterElement extends Components.IxModalFooter, HTMLStencilElement {
    }
    var HTMLIxModalFooterElement: {
        prototype: HTMLIxModalFooterElement;
        new (): HTMLIxModalFooterElement;
    };
    interface HTMLIxModalHeaderElementEventMap {
        "closeClick": MouseEvent;
    }
    interface HTMLIxModalHeaderElement extends Components.IxModalHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxModalHeaderElementEventMap>(type: K, listener: (this: HTMLIxModalHeaderElement, ev: IxModalHeaderCustomEvent<HTMLIxModalHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxModalHeaderElementEventMap>(type: K, listener: (this: HTMLIxModalHeaderElement, ev: IxModalHeaderCustomEvent<HTMLIxModalHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxModalHeaderElement: {
        prototype: HTMLIxModalHeaderElement;
        new (): HTMLIxModalHeaderElement;
    };
    interface HTMLIxModalLoadingElement extends Components.IxModalLoading, HTMLStencilElement {
    }
    var HTMLIxModalLoadingElement: {
        prototype: HTMLIxModalLoadingElement;
        new (): HTMLIxModalLoadingElement;
    };
    interface HTMLIxNumberInputElementEventMap {
        "valueChange": number;
        "validityStateChange": ValidityState;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxNumberInputElement extends Components.IxNumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxNumberInputElementEventMap>(type: K, listener: (this: HTMLIxNumberInputElement, ev: IxNumberInputCustomEvent<HTMLIxNumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxNumberInputElementEventMap>(type: K, listener: (this: HTMLIxNumberInputElement, ev: IxNumberInputCustomEvent<HTMLIxNumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxNumberInputElement: {
        prototype: HTMLIxNumberInputElement;
        new (): HTMLIxNumberInputElement;
    };
    interface HTMLIxPaginationElementEventMap {
        "pageSelected": number;
        "itemCountChanged": number;
    }
    interface HTMLIxPaginationElement extends Components.IxPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxPaginationElementEventMap>(type: K, listener: (this: HTMLIxPaginationElement, ev: IxPaginationCustomEvent<HTMLIxPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxPaginationElementEventMap>(type: K, listener: (this: HTMLIxPaginationElement, ev: IxPaginationCustomEvent<HTMLIxPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxPaginationElement: {
        prototype: HTMLIxPaginationElement;
        new (): HTMLIxPaginationElement;
    };
    interface HTMLIxPaneElementEventMap {
        "expandedChanged": ExpandedChangedEvent;
        "variantChanged": VariantChangedEvent;
        "borderlessChanged": BorderlessChangedEvent;
        "hideOnCollapseChanged": HideOnCollapseChangedEvent;
        "slotChanged": SlotChangedEvent;
    }
    interface HTMLIxPaneElement extends Components.IxPane, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxPaneElementEventMap>(type: K, listener: (this: HTMLIxPaneElement, ev: IxPaneCustomEvent<HTMLIxPaneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxPaneElementEventMap>(type: K, listener: (this: HTMLIxPaneElement, ev: IxPaneCustomEvent<HTMLIxPaneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxPaneElement: {
        prototype: HTMLIxPaneElement;
        new (): HTMLIxPaneElement;
    };
    interface HTMLIxPaneLayoutElement extends Components.IxPaneLayout, HTMLStencilElement {
    }
    var HTMLIxPaneLayoutElement: {
        prototype: HTMLIxPaneLayoutElement;
        new (): HTMLIxPaneLayoutElement;
    };
    interface HTMLIxPillElement extends Components.IxPill, HTMLStencilElement {
    }
    var HTMLIxPillElement: {
        prototype: HTMLIxPillElement;
        new (): HTMLIxPillElement;
    };
    /**
     * @since 3.2.0
     */
    interface HTMLIxProgressIndicatorElement extends Components.IxProgressIndicator, HTMLStencilElement {
    }
    var HTMLIxProgressIndicatorElement: {
        prototype: HTMLIxProgressIndicatorElement;
        new (): HTMLIxProgressIndicatorElement;
    };
    interface HTMLIxPushCardElement extends Components.IxPushCard, HTMLStencilElement {
    }
    var HTMLIxPushCardElement: {
        prototype: HTMLIxPushCardElement;
        new (): HTMLIxPushCardElement;
    };
    interface HTMLIxRadioElementEventMap {
        "checkedChange": boolean;
        "valueChange": string;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxRadioElement extends Components.IxRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxRadioElementEventMap>(type: K, listener: (this: HTMLIxRadioElement, ev: IxRadioCustomEvent<HTMLIxRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxRadioElementEventMap>(type: K, listener: (this: HTMLIxRadioElement, ev: IxRadioCustomEvent<HTMLIxRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxRadioElement: {
        prototype: HTMLIxRadioElement;
        new (): HTMLIxRadioElement;
    };
    interface HTMLIxRadioGroupElementEventMap {
        "valueChange": string;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxRadioGroupElement extends Components.IxRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxRadioGroupElementEventMap>(type: K, listener: (this: HTMLIxRadioGroupElement, ev: IxRadioGroupCustomEvent<HTMLIxRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxRadioGroupElementEventMap>(type: K, listener: (this: HTMLIxRadioGroupElement, ev: IxRadioGroupCustomEvent<HTMLIxRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxRadioGroupElement: {
        prototype: HTMLIxRadioGroupElement;
        new (): HTMLIxRadioGroupElement;
    };
    interface HTMLIxRowElement extends Components.IxRow, HTMLStencilElement {
    }
    var HTMLIxRowElement: {
        prototype: HTMLIxRowElement;
        new (): HTMLIxRowElement;
    };
    interface HTMLIxSelectElementEventMap {
        "valueChange": string | string[];
        "inputChange": string;
        "addItem": string;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxSelectElement extends Components.IxSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxSelectElementEventMap>(type: K, listener: (this: HTMLIxSelectElement, ev: IxSelectCustomEvent<HTMLIxSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxSelectElementEventMap>(type: K, listener: (this: HTMLIxSelectElement, ev: IxSelectCustomEvent<HTMLIxSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxSelectElement: {
        prototype: HTMLIxSelectElement;
        new (): HTMLIxSelectElement;
    };
    interface HTMLIxSelectItemElementEventMap {
        "itemClick": string;
    }
    interface HTMLIxSelectItemElement extends Components.IxSelectItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxSelectItemElementEventMap>(type: K, listener: (this: HTMLIxSelectItemElement, ev: IxSelectItemCustomEvent<HTMLIxSelectItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxSelectItemElementEventMap>(type: K, listener: (this: HTMLIxSelectItemElement, ev: IxSelectItemCustomEvent<HTMLIxSelectItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxSelectItemElement: {
        prototype: HTMLIxSelectItemElement;
        new (): HTMLIxSelectItemElement;
    };
    interface HTMLIxSliderElementEventMap {
        "valueChange": number;
    }
    interface HTMLIxSliderElement extends Components.IxSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxSliderElementEventMap>(type: K, listener: (this: HTMLIxSliderElement, ev: IxSliderCustomEvent<HTMLIxSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxSliderElementEventMap>(type: K, listener: (this: HTMLIxSliderElement, ev: IxSliderCustomEvent<HTMLIxSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxSliderElement: {
        prototype: HTMLIxSliderElement;
        new (): HTMLIxSliderElement;
    };
    interface HTMLIxSpinnerElement extends Components.IxSpinner, HTMLStencilElement {
    }
    var HTMLIxSpinnerElement: {
        prototype: HTMLIxSpinnerElement;
        new (): HTMLIxSpinnerElement;
    };
    interface HTMLIxSplitButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLIxSplitButtonElement extends Components.IxSplitButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxSplitButtonElementEventMap>(type: K, listener: (this: HTMLIxSplitButtonElement, ev: IxSplitButtonCustomEvent<HTMLIxSplitButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxSplitButtonElementEventMap>(type: K, listener: (this: HTMLIxSplitButtonElement, ev: IxSplitButtonCustomEvent<HTMLIxSplitButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxSplitButtonElement: {
        prototype: HTMLIxSplitButtonElement;
        new (): HTMLIxSplitButtonElement;
    };
    interface HTMLIxTabItemElementEventMap {
        "tabClick": TabClickDetail;
    }
    interface HTMLIxTabItemElement extends Components.IxTabItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTabItemElementEventMap>(type: K, listener: (this: HTMLIxTabItemElement, ev: IxTabItemCustomEvent<HTMLIxTabItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTabItemElementEventMap>(type: K, listener: (this: HTMLIxTabItemElement, ev: IxTabItemCustomEvent<HTMLIxTabItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTabItemElement: {
        prototype: HTMLIxTabItemElement;
        new (): HTMLIxTabItemElement;
    };
    interface HTMLIxTabsElementEventMap {
        "selectedChange": number;
    }
    interface HTMLIxTabsElement extends Components.IxTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTabsElementEventMap>(type: K, listener: (this: HTMLIxTabsElement, ev: IxTabsCustomEvent<HTMLIxTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTabsElementEventMap>(type: K, listener: (this: HTMLIxTabsElement, ev: IxTabsCustomEvent<HTMLIxTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTabsElement: {
        prototype: HTMLIxTabsElement;
        new (): HTMLIxTabsElement;
    };
    interface HTMLIxTextareaElementEventMap {
        "valueChange": string;
        "validityStateChange": ValidityState;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxTextareaElement extends Components.IxTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTextareaElementEventMap>(type: K, listener: (this: HTMLIxTextareaElement, ev: IxTextareaCustomEvent<HTMLIxTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTextareaElementEventMap>(type: K, listener: (this: HTMLIxTextareaElement, ev: IxTextareaCustomEvent<HTMLIxTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTextareaElement: {
        prototype: HTMLIxTextareaElement;
        new (): HTMLIxTextareaElement;
    };
    interface HTMLIxTileElement extends Components.IxTile, HTMLStencilElement {
    }
    var HTMLIxTileElement: {
        prototype: HTMLIxTileElement;
        new (): HTMLIxTileElement;
    };
    interface HTMLIxTimeInputElementEventMap {
        "valueChange": string;
        "validityStateChange": TimeInputValidityState;
        "ixFocus": void;
        "ixBlur": void;
    }
    /**
     * @since 3.2.0
     * @form-ready 
     */
    interface HTMLIxTimeInputElement extends Components.IxTimeInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTimeInputElementEventMap>(type: K, listener: (this: HTMLIxTimeInputElement, ev: IxTimeInputCustomEvent<HTMLIxTimeInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTimeInputElementEventMap>(type: K, listener: (this: HTMLIxTimeInputElement, ev: IxTimeInputCustomEvent<HTMLIxTimeInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTimeInputElement: {
        prototype: HTMLIxTimeInputElement;
        new (): HTMLIxTimeInputElement;
    };
    interface HTMLIxTimePickerElementEventMap {
        "timeSelect": string;
        "timeChange": string;
    }
    interface HTMLIxTimePickerElement extends Components.IxTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTimePickerElementEventMap>(type: K, listener: (this: HTMLIxTimePickerElement, ev: IxTimePickerCustomEvent<HTMLIxTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTimePickerElementEventMap>(type: K, listener: (this: HTMLIxTimePickerElement, ev: IxTimePickerCustomEvent<HTMLIxTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTimePickerElement: {
        prototype: HTMLIxTimePickerElement;
        new (): HTMLIxTimePickerElement;
    };
    interface HTMLIxToastElementEventMap {
        "closeToast": any;
    }
    interface HTMLIxToastElement extends Components.IxToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxToastElementEventMap>(type: K, listener: (this: HTMLIxToastElement, ev: IxToastCustomEvent<HTMLIxToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxToastElementEventMap>(type: K, listener: (this: HTMLIxToastElement, ev: IxToastCustomEvent<HTMLIxToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxToastElement: {
        prototype: HTMLIxToastElement;
        new (): HTMLIxToastElement;
    };
    interface HTMLIxToastContainerElement extends Components.IxToastContainer, HTMLStencilElement {
    }
    var HTMLIxToastContainerElement: {
        prototype: HTMLIxToastContainerElement;
        new (): HTMLIxToastContainerElement;
    };
    interface HTMLIxToggleElementEventMap {
        "checkedChange": boolean;
        "valueChange": string;
        "ixBlur": void;
    }
    /**
     * @form-ready 
     */
    interface HTMLIxToggleElement extends Components.IxToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxToggleElementEventMap>(type: K, listener: (this: HTMLIxToggleElement, ev: IxToggleCustomEvent<HTMLIxToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxToggleElementEventMap>(type: K, listener: (this: HTMLIxToggleElement, ev: IxToggleCustomEvent<HTMLIxToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxToggleElement: {
        prototype: HTMLIxToggleElement;
        new (): HTMLIxToggleElement;
    };
    interface HTMLIxToggleButtonElementEventMap {
        "pressedChange": boolean;
    }
    interface HTMLIxToggleButtonElement extends Components.IxToggleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxToggleButtonElementEventMap>(type: K, listener: (this: HTMLIxToggleButtonElement, ev: IxToggleButtonCustomEvent<HTMLIxToggleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxToggleButtonElementEventMap>(type: K, listener: (this: HTMLIxToggleButtonElement, ev: IxToggleButtonCustomEvent<HTMLIxToggleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxToggleButtonElement: {
        prototype: HTMLIxToggleButtonElement;
        new (): HTMLIxToggleButtonElement;
    };
    interface HTMLIxTooltipElement extends Components.IxTooltip, HTMLStencilElement {
    }
    var HTMLIxTooltipElement: {
        prototype: HTMLIxTooltipElement;
        new (): HTMLIxTooltipElement;
    };
    interface HTMLIxTreeElementEventMap {
        "contextChange": TreeContext;
        "nodeToggled": { id: string; isExpanded: boolean };
        "nodeClicked": string;
        "nodeRemoved": any;
    }
    interface HTMLIxTreeElement extends Components.IxTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTreeElementEventMap>(type: K, listener: (this: HTMLIxTreeElement, ev: IxTreeCustomEvent<HTMLIxTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTreeElementEventMap>(type: K, listener: (this: HTMLIxTreeElement, ev: IxTreeCustomEvent<HTMLIxTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTreeElement: {
        prototype: HTMLIxTreeElement;
        new (): HTMLIxTreeElement;
    };
    interface HTMLIxTreeItemElementEventMap {
        "toggle": void;
        "itemClick": void;
    }
    interface HTMLIxTreeItemElement extends Components.IxTreeItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxTreeItemElementEventMap>(type: K, listener: (this: HTMLIxTreeItemElement, ev: IxTreeItemCustomEvent<HTMLIxTreeItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxTreeItemElementEventMap>(type: K, listener: (this: HTMLIxTreeItemElement, ev: IxTreeItemCustomEvent<HTMLIxTreeItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxTreeItemElement: {
        prototype: HTMLIxTreeItemElement;
        new (): HTMLIxTreeItemElement;
    };
    interface HTMLIxTypographyElement extends Components.IxTypography, HTMLStencilElement {
    }
    var HTMLIxTypographyElement: {
        prototype: HTMLIxTypographyElement;
        new (): HTMLIxTypographyElement;
    };
    interface HTMLIxUploadElementEventMap {
        "filesChanged": Array<File>;
    }
    interface HTMLIxUploadElement extends Components.IxUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxUploadElementEventMap>(type: K, listener: (this: HTMLIxUploadElement, ev: IxUploadCustomEvent<HTMLIxUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxUploadElementEventMap>(type: K, listener: (this: HTMLIxUploadElement, ev: IxUploadCustomEvent<HTMLIxUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxUploadElement: {
        prototype: HTMLIxUploadElement;
        new (): HTMLIxUploadElement;
    };
    /**
     * @deprecated Will be removed with 4.0.0
     */
    interface HTMLIxValidationTooltipElement extends Components.IxValidationTooltip, HTMLStencilElement {
    }
    var HTMLIxValidationTooltipElement: {
        prototype: HTMLIxValidationTooltipElement;
        new (): HTMLIxValidationTooltipElement;
    };
    interface HTMLIxWorkflowStepElementEventMap {
        "selectedChanged": HTMLIxWorkflowStepElement;
    }
    interface HTMLIxWorkflowStepElement extends Components.IxWorkflowStep, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxWorkflowStepElementEventMap>(type: K, listener: (this: HTMLIxWorkflowStepElement, ev: IxWorkflowStepCustomEvent<HTMLIxWorkflowStepElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxWorkflowStepElementEventMap>(type: K, listener: (this: HTMLIxWorkflowStepElement, ev: IxWorkflowStepCustomEvent<HTMLIxWorkflowStepElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxWorkflowStepElement: {
        prototype: HTMLIxWorkflowStepElement;
        new (): HTMLIxWorkflowStepElement;
    };
    interface HTMLIxWorkflowStepsElementEventMap {
        "stepSelected": number;
    }
    interface HTMLIxWorkflowStepsElement extends Components.IxWorkflowSteps, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIxWorkflowStepsElementEventMap>(type: K, listener: (this: HTMLIxWorkflowStepsElement, ev: IxWorkflowStepsCustomEvent<HTMLIxWorkflowStepsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIxWorkflowStepsElementEventMap>(type: K, listener: (this: HTMLIxWorkflowStepsElement, ev: IxWorkflowStepsCustomEvent<HTMLIxWorkflowStepsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIxWorkflowStepsElement: {
        prototype: HTMLIxWorkflowStepsElement;
        new (): HTMLIxWorkflowStepsElement;
    };
    interface HTMLElementTagNameMap {
        "ix-action-card": HTMLIxActionCardElement;
        "ix-application": HTMLIxApplicationElement;
        "ix-application-header": HTMLIxApplicationHeaderElement;
        "ix-application-sidebar": HTMLIxApplicationSidebarElement;
        "ix-application-switch-modal": HTMLIxApplicationSwitchModalElement;
        "ix-avatar": HTMLIxAvatarElement;
        "ix-basic-navigation": HTMLIxBasicNavigationElement;
        "ix-blind": HTMLIxBlindElement;
        "ix-breadcrumb": HTMLIxBreadcrumbElement;
        "ix-breadcrumb-item": HTMLIxBreadcrumbItemElement;
        "ix-button": HTMLIxButtonElement;
        "ix-card": HTMLIxCardElement;
        "ix-card-accordion": HTMLIxCardAccordionElement;
        "ix-card-content": HTMLIxCardContentElement;
        "ix-card-list": HTMLIxCardListElement;
        "ix-card-title": HTMLIxCardTitleElement;
        "ix-category-filter": HTMLIxCategoryFilterElement;
        "ix-checkbox": HTMLIxCheckboxElement;
        "ix-checkbox-group": HTMLIxCheckboxGroupElement;
        "ix-chip": HTMLIxChipElement;
        "ix-col": HTMLIxColElement;
        "ix-content": HTMLIxContentElement;
        "ix-content-header": HTMLIxContentHeaderElement;
        "ix-css-grid": HTMLIxCssGridElement;
        "ix-css-grid-item": HTMLIxCssGridItemElement;
        "ix-custom-field": HTMLIxCustomFieldElement;
        "ix-date-dropdown": HTMLIxDateDropdownElement;
        "ix-date-input": HTMLIxDateInputElement;
        "ix-date-picker": HTMLIxDatePickerElement;
        "ix-date-time-card": HTMLIxDateTimeCardElement;
        "ix-datetime-picker": HTMLIxDatetimePickerElement;
        "ix-divider": HTMLIxDividerElement;
        "ix-drawer": HTMLIxDrawerElement;
        "ix-dropdown": HTMLIxDropdownElement;
        "ix-dropdown-button": HTMLIxDropdownButtonElement;
        "ix-dropdown-header": HTMLIxDropdownHeaderElement;
        "ix-dropdown-item": HTMLIxDropdownItemElement;
        "ix-dropdown-quick-actions": HTMLIxDropdownQuickActionsElement;
        "ix-empty-state": HTMLIxEmptyStateElement;
        "ix-event-list": HTMLIxEventListElement;
        "ix-event-list-item": HTMLIxEventListItemElement;
        "ix-expanding-search": HTMLIxExpandingSearchElement;
        "ix-field-label": HTMLIxFieldLabelElement;
        "ix-field-wrapper": HTMLIxFieldWrapperElement;
        "ix-filter-chip": HTMLIxFilterChipElement;
        "ix-flip-tile": HTMLIxFlipTileElement;
        "ix-flip-tile-content": HTMLIxFlipTileContentElement;
        "ix-group": HTMLIxGroupElement;
        "ix-group-context-menu": HTMLIxGroupContextMenuElement;
        "ix-group-item": HTMLIxGroupItemElement;
        "ix-helper-text": HTMLIxHelperTextElement;
        "ix-icon-button": HTMLIxIconButtonElement;
        "ix-icon-toggle-button": HTMLIxIconToggleButtonElement;
        "ix-input": HTMLIxInputElement;
        "ix-input-group": HTMLIxInputGroupElement;
        "ix-key-value": HTMLIxKeyValueElement;
        "ix-key-value-list": HTMLIxKeyValueListElement;
        "ix-kpi": HTMLIxKpiElement;
        "ix-layout-auto": HTMLIxLayoutAutoElement;
        "ix-layout-grid": HTMLIxLayoutGridElement;
        "ix-link-button": HTMLIxLinkButtonElement;
        "ix-map-navigation": HTMLIxMapNavigationElement;
        "ix-map-navigation-overlay": HTMLIxMapNavigationOverlayElement;
        "ix-menu": HTMLIxMenuElement;
        "ix-menu-about": HTMLIxMenuAboutElement;
        "ix-menu-about-item": HTMLIxMenuAboutItemElement;
        "ix-menu-about-news": HTMLIxMenuAboutNewsElement;
        "ix-menu-avatar": HTMLIxMenuAvatarElement;
        "ix-menu-avatar-item": HTMLIxMenuAvatarItemElement;
        "ix-menu-category": HTMLIxMenuCategoryElement;
        "ix-menu-expand-icon": HTMLIxMenuExpandIconElement;
        "ix-menu-item": HTMLIxMenuItemElement;
        "ix-menu-settings": HTMLIxMenuSettingsElement;
        "ix-menu-settings-item": HTMLIxMenuSettingsItemElement;
        "ix-message-bar": HTMLIxMessageBarElement;
        "ix-modal": HTMLIxModalElement;
        "ix-modal-content": HTMLIxModalContentElement;
        "ix-modal-footer": HTMLIxModalFooterElement;
        "ix-modal-header": HTMLIxModalHeaderElement;
        "ix-modal-loading": HTMLIxModalLoadingElement;
        "ix-number-input": HTMLIxNumberInputElement;
        "ix-pagination": HTMLIxPaginationElement;
        "ix-pane": HTMLIxPaneElement;
        "ix-pane-layout": HTMLIxPaneLayoutElement;
        "ix-pill": HTMLIxPillElement;
        "ix-progress-indicator": HTMLIxProgressIndicatorElement;
        "ix-push-card": HTMLIxPushCardElement;
        "ix-radio": HTMLIxRadioElement;
        "ix-radio-group": HTMLIxRadioGroupElement;
        "ix-row": HTMLIxRowElement;
        "ix-select": HTMLIxSelectElement;
        "ix-select-item": HTMLIxSelectItemElement;
        "ix-slider": HTMLIxSliderElement;
        "ix-spinner": HTMLIxSpinnerElement;
        "ix-split-button": HTMLIxSplitButtonElement;
        "ix-tab-item": HTMLIxTabItemElement;
        "ix-tabs": HTMLIxTabsElement;
        "ix-textarea": HTMLIxTextareaElement;
        "ix-tile": HTMLIxTileElement;
        "ix-time-input": HTMLIxTimeInputElement;
        "ix-time-picker": HTMLIxTimePickerElement;
        "ix-toast": HTMLIxToastElement;
        "ix-toast-container": HTMLIxToastContainerElement;
        "ix-toggle": HTMLIxToggleElement;
        "ix-toggle-button": HTMLIxToggleButtonElement;
        "ix-tooltip": HTMLIxTooltipElement;
        "ix-tree": HTMLIxTreeElement;
        "ix-tree-item": HTMLIxTreeItemElement;
        "ix-typography": HTMLIxTypographyElement;
        "ix-upload": HTMLIxUploadElement;
        "ix-validation-tooltip": HTMLIxValidationTooltipElement;
        "ix-workflow-step": HTMLIxWorkflowStepElement;
        "ix-workflow-steps": HTMLIxWorkflowStepsElement;
    }
}
declare namespace LocalJSX {
    interface IxActionCard {
        /**
          * Card heading
         */
        "heading"?: string;
        /**
          * Card icon
          * @default undefined
         */
        "icon"?: string | undefined;
        /**
          * Card selection
          * @default false
         */
        "selected"?: boolean;
        /**
          * Card subheading
         */
        "subheading"?: string;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant"?: ActionCardVariant;
    }
    interface IxApplication {
        /**
          * Define application switch configuration
         */
        "appSwitchConfig"?: AppSwitchConfiguration;
        /**
          * Supported layouts
          * @default ['sm', 'md', 'lg']
         */
        "breakpoints"?: Breakpoint[];
        /**
          * Change the responsive layout of the menu structure
         */
        "forceBreakpoint"?: Breakpoint | undefined;
        /**
          * Application theme
         */
        "theme"?: IxTheme;
        /**
          * Use the system appearance dark or light
          * @default false
         */
        "themeSystemAppearance"?: boolean;
    }
    interface IxApplicationHeader {
        /**
          * Application name
         */
        "name"?: string;
        /**
          * Event emitted when the menu toggle button is clicked
         */
        "onMenuToggle"?: (event: IxApplicationHeaderCustomEvent<boolean>) => void;
        /**
          * Event emitted when the app switch button is clicked
          * @since 3.0.0
         */
        "onOpenAppSwitch"?: (event: IxApplicationHeaderCustomEvent<void>) => void;
        /**
          * Controls the visibility of the menu toggle button based on the context of the application header.  When the application header is utilized outside the application frame, the menu toggle button is displayed. Conversely, if the header is within the application frame, this property is ineffective.
          * @default false
         */
        "showMenu"?: boolean;
    }
    interface IxApplicationSidebar {
    }
    interface IxApplicationSwitchModal {
        "config"?: AppSwitchConfiguration;
    }
    interface IxAvatar {
        /**
          * Optional description text that will be displayed underneath the username. Note: Only working if avatar is part of the ix-application-header
         */
        "extra"?: string;
        /**
          * Display an avatar image
         */
        "image"?: string;
        /**
          * Display the initials of the user. Will be overwritten by image
         */
        "initials"?: string;
        /**
          * If set an info card displaying the username will be placed inside the dropdown. Note: Only working if avatar is part of the ix-application-header
         */
        "username"?: string;
    }
    interface IxBasicNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Supported layouts
          * @example ['sm', 'md']
          * @default ['sm', 'md', 'lg']
         */
        "breakpoints"?: Breakpoint[];
        /**
          * Change the responsive layout of the menu structure
         */
        "forceBreakpoint"?: Breakpoint | undefined;
        /**
          * Hide application header. Will disable responsive feature of basic navigation.
          * @default false
         */
        "hideHeader"?: boolean;
    }
    interface IxBlind {
        /**
          * Collapsed state
          * @default false
         */
        "collapsed"?: boolean;
        /**
          * Optional icon to be displayed next to the header label
         */
        "icon"?: string;
        /**
          * Label of blind
         */
        "label"?: string;
        /**
          * Collapsed state changed
         */
        "onCollapsedChange"?: (event: IxBlindCustomEvent<boolean>) => void;
        /**
          * Secondary label inside blind header
         */
        "sublabel"?: string;
        /**
          * Blind variant
          * @default 'filled'
         */
        "variant"?: BlindVariant;
    }
    interface IxBreadcrumb {
        /**
          * Accessibility label for the dropdown button (ellipsis icon) used to access the dropdown list with conditionally hidden previous items
          * @default 'previous'
         */
        "ariaLabelPreviousButton"?: string;
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
          * @default true
         */
        "ghost"?: boolean;
        /**
          * Items will be accessible through a dropdown
          * @default []
         */
        "nextItems"?: string[];
        /**
          * Crumb item clicked event
         */
        "onItemClick"?: (event: IxBreadcrumbCustomEvent<string>) => void;
        /**
          * Next item clicked event
         */
        "onNextClick"?: (event: IxBreadcrumbCustomEvent<{ event: UIEvent; item: string }>) => void;
        /**
          * Excess items will get hidden inside of dropdown
          * @default 9
         */
        "visibleItemCount"?: number;
    }
    interface IxBreadcrumbItem {
        /**
          * @default true
         */
        "ghost"?: boolean;
        /**
          * Icon to be displayed next ot the label
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isDropdownTrigger"?: boolean;
        /**
          * Breadcrumb label
         */
        "label"?: string;
        "onItemClick"?: (event: IxBreadcrumbItemCustomEvent<string>) => void;
        /**
          * @default true
         */
        "showChevron"?: boolean;
        /**
          * @default true
         */
        "visible"?: boolean;
    }
    interface IxButton {
        /**
          * @default 'center'
         */
        "alignment"?: 'center' | 'start';
        /**
          * Disable the button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Provide a form element ID to automatically submit the from if the button is pressed. Only works in combination with type="submit".
          * @since 3.1.0
         */
        "form"?: string;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * @default '24'
         */
        "iconSize"?: '12' | '16' | '24';
        /**
          * Loading button
          * @default false
         */
        "loading"?: boolean;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * Type of the button
          * @default 'button'
         */
        "type"?: 'button' | 'submit';
        /**
          * Button variant
          * @default 'primary'
         */
        "variant"?: ButtonVariant;
    }
    interface IxCard {
        /**
          * Show card in selected state
          * @default false
         */
        "selected"?: boolean;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant"?: CardVariant;
    }
    interface IxCardAccordion {
        /**
          * Collapse the card
          * @default false
         */
        "collapse"?: boolean;
        "onAccordionExpand"?: (event: IxCardAccordionCustomEvent<CardAccordionExpandChangeEvent>) => void;
    }
    interface IxCardContent {
    }
    interface IxCardList {
        /**
          * Collapse the list
          * @default false
         */
        "collapse"?: boolean;
        /**
          * Hide the show all button
          * @default false
         */
        "hideShowAll"?: boolean;
        /**
          * i18n More cards available
          * @default 'There are more cards available'
         */
        "i18nMoreCards"?: string;
        /**
          * i18n Show all button
          * @default 'Show all'
         */
        "i18nShowAll"?: string;
        /**
          * Name the card list
         */
        "label"?: string;
        /**
          * List style
          * @default 'stack'
         */
        "listStyle"?: 'stack' | 'scroll';
        /**
          * Maximal visible cards
          * @default 12
         */
        "maxVisibleCards"?: number;
        /**
          * Fire event when the collapse state is changed by the user
         */
        "onCollapseChanged"?: (event: IxCardListCustomEvent<boolean>) => void;
        /**
          * Fire event when the collapse state is changed by the user
         */
        "onShowAllClick"?: (event: IxCardListCustomEvent<{
    nativeEvent: MouseEvent;
  }>) => void;
        /**
          * Fire event when the show more card is clicked.
         */
        "onShowMoreCardClick"?: (event: IxCardListCustomEvent<{
    nativeEvent: MouseEvent;
  }>) => void;
        /**
          * Overwrite the default show all count.
         */
        "showAllCount"?: number;
        /**
          * Suppress the overflow handling of child elements
          * @default false
         */
        "suppressOverflowHandling"?: boolean;
    }
    interface IxCardTitle {
    }
    interface IxCategoryFilter {
        /**
          * Configuration object hash used to populate the dropdown menu for type-ahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories"?: {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * If true the filter will be in disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState"?: FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
          * @default false
         */
        "hideIcon"?: boolean;
        /**
          * i18n
          * @default 'Filter by text'
         */
        "i18nPlainText"?: string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon"?: string;
        /**
          * i18n
          * @default 'Categories'
         */
        "labelCategories"?: string;
        /**
          * In certain use cases some categories may not be available for selection anymore. To allow proper display of set filters with these categories this ID to label mapping can be populated.  Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
          * @default {}
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Event dispatched whenever a category gets selected in the dropdown
         */
        "onCategoryChanged"?: (event: IxCategoryFilterCustomEvent<string>) => void;
        /**
          * Event dispatched whenever the filter state changes.
         */
        "onFilterChanged"?: (event: IxCategoryFilterCustomEvent<FilterState>) => void;
        /**
          * Event dispatched whenever the filter gets cleared.
         */
        "onFilterCleared"?: (event: IxCategoryFilterCustomEvent<void>) => void;
        /**
          * Event dispatched whenever the text input changes.
         */
        "onInputChanged"?: (event: IxCategoryFilterCustomEvent<InputState>) => void;
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder"?: string;
        /**
          * If true the filter will be in readonly mode
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If set to true, allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
          * @default true
         */
        "repeatCategories"?: boolean;
        /**
          * If set categories will always be filtered via the respective logical operator. Toggling of the operator will not be available to the user.
         */
        "staticOperator"?: LogicalFilterOperator;
        /**
          * A list of strings that will be supplied as type-ahead suggestions not tied to any categories.
         */
        "suggestions"?: string[];
        /**
          * @default true
         */
        "tmpDisableScrollIntoView"?: boolean;
    }
    /**
     * @form-ready 
     */
    interface IxCheckbox {
        /**
          * Checked state of the checkbox component
          * @default false
         */
        "checked"?: boolean;
        /**
          * Disabled state of the checkbox component
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Indeterminate state of the checkbox component
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * Label for the checkbox component
         */
        "label"?: string;
        /**
          * Name of the checkbox component
         */
        "name"?: string;
        /**
          * Event emitted when the checked state of the checkbox changes
         */
        "onCheckedChange"?: (event: IxCheckboxCustomEvent<boolean>) => void;
        /**
          * Event emitted when the checkbox is blurred
         */
        "onIxBlur"?: (event: IxCheckboxCustomEvent<void>) => void;
        /**
          * Event emitted when the value of the checkbox changes
         */
        "onValueChange"?: (event: IxCheckboxCustomEvent<string>) => void;
        /**
          * Required state of the checkbox component.  If true, checkbox needs to be checked to be valid
          * @default false
         */
        "required"?: boolean;
        /**
          * Value of the checkbox component
          * @default 'on'
         */
        "value"?: string;
    }
    /**
     * @form-ready 
     */
    interface IxCheckboxGroup {
        /**
          * Alignment of the checkboxes in the group
          * @default 'column'
         */
        "direction"?: 'row' | 'column';
        /**
          * Optional helper text displayed below the checkbox group
         */
        "helperText"?: string;
        /**
          * Info text for the checkbox group
         */
        "infoText"?: string;
        /**
          * Error text for the checkbox group
         */
        "invalidText"?: string;
        /**
          * Label for the checkbox group
         */
        "label"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
          * @default false
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the checkbox group
         */
        "validText"?: string;
        /**
          * Warning text for the checkbox group
         */
        "warningText"?: string;
    }
    interface IxChip {
        /**
          * Determines if the chip is interactive. If false no user input (e.g. mouse states, keyboard navigation) will be possible and also the close button will not be present.
          * @default true
         */
        "active"?: boolean;
        /**
          * Custom background color. Only has an effect on chips with `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Center the content of the chip. Set to false to disable centering.
          * @since 3.2.0
          * @default false
         */
        "centerContent"?: boolean;
        /**
          * Custom font and icon color. Only has an effect on chips with `variant='custom'`
         */
        "chipColor"?: string | undefined;
        /**
          * Show close icon
          * @default false
         */
        "closable"?: boolean;
        /**
          * Show icon
         */
        "icon"?: string;
        /**
          * Fire event if close button is clicked
         */
        "onCloseChip"?: (event: IxChipCustomEvent<any>) => void;
        /**
          * Show chip with outline style
          * @default false
         */
        "outline"?: boolean;
        /**
          * Display a tooltip. By default, no tooltip will be displayed. Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.
          * @since 3.0.0
          * @default false
         */
        "tooltipText"?: string | boolean;
        /**
          * Chip variant
          * @default 'primary'
         */
        "variant"?: | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    interface IxCol {
        /**
          * Size of the column
         */
        "size"?: ColumnSize;
        /**
          * Size of the column for lg screens
         */
        "sizeLg"?: ColumnSize;
        /**
          * Size of the column for md screens
         */
        "sizeMd"?: ColumnSize;
        /**
          * Size of the column for sm screens
         */
        "sizeSm"?: ColumnSize;
    }
    interface IxContent {
    }
    interface IxContentHeader {
        /**
          * Display a back button
          * @default false
         */
        "hasBackButton"?: boolean;
        /**
          * Subtitle of Header
          * @default undefined
         */
        "headerSubtitle"?: string | undefined;
        /**
          * Title of Header
         */
        "headerTitle"?: string;
        /**
          * Triggered when back button is clicked
         */
        "onBackButtonClick"?: (event: IxContentHeaderCustomEvent<void>) => void;
        /**
          * Variant of content header
          * @default 'primary'
         */
        "variant"?: ContentHeaderVariant;
    }
    interface IxCssGrid {
        /**
          * Define css grid template
         */
        "templates"?: Partial<Record<CssGridTemplateType, string[][]>>;
    }
    interface IxCssGridItem {
        /**
          * Grid item name
         */
        "itemName": string;
    }
    interface IxCustomField {
        /**
          * Show text below the field component which show additional information
         */
        "helperText"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * A value is required or must be checked for the form to be submittable
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxDateDropdown {
        /**
          * Controls whether the user is allowed to pick custom date ranges in the component. When set to 'true', the user can select a custom date range using the date picker. When set to 'false', only predefined time date ranges are available for selection.
          * @default true
         */
        "customRangeAllowed"?: boolean;
        /**
          * Used to set the initial select date range as well as the button name, if not set or no according date range label is found, nothing will be selected
          * @default 'custom'
         */
        "dateRangeId"?: string;
        /**
          * An array of predefined date range options for the date picker. Each option is an object with a label describing the range and a function that returns the start and end dates of the range as a DateRangeOption object.  Example format:   {     id: 'some unique id',     label: 'Name of the range',     from: undefined, to: '2023/03/29'   },   // ... other predefined date range options ...
          * @default []
         */
        "dateRangeOptions"?: DateDropdownOption[];
        /**
          * Disable the button that opens the dropdown containing the date picker.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Date format string. See
          * @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format"?: string;
        /**
          * Picker date. If the picker is in range mode this property is the start date. If set to `null` no default start date will be pre-selected.  Format is based on `format`
          * @default ''
         */
        "from"?: string;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Text for custom dropdown item. Will be used for translation.
          * @default 'Custom...'
         */
        "i18nCustomItem"?: string;
        /**
          * Text for the done button. Will be used for translation.
          * @default 'Done'
         */
        "i18nDone"?: string;
        /**
          * Text for the done button. Will be used for translation.
          * @default 'No range set'
         */
        "i18nNoRange"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading"?: boolean;
        /**
          * Locale identifier (e.g. 'en' or 'de').
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "minDate"?: string;
        /**
          * EventEmitter for date range change events.  This event is emitted when the date range changes within the component. The event payload contains information about the selected date range.
         */
        "onDateRangeChange"?: (event: IxDateDropdownCustomEvent<DateRangeChangeEvent>) => void;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * If true a range of dates can be selected.
          * @default true
         */
        "range"?: boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * Picker date. If the picker is in range mode this property is the end date. If the picker is not in range mode leave this value `null`  Format is based on `format`
          * @default ''
         */
        "to"?: string;
        /**
          * @default DateTime.now().toISO()
         */
        "today"?: string;
        /**
          * Button variant
          * @default 'primary'
         */
        "variant"?: ButtonVariant1;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex"?: number;
    }
    /**
     * @form-ready 
     */
    interface IxDateInput {
        /**
          * Disabled attribute
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format"?: string;
        /**
          * Helper text below the input field
         */
        "helperText"?: string;
        /**
          * I18n string for the error message when the date is not parsable
          * @default 'Date is not valid'
         */
        "i18nErrorDateUnparsable"?: string;
        /**
          * Info text below the input field
         */
        "infoText"?: string;
        /**
          * Error text below the input field
         */
        "invalidText"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Locale identifier (e.g. 'en' or 'de').
         */
        "locale"?: string;
        /**
          * Name of the input element
         */
        "name"?: string;
        "onIxBlur"?: (event: IxDateInputCustomEvent<void>) => void;
        "onIxFocus"?: (event: IxDateInputCustomEvent<void>) => void;
        /**
          * Validation state change event.
         */
        "onValidityStateChange"?: (event: IxDateInputCustomEvent<DateInputValidityState>) => void;
        /**
          * Input change event.
         */
        "onValueChange"?: (event: IxDateInputCustomEvent<string | undefined>) => void;
        /**
          * Placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Readonly attribute
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * Show text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * Valid text below the input field
         */
        "validText"?: string;
        /**
          * Value of the input element
          * @default ''
         */
        "value"?: string;
        /**
          * Warning text below the input field
         */
        "warningText"?: string;
    }
    interface IxDatePicker {
        /**
          * Corner style
          * @default 'rounded'
         */
        "corners"?: DateTimeCardCorners;
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "format"?: string;
        /**
          * The selected starting date. If the date-picker-rework is not in range mode this is the selected date. Format has to match the `format` property.
         */
        "from"?: string | undefined;
        /**
          * Text of date select button
          * @default 'Done'
         */
        "i18nDone"?: string;
        /**
          * Locale identifier (e.g. 'en' or 'de'). The locale is used to translate the labels for weekdays and months. When the locale changes, the weekday labels are rotated according to the `weekStartIndex`. It does not affect the values returned by methods and events.
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
          * @default ''
         */
        "minDate"?: string;
        /**
          * Emitted when the date selection changes. The `DateChangeEvent` contains `from` and `to` properties. The property strings are formatted according to the `format` property and not affected by the `locale` property. The locale applied is always `en-US`. Note: Since 2.0.0 `dateChange` does not dispatch detail property as `string`
         */
        "onDateChange"?: (event: IxDatePickerCustomEvent<DateChangeEvent>) => void;
        /**
          * Emitted when the date range selection changes and the component is in range mode. The `DateChangeEvent` contains `from` and `to` properties. The property strings are formatted according to the `format` property and not affected by the `locale` property. The locale applied is always `en-US`.
         */
        "onDateRangeChange"?: (event: IxDatePickerCustomEvent<DateChangeEvent>) => void;
        /**
          * Emitted when the selection is confirmed via the date select button. The `DateChangeEvent` contains `from` and `to` properties. The property strings are formatted according to the `format` property and not affected by the `locale` property. The locale applied is always `en-US`.
         */
        "onDateSelect"?: (event: IxDatePickerCustomEvent<DateChangeEvent>) => void;
        /**
          * If true a date-range can be selected (from/to).
          * @default true
         */
        "range"?: boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * @default true
         */
        "standaloneAppearance"?: boolean;
        /**
          * The selected end date. If the the date-picker-rework is not in range mode this property has no impact. Format has to match the `format` property.
         */
        "to"?: string | undefined;
        /**
          * @default DateTime.now().toISO()
         */
        "today"?: string;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex"?: number;
    }
    interface IxDateTimeCard {
        /**
          * Set corners style
          * @default 'rounded'
         */
        "corners"?: DateTimeCardCorners;
        /**
          * Display footer
          * @default false
         */
        "hasFooter"?: boolean;
        /**
          * Hide header
          * @default false
         */
        "hideHeader"?: boolean;
        /**
          * set styles
          * @default true
         */
        "individual"?: boolean;
        "standaloneAppearance"?: boolean;
        /**
          * Timepicker specific styling
          * @default false
         */
        "timePickerAppearance"?: boolean;
    }
    interface IxDatetimePicker {
        /**
          * Date format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'yyyy/LL/dd'
         */
        "dateFormat"?: string;
        /**
          * The selected starting date. If the picker is not in range mode this is the selected date. Format has to match the `format` property.
         */
        "from"?: string;
        /**
          * Text of date select button
          * @default 'Done'
         */
        "i18nDone"?: string;
        /**
          * Top label of time picker
          * @since 3.0.0
          * @default 'Time'
         */
        "i18nTime"?: string;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
         */
        "locale"?: string;
        /**
          * The latest date that can be selected by the date picker. If not set there will be no restriction.
         */
        "maxDate"?: string;
        /**
          * The earliest date that can be selected by the date picker. If not set there will be no restriction.
         */
        "minDate"?: string;
        /**
          * Date change
         */
        "onDateChange"?: (event: IxDatetimePickerCustomEvent<DateTimeDateChangeEvent>) => void;
        /**
          * Datetime selection event is fired after confirm button is pressed
         */
        "onDateSelect"?: (event: IxDatetimePickerCustomEvent<DateTimeSelectEvent>) => void;
        /**
          * Time change
         */
        "onTimeChange"?: (event: IxDatetimePickerCustomEvent<string>) => void;
        /**
          * If true a date-range can be selected (from/to).
          * @default true
         */
        "range"?: boolean;
        /**
          * Show hour input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showHour"?: boolean;
        /**
          * Show minutes input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showMinutes"?: boolean;
        /**
          * Show seconds input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showSeconds"?: boolean;
        /**
          * Show time reference input Time reference is default aligned with
          * @see { this.timeFormat}
          * @default false
         */
        "showTimeReference"?: boolean;
        /**
          * Shows week numbers displayed on the left side of the date picker
          * @since 3.0.0
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * Select time with format string
         */
        "time"?: string;
        /**
          * Time format string. See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'HH:mm:ss'
         */
        "timeFormat"?: string;
        /**
          * Set time reference
         */
        "timeReference"?: 'AM' | 'PM';
        /**
          * The selected end date. If the the picker is not in range mode this property has no impact. Format has to match the `format` property.
         */
        "to"?: string;
        /**
          * The index of which day to start the week on, based on the Locale#weekdays array. E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.
          * @default 0
         */
        "weekStartIndex"?: number;
    }
    interface IxDivider {
    }
    interface IxDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
          * @default true
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Render the drawer with maximum height
          * @default false
         */
        "fullHeight"?: boolean;
        /**
          * Max width interpreted as REM
          * @default 28
         */
        "maxWidth"?: number;
        /**
          * Min width interpreted as REM
          * @default 16
         */
        "minWidth"?: number;
        /**
          * Fire event after drawer is close
         */
        "onDrawerClose"?: (event: IxDrawerCustomEvent<any>) => void;
        /**
          * Fire event after drawer is open
         */
        "onOpen"?: (event: IxDrawerCustomEvent<any>) => void;
        /**
          * Show or hide the drawer
          * @default false
         */
        "show"?: boolean;
        /**
          * Width interpreted as REM if not set to 'auto'
          * @default this.minWidth
         */
        "width"?: number | 'auto';
    }
    interface IxDropdown {
        /**
          * Define an anchor element
         */
        "anchor"?: ElementReference;
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown. If the dropdown is a child of another one, it will be closed with the parent, regardless of its own close behavior.
          * @default 'both'
         */
        "closeBehavior"?: CloseBehavior;
        /**
          * @default false
         */
        "discoverAllSubmenus"?: boolean;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * @default false
         */
        "ignoreRelatedSubmenu"?: boolean;
        /**
          * Move dropdown along main axis of alignment
         */
        "offset"?: {
    mainAxis?: number;
    crossAxis?: number;
    alignmentAxis?: number;
  };
        /**
          * Fire event after visibility of dropdown has changed
         */
        "onShowChanged"?: (event: IxDropdownCustomEvent<boolean>) => void;
        "overwriteDropdownStyle"?: (delegate: {
    dropdownRef: HTMLElement;
    triggerRef?: HTMLElement;
  }) => Promise<Partial<CSSStyleDeclaration>>;
        /**
          * Placement of the dropdown
          * @default 'bottom-start'
         */
        "placement"?: AlignedPlacement;
        /**
          * Position strategy
          * @default 'fixed'
         */
        "positioningStrategy"?: 'absolute' | 'fixed';
        /**
          * Show dropdown
          * @default false
         */
        "show"?: boolean;
        /**
          * Suppress the automatic placement of the dropdown.
          * @default false
         */
        "suppressAutomaticPlacement"?: boolean;
        /**
          * @default false
         */
        "suppressOverflowBehavior"?: boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interpreted as id attribute or a DOM element.
         */
        "trigger"?: ElementReference;
    }
    interface IxDropdownButton {
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown.
          * @default 'both'
         */
        "closeBehavior"?: 'inside' | 'outside' | 'both' | boolean;
        /**
          * Disable button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Set label
         */
        "label"?: string;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * Placement of the dropdown
         */
        "placement"?: AlignedPlacement;
        /**
          * Button variant
          * @default 'primary'
         */
        "variant"?: DropdownButtonVariant;
    }
    interface IxDropdownHeader {
        /**
          * Display name of the header
         */
        "label"?: string;
    }
    interface IxDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Disable item and remove event listeners
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Display hover state
          * @default false
         */
        "hover"?: boolean;
        /**
          * Icon of dropdown item
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isSubMenu"?: boolean;
        /**
          * Label of dropdown item
         */
        "label"?: string;
        "onItemClick"?: (event: IxDropdownItemCustomEvent<HTMLIxDropdownItemElement>) => void;
        /**
          * @default false
         */
        "suppressChecked"?: boolean;
    }
    interface IxDropdownQuickActions {
    }
    interface IxEmptyState {
        /**
          * Optional empty state action
         */
        "action"?: string;
        /**
          * Empty state header
         */
        "header": string;
        /**
          * Optional empty state icon
         */
        "icon"?: string;
        /**
          * Optional empty state layout - one of 'large', 'compact' or 'compactBreak'
          * @default 'large'
         */
        "layout"?: EmptyStateLayout;
        /**
          * Empty state action click event
         */
        "onActionClick"?: (event: IxEmptyStateCustomEvent<void>) => void;
        /**
          * Optional empty state sub header
         */
        "subHeader"?: string;
    }
    interface IxEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
          * @default true
         */
        "animated"?: boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
          * @default false
         */
        "chevron"?: boolean;
        /**
          * Make event-list items more compact
          * @default false
         */
        "compact"?: boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
          * @default 'S'
         */
        "itemHeight"?: 'S' | 'L' | number;
    }
    interface IxEventListItem {
        /**
          * Show chevron on right side of the event list item
          * @default false
         */
        "chevron"?: boolean;
        /**
          * Disable event list item
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Color of the status indicator. You can find a list of all available colors in our documentation. Example values are `--theme-color-alarm` or `color-alarm`
          * @link https://ix.siemens.io/docs/theming/colors/
         */
        "itemColor"?: string;
        /**
          * Event list item click
         */
        "onItemClick"?: (event: IxEventListItemCustomEvent<any>) => void;
        /**
          * Show event list item as selected
          * @default false
         */
        "selected"?: boolean;
    }
    interface IxExpandingSearch {
        /**
          * If true the search field will fill all available horizontal space of it's parent container when expanded.
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * Button with no background or outline
          * @default true
         */
        "ghost"?: boolean;
        /**
          * Search icon
         */
        "icon"?: string;
        /**
          * Value changed
         */
        "onValueChange"?: (event: IxExpandingSearchCustomEvent<string>) => void;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * Placeholder text
          * @default 'Enter text here'
         */
        "placeholder"?: string;
        /**
          * Default value
          * @default ''
         */
        "value"?: string;
        /**
          * button variant
          * @default 'primary'
         */
        "variant"?: ButtonVariant1;
    }
    interface IxFieldLabel {
        "controlRef"?: | MakeRef<HTMLElement>
    | MakeRef<HTMLInputElement>
    | MakeRef<HTMLTextAreaElement>;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlFor"?: string;
        /**
          * @default false
         */
        "isInvalid"?: boolean;
        /**
          * A value is required or must be checked for the form to be submittable
         */
        "required"?: boolean;
    }
    interface IxFieldWrapper {
        /**
          * The control element that the label is associated with
         */
        "controlRef"?: | MakeRef<HTMLElement>
    | MakeRef<HTMLInputElement>
    | MakeRef<HTMLTextAreaElement>;
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlForLabel"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Is the field component info
          * @default false
         */
        "isInfo"?: boolean;
        /**
          * Is the field component invalid
          * @default false
         */
        "isInvalid"?: boolean;
        /**
          * Is the field component valid
          * @default false
         */
        "isValid"?: boolean;
        /**
          * Is the field component warning
          * @default false
         */
        "isWarning"?: boolean;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * Show label as required
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, error, info, warning text as tooltip
          * @default false
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxFilterChip {
        /**
          * If true the filter chip will be in disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Close clicked
         */
        "onCloseClick"?: (event: IxFilterChipCustomEvent<void>) => void;
        /**
          * If true the filter chip will be in readonly mode
          * @default false
         */
        "readonly"?: boolean;
    }
    interface IxFlipTile {
        /**
          * Height interpreted as REM
          * @default 15.125
         */
        "height"?: number | 'auto';
        /**
          * Index of the currently visible content
          * @since 3.0.0
          * @default 0
         */
        "index"?: number;
        /**
          * Event emitted when the index changes
          * @since 3.0.0
         */
        "onToggle"?: (event: IxFlipTileCustomEvent<number>) => void;
        /**
          * Variation of the Flip
         */
        "state"?: FlipTileState;
        /**
          * Width interpreted as REM
          * @default 16
         */
        "width"?: number | 'auto';
    }
    interface IxFlipTileContent {
        /**
          * Controls the visibility of the content
          * @default false
         */
        "contentVisible"?: boolean;
    }
    interface IxGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
          * @default true
         */
        "collapsed"?: boolean;
        /**
          * Expand the group if the header is clicked
          * @default false
         */
        "expandOnHeaderClick"?: boolean;
        /**
          * Group header
         */
        "header"?: string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index"?: number;
        /**
          * Group collapsed
         */
        "onCollapsedChanged"?: (event: IxGroupCustomEvent<boolean>) => void;
        /**
          * Emits when whole group gets selected.
         */
        "onSelectGroup"?: (event: IxGroupCustomEvent<boolean>) => void;
        /**
          * Emits when group item gets selected.
         */
        "onSelectItem"?: (event: IxGroupCustomEvent<number>) => void;
        /**
          * Whether the group is selected.
          * @default false
         */
        "selected"?: boolean;
        /**
          * Group header subtitle
         */
        "subHeader"?: string;
        /**
          * Prevent header from being selectable
          * @default false
         */
        "suppressHeaderSelection"?: boolean;
    }
    interface IxGroupContextMenu {
    }
    interface IxGroupItem {
        /**
          * The elements tabindex attribute will get set accordingly. If true tabindex will be 0, -1 otherwise.
          * @default true
         */
        "focusable"?: boolean;
        /**
          * Group item icon
         */
        "icon"?: string;
        /**
          * Index
         */
        "index"?: number;
        /**
          * Selection changed
         */
        "onSelectedChanged"?: (event: IxGroupItemCustomEvent<HTMLIxGroupItemElement>) => void;
        /**
          * Group item secondary text
         */
        "secondaryText"?: string;
        /**
          * Show selected state
          * @default false
         */
        "selected"?: boolean;
        /**
          * Supress the selection of the group
          * @default false
         */
        "suppressSelection"?: boolean;
        /**
          * Group item text
         */
        "text"?: string;
    }
    interface IxHelperText {
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * The id of the form element that the label is associated with
         */
        "htmlFor"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxIconButton {
        /**
          * Accessibility label for the icon button Will be set as aria-label on the nested HTML button element
         */
        "a11yLabel"?: string;
        /**
          * Disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button invisible
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Color of icon in  button
         */
        "iconColor"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading"?: boolean;
        /**
          * Button outline
          * @default false
         */
        "outline"?: boolean;
        /**
          * Button in oval shape
          * @default false
         */
        "oval"?: boolean;
        /**
          * Size of icon in button
          * @default '24'
         */
        "size"?: '24' | '16' | '12';
        /**
          * Type of the button
          * @default 'button'
         */
        "type"?: 'button' | 'submit';
        /**
          * Variant of button
          * @default 'secondary'
         */
        "variant"?: IconButtonVariant;
    }
    interface IxIconToggleButton {
        /**
          * Disable the button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading"?: boolean;
        /**
          * Pressed change event
         */
        "onPressedChange"?: (event: IxIconToggleButtonCustomEvent<boolean>) => void;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * Button in oval shape
          * @since 3.1.0
          * @default false
         */
        "oval"?: boolean;
        /**
          * Show button as pressed
          * @default false
         */
        "pressed"?: boolean;
        /**
          * Size of icon in button
          * @default '24'
         */
        "size"?: '24' | '16' | '12';
        /**
          * Button variant.
          * @default 'secondary'
         */
        "variant"?: ButtonVariant1;
    }
    /**
     * @form-ready 
     */
    interface IxInput {
        /**
          * The allowed characters pattern for the text field.
         */
        "allowedCharactersPattern"?: string;
        /**
          * Specifies whether the text field is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The helper text for the text field.
         */
        "helperText"?: string;
        /**
          * The info text for the text field.
         */
        "infoText"?: string;
        /**
          * The error text for the text field.
         */
        "invalidText"?: string;
        /**
          * The label for the text field.
         */
        "label"?: string;
        /**
          * The maximum length of the text field.
         */
        "maxLength"?: number;
        /**
          * The minimum length of the text field.
         */
        "minLength"?: number;
        /**
          * The name of the text field.
         */
        "name"?: string;
        /**
          * Event emitted when the text field loses focus.
         */
        "onIxBlur"?: (event: IxInputCustomEvent<void>) => void;
        /**
          * Event emitted when the validity state of the text field changes.
         */
        "onValidityStateChange"?: (event: IxInputCustomEvent<ValidityState>) => void;
        /**
          * Event emitted when the value of the text field changes.
         */
        "onValueChange"?: (event: IxInputCustomEvent<string>) => void;
        /**
          * The pattern for the text field.
         */
        "pattern"?: string;
        /**
          * The placeholder text for the text field.
         */
        "placeholder"?: string;
        /**
          * Specifies whether the text field is readonly.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Specifies whether the text field is required.
          * @default false
         */
        "required"?: boolean;
        /**
          * Specifies whether to show the text as a tooltip.
         */
        "showTextAsTooltip"?: boolean;
        /**
          * The type of the text field. Possible values are 'text', 'email', or 'password'.
          * @default 'text'
         */
        "type"?: 'text' | 'email' | 'password' | 'tel' | 'url';
        /**
          * The valid text for the text field.
         */
        "validText"?: string;
        /**
          * The value of the text field.
          * @default ''
         */
        "value"?: string;
        /**
          * The warning text for the text field.
         */
        "warningText"?: string;
    }
    /**
     * @deprecated Will be removed with 4.0.0
     * Use the 'ix-input' component instead
     */
    interface IxInputGroup {
    }
    interface IxKeyValue {
        /**
          * Optional key value icon
         */
        "icon"?: string;
        /**
          * Key value label
         */
        "label": string;
        /**
          * Optional key value label position - 'top' or 'left'
          * @default 'top'
         */
        "labelPosition"?: KeyValueLabelPosition;
        /**
          * Optional key value text value
         */
        "value"?: string;
    }
    interface IxKeyValueList {
        /**
          * Optional striped key value list style
          * @default false
         */
        "striped"?: boolean;
    }
    interface IxKpi {
        "label"?: string;
        /**
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * @default 'neutral'
         */
        "state"?: 'neutral' | 'warning' | 'alarm';
        "unit"?: string;
        "value"?: string | number;
    }
    interface IxLayoutAuto {
        /**
          * Defines the layout of the form.
          * @default [     { minWidth: '0', columns: 1 },     { minWidth: '48em', columns: 2 },   ]
         */
        "layout"?: {
    minWidth: string;
    columns: number;
  }[];
    }
    interface IxLayoutGrid {
        /**
          * Overwrite the default number of columns. Choose between 2 and 12 columns.
          * @default 12
         */
        "columns"?: number;
        /**
          * Grid gap
          * @default '24'
         */
        "gap"?: '8' | '12' | '16' | '24';
        /**
          * The grid will not have any horizontal padding
          * @default false
         */
        "noMargin"?: boolean;
    }
    interface IxLinkButton {
        /**
          * Disable the link button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Specifies where to open the link  https://www.w3schools.com/html/html_links.asp
          * @default '_self'
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * Url for the link button
         */
        "url"?: string;
    }
    interface IxMapNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Hide the sidebar context menu button when set to true
          * @default true
         */
        "hideContextMenu"?: boolean;
        /**
          * Navigation title
         */
        "navigationTitle"?: string;
        /**
          * Context menu clicked
         */
        "onContextMenuClick"?: (event: IxMapNavigationCustomEvent<void>) => void;
        /**
          * Navigation toggled
         */
        "onNavigationToggled"?: (event: IxMapNavigationCustomEvent<boolean>) => void;
    }
    interface IxMapNavigationOverlay {
        /**
          * Color of icon
          * @deprecated since 2.1.0. Use `icon-color`
         */
        "color"?: string;
        /**
          * Icon of overlay
         */
        "icon"?: string;
        /**
          * Color of icon
         */
        "iconColor"?: string;
        /**
          * Title of overlay
         */
        "name"?: string;
        /**
          * Event closed
         */
        "onCloseClick"?: (event: IxMapNavigationOverlayCustomEvent<any>) => void;
    }
    interface IxMenu {
        /**
          * Should only be set if you use ix-menu standalone
          * @default ''
         */
        "applicationDescription"?: string;
        /**
          * Should only be set if you use ix-menu standalone
         */
        "applicationName"?: string;
        /**
          * @default false
         */
        "enableMapExpand"?: boolean;
        /**
          * Is settings tab is visible
          * @default true
         */
        "enableSettings"?: boolean;
        /**
          * Show toggle between light and dark variant. Only if the provided theme have implemented both!
          * @default false
         */
        "enableToggleTheme"?: boolean;
        /**
          * Toggle the expand state of the menu
          * @default false
         */
        "expand"?: boolean;
        /**
          * @default 'Collapse'
         */
        "i18nCollapse"?: string;
        /**
          * @default ' Expand'
         */
        "i18nExpand"?: string;
        /**
          * Accessibility i18n label for the burger menu of the sidebar
          * @default 'Expand sidebar'
         */
        "i18nExpandSidebar"?: string;
        /**
          * @default 'About & legal information'
         */
        "i18nLegal"?: string;
        /**
          * @default 'Settings'
         */
        "i18nSettings"?: string;
        /**
          * @default 'Toggle theme'
         */
        "i18nToggleTheme"?: string;
        /**
          * Menu expanded
         */
        "onExpandChange"?: (event: IxMenuCustomEvent<boolean>) => void;
        /**
          * Map Sidebar expanded
         */
        "onMapExpandChange"?: (event: IxMenuCustomEvent<boolean>) => void;
        /**
          * Event emitted when the about button is clicked
          * @since 3.0.0
         */
        "onOpenAbout"?: (event: IxMenuCustomEvent<void>) => void;
        /**
          * Event emitted when the app switch button is clicked
          * @since 3.0.0
         */
        "onOpenAppSwitch"?: (event: IxMenuCustomEvent<void>) => void;
        /**
          * Event emitted when the settings button is clicked
          * @since 3.0.0
         */
        "onOpenSettings"?: (event: IxMenuCustomEvent<void>) => void;
        /**
          * Menu stays pinned to the left
          * @default false
         */
        "pinned"?: boolean;
        /**
          * Is about tab visible
          * @default false
         */
        "showAbout"?: boolean;
        /**
          * Is settings tab visible
          * @default false
         */
        "showSettings"?: boolean;
        /**
          * If set the menu will be expanded initially. This will only take effect at the breakpoint 'lg'.
          * @default false
         */
        "startExpanded"?: boolean;
    }
    interface IxMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Content of the header
          * @default 'About & legal information'
         */
        "label"?: string;
        /**
          * About and Legal closed
         */
        "onClose"?: (event: IxMenuAboutCustomEvent<CustomCloseEvent>) => void;
        /**
          * Active tab changed
          * @since 3.0.0
         */
        "onTabChange"?: (event: IxMenuAboutCustomEvent<string>) => void;
        /**
          * @default false
         */
        "show"?: boolean;
    }
    interface IxMenuAboutItem {
        /**
          * About Item label
         */
        "label"?: string;
        /**
          * Label changed
         */
        "onLabelChange"?: (event: IxMenuAboutItemCustomEvent<CustomLabelChangeEvent>) => void;
    }
    interface IxMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel"?: string;
        /**
          * @default false
         */
        "expanded"?: boolean;
        /**
          * @default 'Show more'
         */
        "i18nShowMore"?: string;
        /**
          * Title of the about news
         */
        "label"?: string;
        /**
          * Bottom offset
          * @default 0
         */
        "offsetBottom"?: number;
        /**
          * Popover closed
         */
        "onClosePopover"?: (event: IxMenuAboutNewsCustomEvent<void>) => void;
        /**
          * Show More button is pressed
         */
        "onShowMore"?: (event: IxMenuAboutNewsCustomEvent<MouseEvent>) => void;
        /**
          * Show about news
          * @default false
         */
        "show"?: boolean;
    }
    interface IxMenuAvatar {
        /**
          * Second line of text
         */
        "bottom"?: string;
        /**
          * Use for translation
          * @default 'Logout'
         */
        "i18nLogout"?: string;
        /**
          * Display a avatar image
         */
        "image"?: string;
        /**
          * Display the initials of the user. Will be overwritten by image
         */
        "initials"?: string;
        /**
          * Logout click
         */
        "onLogoutClick"?: (event: IxMenuAvatarCustomEvent<any>) => void;
        /**
          * Control the visibility of the logout button
          * @default true
         */
        "showLogoutButton"?: boolean;
        /**
          * First line of text
         */
        "top"?: string;
    }
    interface IxMenuAvatarItem {
        /**
          * Avatar dropdown icon
         */
        "icon"?: string;
        /**
          * Avatar dropdown label
         */
        "label"?: string;
        /**
          * Avatar dropdown item clicked
         */
        "onItemClick"?: (event: IxMenuAvatarItemCustomEvent<MouseEvent>) => void;
    }
    interface IxMenuCategory {
        /**
          * Icon of the category
         */
        "icon"?: string;
        /**
          * Display name of the category
         */
        "label"?: string;
        /**
          * Show notification count on the category
         */
        "notifications"?: number;
        "onCloseOtherCategories"?: (event: IxMenuCategoryCustomEvent<any>) => void;
    }
    interface IxMenuExpandIcon {
        /**
          * Controls which icon is displayed
         */
        "breakpoint"?: Breakpoint;
        /**
          * Whether the menu expand icon displays the expanded state or not
          * @default false
         */
        "expanded"?: boolean;
        /**
          * Accessibility label for the menu expand icon (MANDATORY)
          * @default 'Expand'
         */
        "ixAriaLabel"?: string;
        /**
          * Display as pinned
          * @default false
         */
        "pinned"?: boolean;
    }
    interface IxMenuItem {
        /**
          * State to display active
          * @default false
         */
        "active"?: boolean;
        /**
          * Caution: this is no longer working. Please use slot="bottom" instead.  Place tab on bottom
          * @default false
         */
        "bottom"?: boolean;
        /**
          * Disable tab and remove event handlers
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Move the Tab to a top position.
          * @default false
         */
        "home"?: boolean;
        /**
          * Name of the icon you want to display. Icon names can be resolved from the documentation
          * @link https://ix.siemens.io/docs/icon-library/icons
         */
        "icon"?: string;
        /**
          * @default false
         */
        "isCategory"?: boolean;
        /**
          * Label of the menu item. Will also be used as tooltip text
         */
        "label"?: string;
        /**
          * Show notification count on tab
         */
        "notifications"?: number;
    }
    interface IxMenuSettings {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Label of first tab
          * @default 'Settings'
         */
        "label"?: string;
        /**
          * Popover closed
         */
        "onClose"?: (event: IxMenuSettingsCustomEvent<CustomCloseEvent>) => void;
        /**
          * Active tab changed
          * @since 3.0.0
         */
        "onTabChange"?: (event: IxMenuSettingsCustomEvent<string>) => void;
        /**
          * @default false
         */
        "show"?: boolean;
    }
    interface IxMenuSettingsItem {
        /**
          * Settings Item label
         */
        "label"?: string;
        /**
          * Label changed
         */
        "onLabelChange"?: (event: IxMenuSettingsItemCustomEvent<CustomLabelChangeEvent>) => void;
    }
    interface IxMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
          * @default true
         */
        "dismissible"?: boolean;
        /**
          * An event emitted when the close animation is completed
         */
        "onCloseAnimationCompleted"?: (event: IxMessageBarCustomEvent<any>) => void;
        /**
          * An event emitted when the close button is clicked
         */
        "onClosedChange"?: (event: IxMessageBarCustomEvent<any>) => void;
        /**
          * Specifies the type of the alert.
          * @deprecated Type `danger` will be removed in 4.0. Use `alarm` instead.
          * @default 'info'
         */
        "type"?: | 'alarm'
    | 'danger'
    | 'critical'
    | 'warning'
    | 'success'
    | 'info'
    | 'neutral'
    | 'primary';
    }
    interface IxModal {
        /**
          * Should the modal be animated
          * @default true
         */
        "animation"?: boolean;
        /**
          * Show a backdrop behind the modal dialog
          * @default true
         */
        "backdrop"?: boolean;
        /**
          * Is called before the modal is dismissed.  - Return `true` to proceed in dismissing the modal - Return `false` to abort in dismissing the modal
         */
        "beforeDismiss"?: (reason?: any) => boolean | Promise<boolean>;
        /**
          * Centered modal
          * @default false
         */
        "centered"?: boolean;
        /**
          * Dismiss modal on backdrop click
          * @default false
         */
        "closeOnBackdropClick"?: boolean;
        /**
          * If set to true the modal can be closed by pressing the Escape key
          * @default true
         */
        "closeOnEscape"?: boolean;
        /**
          * Dialog close
         */
        "onDialogClose"?: (event: IxModalCustomEvent<any>) => void;
        /**
          * Dialog cancel
         */
        "onDialogDismiss"?: (event: IxModalCustomEvent<any>) => void;
        /**
          * Modal size
          * @default '360'
         */
        "size"?: IxModalSize;
    }
    interface IxModalContent {
    }
    interface IxModalFooter {
    }
    interface IxModalHeader {
        /**
          * Hide the close button
          * @default false
         */
        "hideClose"?: boolean;
        /**
          * Icon of the Header
         */
        "icon"?: string;
        /**
          * Icon color
         */
        "iconColor"?: string;
        /**
          * Emits when close icon is clicked and closes the modal Can be prevented, in which case only the event is triggered, and the modal remains open
         */
        "onCloseClick"?: (event: IxModalHeaderCustomEvent<MouseEvent>) => void;
    }
    interface IxModalLoading {
    }
    /**
     * @form-ready 
     */
    interface IxNumberInput {
        /**
          * The allowed characters pattern for the input field
         */
        "allowedCharactersPattern"?: string;
        /**
          * Disables the input field
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The helper text for the input field
         */
        "helperText"?: string;
        /**
          * The info text for the input field
         */
        "infoText"?: string;
        /**
          * The error text for the input field
         */
        "invalidText"?: string;
        /**
          * The label for the input field
         */
        "label"?: string;
        /**
          * The maximum value for the input field
         */
        "max"?: string | number;
        /**
          * The minimum value for the input field
         */
        "min"?: string | number;
        /**
          * name of the input element
         */
        "name"?: string;
        /**
          * Event emitted when the input field loses focus
         */
        "onIxBlur"?: (event: IxNumberInputCustomEvent<void>) => void;
        /**
          * Event emitted when the validity state of the input field changes
         */
        "onValidityStateChange"?: (event: IxNumberInputCustomEvent<ValidityState>) => void;
        /**
          * Event emitted when the value of the input field changes
         */
        "onValueChange"?: (event: IxNumberInputCustomEvent<number>) => void;
        /**
          * The pattern for the input field
         */
        "pattern"?: string;
        /**
          * placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Indicates if the field is read-only
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Indicates if the field is required
          * @default false
         */
        "required"?: boolean;
        /**
          * Indicates if the stepper buttons should be shown
         */
        "showStepperButtons"?: boolean;
        /**
          * Indicates if the text should be shown as a tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Step value to increment or decrement the input value
          * @since 3.0.0
         */
        "step"?: string | number;
        /**
          * The valid text for the input field
         */
        "validText"?: string;
        /**
          * The value of the input field
          * @default 0
         */
        "value"?: number;
        /**
          * The warning text for the input field
         */
        "warningText"?: string;
    }
    interface IxPagination {
        /**
          * Advanced mode
          * @default false
         */
        "advanced"?: boolean;
        /**
          * Total number of pages
          * @default 0
         */
        "count"?: number;
        /**
          * /**   i18n
          * @default 'Items'
         */
        "i18nItems"?: string;
        /**
          * i18n
          * @default 'of'
         */
        "i18nOf"?: string;
        /**
          * i18n
          * @default 'Page'
         */
        "i18nPage"?: string;
        /**
          * Number of items shown at once. Can only be changed in advaced mode.
          * @default 15
         */
        "itemCount"?: number;
        /**
          * Item count change event
         */
        "onItemCountChanged"?: (event: IxPaginationCustomEvent<number>) => void;
        /**
          * Page selection event
         */
        "onPageSelected"?: (event: IxPaginationCustomEvent<number>) => void;
        /**
          * Zero based index of currently selected page
          * @default 0
         */
        "selectedPage"?: number;
        /**
          * Show item count in advanced mode
          * @default true
         */
        "showItemCount"?: boolean;
    }
    interface IxPane {
        /**
          * Toggle the border of the pane. Defaults to the borderless attribute of the pane layout. If used standalone it defaults to false.
          * @default false
         */
        "borderless"?: boolean;
        /**
          * Defines the position of the pane inside it's container. Inside a pane layout this property will automatically be set to the name of slot the pane is assigned to.
          * @default 'top'
         */
        "composition"?: Composition;
        /**
          * State of the pane
          * @default false
         */
        "expanded"?: boolean;
        /**
          * Title of the side panel
         */
        "heading"?: string;
        /**
          * Define if the pane should have a collapsed state
          * @default false
         */
        "hideOnCollapse"?: boolean;
        /**
          * Name of the icon
         */
        "icon"?: string;
        /**
          * @default false
         */
        "ignoreLayoutSettings"?: boolean;
        /**
          * @default false
         */
        "isMobile"?: boolean;
        /**
          * This event is triggered when the variant of the pane is changed
         */
        "onBorderlessChanged"?: (event: IxPaneCustomEvent<BorderlessChangedEvent>) => void;
        /**
          * This event is triggered when the pane either expands or contracts
         */
        "onExpandedChanged"?: (event: IxPaneCustomEvent<ExpandedChangedEvent>) => void;
        "onHideOnCollapseChanged"?: (event: IxPaneCustomEvent<HideOnCollapseChangedEvent>) => void;
        "onSlotChanged"?: (event: IxPaneCustomEvent<SlotChangedEvent>) => void;
        /**
          * This event is triggered when the variant of the pane is changed
         */
        "onVariantChanged"?: (event: IxPaneCustomEvent<VariantChangedEvent>) => void;
        /**
          * The maximum size of the sidebar, when it is expanded
          * @default '240px'
         */
        "size"?: | '240px'
    | '320px'
    | '360px'
    | '480px'
    | '600px'
    | '33%'
    | '50%';
        /**
          * Variant of the side pane. Defaults to the variant attribute of the pane layout. If used standalone it defaults to inline.
          * @default 'inline'
         */
        "variant"?: 'floating' | 'inline';
    }
    interface IxPaneLayout {
        /**
          * Set the default border state for all panes in the layout
          * @default false
         */
        "borderless"?: boolean;
        /**
          * Choose the layout of the panes. When set to 'full-vertical' the vertical panes (left, right) will get the full height. When set to 'full-horizontal' the horizontal panes (top, bottom) will get the full width.
          * @default 'full-vertical'
         */
        "layout"?: 'full-vertical' | 'full-horizontal';
        /**
          * Set the default variant for all panes in the layout
          * @default 'inline'
         */
        "variant"?: 'floating' | 'inline';
    }
    interface IxPill {
        /**
          * Align pill content left
          * @default false
         */
        "alignLeft"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Show icon
         */
        "icon"?: string;
        /**
          * Show pill as outline
          * @default false
         */
        "outline"?: boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "pillColor"?: string | undefined;
        /**
          * Display a tooltip. By default, no tooltip will be displayed. Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.
          * @since 3.0.0
          * @default false
         */
        "tooltipText"?: string | boolean;
        /**
          * Pill variant
          * @default 'primary'
         */
        "variant"?: | 'primary'
    | 'alarm'
    | 'critical'
    | 'warning'
    | 'info'
    | 'neutral'
    | 'success'
    | 'custom';
    }
    /**
     * @since 3.2.0
     */
    interface IxProgressIndicator {
        /**
          * The helper text for the progress indicator.
         */
        "helperText"?: string;
        /**
          * The label for the progress indicator.
         */
        "label"?: string;
        /**
          * The maximum value of the progress indicator.
          * @default 100
         */
        "max"?: number;
        /**
          * The minimum value of the progress indicator.
          * @default 0
         */
        "min"?: number;
        /**
          * Show the helper text as a tooltip
          * @default false
         */
        "showTextAsTooltip"?: boolean;
        /**
          * The size of the progress indicator.
          * @default 'md'
         */
        "size"?: ProgressIndicatorSize;
        /**
          * The state of the progress indicator. This is used to indicate the current state of the progress indicator.
          * @default 'default'
         */
        "status"?: | 'default'
    | 'success'
    | 'error'
    | 'info'
    | 'warning'
    | 'paused';
        /**
          * The text alignment for the helper text. Can be 'left', 'center', or 'right'.
          * @default 'left'
         */
        "textAlignment"?: 'left' | 'center' | 'right';
        /**
          * The type of progress indicator to use.
          * @default 'linear'
         */
        "type"?: 'linear' | 'circular';
        /**
          * The value of the progress indicator.
          * @default 0
         */
        "value"?: number;
    }
    interface IxPushCard {
        /**
          * Collapse the card
          * @default true
         */
        "collapse"?: boolean;
        /**
          * Card heading
         */
        "heading"?: string;
        /**
          * Card icon
         */
        "icon"?: string;
        /**
          * Card KPI value
         */
        "notification"?: string;
        /**
          * Card subheading
         */
        "subheading"?: string;
        /**
          * Card variant
          * @default 'outline'
         */
        "variant"?: PushCardVariant;
    }
    /**
     * @form-ready 
     */
    interface IxRadio {
        /**
          * Checked state of the radio component
          * @default false
         */
        "checked"?: boolean;
        /**
          * Disabled state of the radio component
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Label for the radio component
         */
        "label"?: string;
        /**
          * Name of the radio component
         */
        "name"?: string;
        /**
          * Event emitted when the checked state of the radio changes
         */
        "onCheckedChange"?: (event: IxRadioCustomEvent<boolean>) => void;
        /**
          * Event emitted when the radio is blurred
         */
        "onIxBlur"?: (event: IxRadioCustomEvent<void>) => void;
        /**
          * Event emitted when the value of the radio changes
         */
        "onValueChange"?: (event: IxRadioCustomEvent<string>) => void;
        /**
          * Requires the radio component and its group to be checked for the form to be submittable
          * @since 3.0.0
          * @default false
         */
        "required"?: boolean;
        /**
          * Value of the radio component
         */
        "value"?: string;
    }
    /**
     * @form-ready 
     */
    interface IxRadioGroup {
        /**
          * Alignment of the radio buttons in the group
          * @default 'column'
         */
        "direction"?: 'column' | 'row';
        /**
          * Show text below the field component
         */
        "helperText"?: string;
        /**
          * Info text for the field component
         */
        "infoText"?: string;
        /**
          * Error text for the field component
         */
        "invalidText"?: string;
        /**
          * Label for the field component
         */
        "label"?: string;
        /**
          * Event emitted when the value of the radiobutton group changes
         */
        "onValueChange"?: (event: IxRadioGroupCustomEvent<string>) => void;
        /**
          * Required state of the checkbox component
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, info, warning, error and valid text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the field component
         */
        "validText"?: string;
        /**
          * Value of the radiobutton group component
         */
        "value"?: string;
        /**
          * Warning text for the field component
         */
        "warningText"?: string;
    }
    interface IxRow {
    }
    /**
     * @form-ready 
     */
    interface IxSelect {
        /**
          * Show clear button
          * @default false
         */
        "allowClear"?: boolean;
        /**
          * If true the select will be in disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The maximum width of the dropdown element with value and unit (e.g. "200px" or "12.5rem"). By default the maximum width of the dropdown element is set to 100%.
         */
        "dropdownMaxWidth"?: string;
        /**
          * The width of the dropdown element with value and unit (e.g. "200px" or "12.5rem").
         */
        "dropdownWidth"?: string;
        /**
          * Select is extendable
          * @default false
         */
        "editable"?: boolean;
        /**
          * Helper text for the select component
         */
        "helperText"?: string;
        /**
          * Hide list header
          * @default false
         */
        "hideListHeader"?: boolean;
        /**
          * Information inside of dropdown if no items where found with current filter text
          * @default 'No matches'
         */
        "i18nNoMatches"?: string;
        /**
          * Input field placeholder
          * @default 'Select an option'
         */
        "i18nPlaceholder"?: string;
        /**
          * Input field placeholder for editable select
          * @default 'Type of select option'
         */
        "i18nPlaceholderEditable"?: string;
        /**
          * Select list header
          * @default 'Select an option'
         */
        "i18nSelectListHeader"?: string;
        /**
          * Info text for the select component
         */
        "infoText"?: string;
        /**
          * Error text for the select component
         */
        "invalidText"?: string;
        /**
          * Label for the select component
         */
        "label"?: string;
        /**
          * Selection mode
          * @default 'single'
         */
        "mode"?: 'single' | 'multiple';
        /**
          * A string that represents the element's name attribute, containing a name that identifies the element when submitting the form.
         */
        "name"?: string;
        /**
          * Item added to selection
         */
        "onAddItem"?: (event: IxSelectCustomEvent<string>) => void;
        /**
          * Event dispatched whenever the text input changes.
         */
        "onInputChange"?: (event: IxSelectCustomEvent<string>) => void;
        /**
          * Blur input
         */
        "onIxBlur"?: (event: IxSelectCustomEvent<void>) => void;
        /**
          * Value changed
         */
        "onValueChange"?: (event: IxSelectCustomEvent<string | string[]>) => void;
        /**
          * If true the select will be in readonly mode
          * @default false
         */
        "readonly"?: boolean;
        /**
          * A Boolean attribute indicating that an option with a non-empty string value must be selected
          * @default false
         */
        "required"?: boolean;
        /**
          * Show helper, error, info, warning text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text for the select component
         */
        "validText"?: string;
        /**
          * Current selected value. This corresponds to the value property of ix-select-items
          * @default []
         */
        "value"?: string | string[];
        /**
          * Warning text for the select component
         */
        "warningText"?: string;
    }
    interface IxSelectItem {
        /**
          * @default false
         */
        "hover"?: boolean;
        /**
          * Displayed name of the item
         */
        "label"?: string;
        /**
          * Item clicked
         */
        "onItemClick"?: (event: IxSelectItemCustomEvent<string>) => void;
        /**
          * Flag indicating whether the item is selected
          * @default false
         */
        "selected"?: boolean;
        /**
          * The value of the item. Important: The select component uses string values to handle selection and will call toString() on this value. Therefor a string should be passed to value to prevent unexpected behavior.
         */
        "value": string;
    }
    interface IxSlider {
        /**
          * Show control as disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Show error state and message
         */
        "error"?: boolean | string;
        /**
          * Define tick marker on the slider. Marker has to be within slider min/max
         */
        "marker"?: SliderMarker;
        /**
          * Maximum slider value
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum slider value
          * @default 0
         */
        "min"?: number;
        "onValueChange"?: (event: IxSliderCustomEvent<number>) => void;
        /**
          * Legal number intervals
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range#step
          * @default 1
         */
        "step"?: number;
        /**
          * Show a trace line
          * @default false
         */
        "trace"?: boolean;
        /**
          * Define the start point of the trace line
          * @default 0
         */
        "traceReference"?: number;
        /**
          * Current value of the slider
          * @default 0
         */
        "value"?: number;
    }
    interface IxSpinner {
        /**
          * @default false
         */
        "hideTrack"?: boolean;
        /**
          * Size of spinner
          * @default 'medium'
         */
        "size"?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';
        /**
          * Variant of spinner
          * @default 'secondary'
         */
        "variant"?: 'primary' | 'secondary';
    }
    interface IxSplitButton {
        /**
          * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown.
          * @default 'both'
         */
        "closeBehavior"?: CloseBehavior;
        /**
          * Disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button invisible
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button label
         */
        "label"?: string;
        /**
          * Button clicked
         */
        "onButtonClick"?: (event: IxSplitButtonCustomEvent<MouseEvent>) => void;
        /**
          * Button outline variant
          * @default false
         */
        "outline"?: boolean;
        /**
          * Placement of the dropdown
          * @default 'bottom-start'
         */
        "placement"?: AlignedPlacement;
        /**
          * Icon of the button on the right
         */
        "splitIcon"?: string;
        /**
          * Color variant of button
          * @default 'primary'
         */
        "variant"?: SplitButtonVariant;
    }
    interface IxTabItem {
        /**
          * Set counter value
         */
        "counter"?: number;
        /**
          * Set disabled tab
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Set icon only tab
          * @default false
         */
        "icon"?: boolean;
        /**
          * Set layout width style
          * @default 'auto'
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * Emitted when the tab is clicked.
         */
        "onTabClick"?: (event: IxTabItemCustomEvent<TabClickDetail>) => void;
        /**
          * Set selected placement
          * @default 'bottom'
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set rounded tab
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Set selected tab
          * @default false
         */
        "selected"?: boolean;
        /**
          * Set small size tab
          * @default false
         */
        "small"?: boolean;
    }
    interface IxTabs {
        /**
          * Set layout width style
          * @default 'auto'
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * `selected` property changed
         */
        "onSelectedChange"?: (event: IxTabsCustomEvent<number>) => void;
        /**
          * Set placement style
          * @default 'bottom'
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set rounded tabs
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Set default selected tab by index
          * @default 0
         */
        "selected"?: number;
        /**
          * Set tab items to small size
          * @default false
         */
        "small"?: boolean;
    }
    /**
     * @form-ready 
     */
    interface IxTextarea {
        /**
          * Determines if the textarea field is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The helper text for the textarea field.
         */
        "helperText"?: string;
        /**
          * The info text for the textarea field.
         */
        "infoText"?: string;
        /**
          * The error text for the textarea field.
         */
        "invalidText"?: string;
        /**
          * The label for the textarea field.
         */
        "label"?: string;
        /**
          * The maximum length of the textarea field.
         */
        "maxLength"?: number;
        /**
          * The minimum length of the textarea field.
         */
        "minLength"?: number;
        /**
          * The name of the textarea field.
         */
        "name"?: string;
        /**
          * Event emitted when the textarea field loses focus.
         */
        "onIxBlur"?: (event: IxTextareaCustomEvent<void>) => void;
        /**
          * Event emitted when the validity state of the textarea field changes.
         */
        "onValidityStateChange"?: (event: IxTextareaCustomEvent<ValidityState>) => void;
        /**
          * Event emitted when the value of the textarea field changes.
         */
        "onValueChange"?: (event: IxTextareaCustomEvent<string>) => void;
        /**
          * The placeholder text for the textarea field.
         */
        "placeholder"?: string;
        /**
          * Determines if the textarea field is readonly.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Determines if the textarea field is required.
          * @default false
         */
        "required"?: boolean;
        /**
          * Determines the resize behavior of the textarea field. Resizing can be enabled in one direction, both directions or completely disabled.
          * @default 'both'
         */
        "resizeBehavior"?: TextareaResizeBehavior;
        /**
          * Determines if the text should be displayed as a tooltip.
         */
        "showTextAsTooltip"?: boolean;
        /**
          * The width of the textarea specified by number of characters.
         */
        "textareaCols"?: number;
        /**
          * The height of the textarea field (e.g. "52px").
         */
        "textareaHeight"?: string;
        /**
          * The height of the textarea specified by number of rows.
         */
        "textareaRows"?: number;
        /**
          * The width of the textarea field (e.g. "200px").
         */
        "textareaWidth"?: string;
        /**
          * The valid text for the textarea field.
         */
        "validText"?: string;
        /**
          * The value of the textarea field.
          * @default ''
         */
        "value"?: string;
        /**
          * The warning text for the textarea field.
         */
        "warningText"?: string;
    }
    interface IxTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'big';
    }
    /**
     * @since 3.2.0
     * @form-ready 
     */
    interface IxTimeInput {
        /**
          * Disabled attribute
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens.
          * @default 'TT'
         */
        "format"?: string;
        /**
          * Helper text below the input field
         */
        "helperText"?: string;
        /**
          * Interval for hour selection
          * @default 1
         */
        "hourInterval"?: number;
        /**
          * I18n string for the error message when the time is not parsable
          * @default 'Time is not valid'
         */
        "i18nErrorTimeUnparsable"?: string;
        /**
          * Text for time-picker hour column header
          * @default 'hr'
         */
        "i18nHourColumnHeader"?: string;
        /**
          * Text for time-picker millisecond column header
          * @default 'ms'
         */
        "i18nMillisecondColumnHeader"?: string;
        /**
          * Text for time-picker minute column header
          * @default 'min'
         */
        "i18nMinuteColumnHeader"?: string;
        /**
          * Text for time-picker second column header
          * @default 'sec'
         */
        "i18nSecondColumnHeader"?: string;
        /**
          * Text of time-picker time select button
          * @default 'Confirm'
         */
        "i18nSelectTime"?: string;
        /**
          * Text for time-picker top label
          * @default 'Time'
         */
        "i18nTime"?: string;
        /**
          * Info text below the input field
         */
        "infoText"?: string;
        /**
          * Error text below the input field
         */
        "invalidText"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Interval for millisecond selection
          * @default 100
         */
        "millisecondInterval"?: number;
        /**
          * Interval for minute selection
          * @default 1
         */
        "minuteInterval"?: number;
        /**
          * Name of the input element
         */
        "name"?: string;
        "onIxBlur"?: (event: IxTimeInputCustomEvent<void>) => void;
        "onIxFocus"?: (event: IxTimeInputCustomEvent<void>) => void;
        /**
          * Validation state change event.
         */
        "onValidityStateChange"?: (event: IxTimeInputCustomEvent<TimeInputValidityState>) => void;
        /**
          * Input change event.
         */
        "onValueChange"?: (event: IxTimeInputCustomEvent<string>) => void;
        /**
          * Placeholder of the input element
         */
        "placeholder"?: string;
        /**
          * Readonly attribute
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * Interval for second selection
          * @default 1
         */
        "secondInterval"?: number;
        /**
          * Show text as tooltip
         */
        "showTextAsTooltip"?: boolean;
        /**
          * Valid text below the input field
         */
        "validText"?: string;
        /**
          * Value of the input element
          * @default ''
         */
        "value"?: string;
        /**
          * Warning text below the input field
         */
        "warningText"?: string;
    }
    interface IxTimePicker {
        /**
          * Corner style
          * @default 'rounded'
         */
        "corners"?: TimePickerCorners;
        /**
          * @default false
         */
        "dateTimePickerAppearance"?: boolean;
        /**
          * Format of time string See {@link "https://moment.github.io/luxon/#/formatting?id=table-of-tokens"} for all available tokens. Note: Formats that combine date and time (like f or F) are not supported. Timestamp tokens x and X are not supported either.
          * @default 'TT'
         */
        "format"?: string;
        /**
          * Hides the header of the picker.
          * @since 3.2.0
          * @default false
         */
        "hideHeader"?: boolean;
        /**
          * Interval for hour selection
          * @since 3.2.0
          * @default HOUR_INTERVAL_DEFAULT
         */
        "hourInterval"?: number;
        /**
          * Text of the time confirm button
          * @default CONFIRM_BUTTON_DEFAULT
         */
        "i18nConfirmTime"?: string;
        /**
          * Text for top header
          * @default HEADER_DEFAULT
         */
        "i18nHeader"?: string;
        /**
          * Text for hour column header
          * @default 'hr'
         */
        "i18nHourColumnHeader"?: string;
        /**
          * Text for millisecond column header
          * @default 'ms'
         */
        "i18nMillisecondColumnHeader"?: string;
        /**
          * Text for minute column header
          * @default 'min'
         */
        "i18nMinuteColumnHeader"?: string;
        /**
          * Text for second column header
          * @default 'sec'
         */
        "i18nSecondColumnHeader"?: string;
        /**
          * Interval for millisecond selection
          * @since 3.2.0
          * @default MILLISECOND_INTERVAL_DEFAULT
         */
        "millisecondInterval"?: number;
        /**
          * Interval for minute selection
          * @since 3.2.0
          * @default MINUTE_INTERVAL_DEFAULT
         */
        "minuteInterval"?: number;
        /**
          * Time change event
         */
        "onTimeChange"?: (event: IxTimePickerCustomEvent<string>) => void;
        /**
          * Time event
         */
        "onTimeSelect"?: (event: IxTimePickerCustomEvent<string>) => void;
        /**
          * Interval for second selection
          * @since 3.2.0
          * @default SECOND_INTERVAL_DEFAULT
         */
        "secondInterval"?: number;
        /**
          * Show hour input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showHour"?: boolean;
        /**
          * Show minutes input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showMinutes"?: boolean;
        /**
          * Show seconds input
          * @deprecated This is now determined by the format that is used. Will be removed in 4.0.0
          * @default true
         */
        "showSeconds"?: boolean;
        /**
          * Controls the visual presentation and styling of the component when it is displayed as a standalone element
          * @default true
         */
        "standaloneAppearance"?: boolean;
        /**
          * Text of time select button
          * @deprecated Use `i18nConfirmTime` instead. Will be removed in 4.0.0.
          * @default CONFIRM_BUTTON_DEFAULT
         */
        "textSelectTime"?: string;
        /**
          * Text for top label
          * @deprecated Use `i18nHeader` instead. Will be removed in 4.0.0.
          * @default HEADER_DEFAULT
         */
        "textTime"?: string;
        /**
          * Select time with format string Format has to match the `format` property.
          * @default DateTime.now().toFormat(this.format)
         */
        "time"?: string;
        /**
          * Set time reference
          * @deprecated This is determined by the currently set time. Will be removed in 4.0.0.
         */
        "timeReference"?: 'AM' | 'PM' | undefined;
    }
    interface IxToast {
        /**
          * Autoclose behavior
          * @default true
         */
        "autoClose"?: boolean;
        /**
          * Autoclose title after delay
          * @default 5000
         */
        "autoCloseDelay"?: number;
        /**
          * Icon of toast
         */
        "icon"?: string;
        /**
          * Icon color of toast
         */
        "iconColor"?: string;
        /**
          * Toast closed
         */
        "onCloseToast"?: (event: IxToastCustomEvent<any>) => void;
        /**
          * Toast title
         */
        "toastTitle"?: string;
        /**
          * Toast type
          * @default 'info'
         */
        "type"?: ToastType;
    }
    interface IxToastContainer {
        /**
          * @default 'toast-container'
         */
        "containerClass"?: string;
        /**
          * @default 'toast-container'
         */
        "containerId"?: string;
        /**
          * @default 'bottom-right'
         */
        "position"?: 'bottom-right' | 'top-right';
    }
    /**
     * @form-ready 
     */
    interface IxToggle {
        /**
          * Whether the slide-toggle element is checked or not.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Whether the slide-toggle element is disabled or not.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Hide `on` and `off` text
          * @default false
         */
        "hideText"?: boolean;
        /**
          * If true the control is in indeterminate state
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * Name of the checkbox component
         */
        "name"?: string;
        /**
          * An event will be dispatched each time the slide-toggle changes its value.
         */
        "onCheckedChange"?: (event: IxToggleCustomEvent<boolean>) => void;
        /**
          * An event will be dispatched each time the toggle is blurred.
         */
        "onIxBlur"?: (event: IxToggleCustomEvent<void>) => void;
        "onValueChange"?: (event: IxToggleCustomEvent<string>) => void;
        /**
          * Required state of the checkbox component.  If true, checkbox needs to be checked to be valid
          * @default false
         */
        "required"?: boolean;
        /**
          * Text for indeterminate state
          * @default 'Mixed'
         */
        "textIndeterminate"?: string;
        /**
          * Text for off state
          * @default 'Off'
         */
        "textOff"?: string;
        /**
          * Text for on state
          * @default 'On'
         */
        "textOn"?: string;
        /**
          * Value of the checkbox component
          * @default 'on'
         */
        "value"?: string;
    }
    interface IxToggleButton {
        /**
          * Disable the button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
          * @default false
         */
        "ghost"?: boolean;
        /**
          * Icon name
         */
        "icon"?: string;
        /**
          * Loading button
          * @default false
         */
        "loading"?: boolean;
        /**
          * Pressed change event
         */
        "onPressedChange"?: (event: IxToggleButtonCustomEvent<boolean>) => void;
        /**
          * Outline button
          * @default false
         */
        "outline"?: boolean;
        /**
          * Show button as pressed
          * @default false
         */
        "pressed"?: boolean;
        /**
          * Button variant.
          * @default 'secondary'
         */
        "variant"?: ButtonVariant1;
    }
    interface IxTooltip {
        /**
          * @default false
         */
        "animationFrame"?: boolean;
        /**
          * CSS selector for hover trigger element e.g. `for="[data-my-custom-select]"`
         */
        "for"?: ElementReference | ElementReference[];
        /**
          * @default 50
         */
        "hideDelay"?: number;
        /**
          * Define if the user can access the tooltip via mouse.
          * @default false
         */
        "interactive"?: boolean;
        /**
          * Initial placement of the tooltip. If the selected placement doesn't have enough space, the tooltip will be repositioned to another location.
          * @default 'top'
         */
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
        /**
          * @default 0
         */
        "showDelay"?: number;
        /**
          * Title of the tooltip
         */
        "titleContent"?: string;
    }
    interface IxTree {
        /**
          * Selection and collapsed state management
          * @default {}
         */
        "context"?: TreeContext;
        /**
          * Tree model
          * @default {}
         */
        "model"?: TreeModel<any>;
        /**
          * Context changed
         */
        "onContextChange"?: (event: IxTreeCustomEvent<TreeContext>) => void;
        /**
          * Node clicked event
         */
        "onNodeClicked"?: (event: IxTreeCustomEvent<string>) => void;
        /**
          * Emits removed nodes
         */
        "onNodeRemoved"?: (event: IxTreeCustomEvent<any>) => void;
        /**
          * Node toggled event
         */
        "onNodeToggled"?: (event: IxTreeCustomEvent<{ id: string; isExpanded: boolean }>) => void;
        /**
          * Render function of tree items
         */
        "renderItem"?: <T = any>(
    index: number,
    data: T,
    dataList: Array<T>,
    context: TreeContext,
    update: (callback: UpdateCallback) => void
  ) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root": string;
        /**
          * Enable to toggle items by click on the item
          * @since 3.0.0
         */
        "toggleOnItemClick"?: boolean;
    }
    interface IxTreeItem {
        /**
          * Context
         */
        "context"?: TreeItemContext;
        /**
          * Has tree item children
          * @default false
         */
        "hasChildren"?: boolean;
        /**
          * Click on item not on the expand/collapse icon
         */
        "onItemClick"?: (event: IxTreeItemCustomEvent<void>) => void;
        /**
          * Expand/Collapsed toggled
         */
        "onToggle"?: (event: IxTreeItemCustomEvent<void>) => void;
        /**
          * Text
         */
        "text"?: string;
    }
    interface IxTypography {
        /**
          * Display text bold
          * @default false
         */
        "bold"?: boolean;
        /**
          * Text format
         */
        "format"?: TypographyFormat;
        /**
          * Text color based on theme variables
         */
        "textColor"?: TypographyColors;
        /**
          * Text decoration
          * @default 'none'
         */
        "textDecoration"?: TextDecoration;
    }
    interface IxUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link "https://www.w3schools.com/tags/att_input_accept.asp"}
         */
        "accept"?: string;
        /**
          * Disable all input events
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text for disabled state
          * @default 'File upload currently not possible.'
         */
        "i18nUploadDisabled"?: string;
        /**
          * Label for upload file button
          * @default 'Upload file…'
         */
        "i18nUploadFile"?: string;
        /**
          * Will be used by state = UploadFileState.LOADING
          * @default 'Checking files…'
         */
        "loadingText"?: string;
        /**
          * Whether the text should wrap to more than one line
          * @default false
         */
        "multiline"?: boolean;
        /**
          * If multiple is true the user can drop or select multiple files
          * @default false
         */
        "multiple"?: boolean;
        /**
          * You get an array of Files after drop-action or browse action is finished
         */
        "onFilesChanged"?: (event: IxUploadCustomEvent<Array<File>>) => void;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
          * @default '+ Drag files here or…'
         */
        "selectFileText"?: string;
        /**
          * After a file is uploaded you can set the upload component to a defined state
          * @default UploadFileState.SELECT_FILE
         */
        "state"?: UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
          * @default 'Upload failed. Please try again.'
         */
        "uploadFailedText"?: string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
          * @default 'Upload successful'
         */
        "uploadSuccessText"?: string;
    }
    /**
     * @deprecated Will be removed with 4.0.0
     */
    interface IxValidationTooltip {
        /**
          * Message of the tooltip
         */
        "message"?: string;
        /**
          * Placement of the tooltip
          * @default 'top'
         */
        "placement"?: Side;
        /**
          * Suppress the automatic placement of the dropdown.
          * @default false
         */
        "suppressAutomaticPlacement"?: boolean;
    }
    interface IxWorkflowStep {
        /**
          * Activate navigation click
          * @default false
         */
        "clickable"?: boolean;
        /**
          * Set disabled
          * @default false
         */
        "disabled"?: boolean;
        "onSelectedChanged"?: (event: IxWorkflowStepCustomEvent<HTMLIxWorkflowStepElement>) => void;
        /**
          * Activate navigation click
          * @default 'undefined'
         */
        "position"?: 'first' | 'last' | 'single' | 'undefined';
        /**
          * Set selected
          * @default false
         */
        "selected"?: boolean;
        /**
          * Set status
          * @default 'open'
         */
        "status"?: 'open' | 'success' | 'done' | 'warning' | 'error';
        /**
          * Select orientation
          * @default false
         */
        "vertical"?: boolean;
    }
    interface IxWorkflowSteps {
        /**
          * Activate navigation click
          * @default false
         */
        "clickable"?: boolean;
        /**
          * On step selected event
         */
        "onStepSelected"?: (event: IxWorkflowStepsCustomEvent<number>) => void;
        /**
          * Activate navigation click
          * @default 0
         */
        "selectedIndex"?: number;
        /**
          * Select orientation
          * @default false
         */
        "vertical"?: boolean;
    }
    interface IntrinsicElements {
        "ix-action-card": IxActionCard;
        "ix-application": IxApplication;
        "ix-application-header": IxApplicationHeader;
        "ix-application-sidebar": IxApplicationSidebar;
        "ix-application-switch-modal": IxApplicationSwitchModal;
        "ix-avatar": IxAvatar;
        "ix-basic-navigation": IxBasicNavigation;
        "ix-blind": IxBlind;
        "ix-breadcrumb": IxBreadcrumb;
        "ix-breadcrumb-item": IxBreadcrumbItem;
        "ix-button": IxButton;
        "ix-card": IxCard;
        "ix-card-accordion": IxCardAccordion;
        "ix-card-content": IxCardContent;
        "ix-card-list": IxCardList;
        "ix-card-title": IxCardTitle;
        "ix-category-filter": IxCategoryFilter;
        "ix-checkbox": IxCheckbox;
        "ix-checkbox-group": IxCheckboxGroup;
        "ix-chip": IxChip;
        "ix-col": IxCol;
        "ix-content": IxContent;
        "ix-content-header": IxContentHeader;
        "ix-css-grid": IxCssGrid;
        "ix-css-grid-item": IxCssGridItem;
        "ix-custom-field": IxCustomField;
        "ix-date-dropdown": IxDateDropdown;
        "ix-date-input": IxDateInput;
        "ix-date-picker": IxDatePicker;
        "ix-date-time-card": IxDateTimeCard;
        "ix-datetime-picker": IxDatetimePicker;
        "ix-divider": IxDivider;
        "ix-drawer": IxDrawer;
        "ix-dropdown": IxDropdown;
        "ix-dropdown-button": IxDropdownButton;
        "ix-dropdown-header": IxDropdownHeader;
        "ix-dropdown-item": IxDropdownItem;
        "ix-dropdown-quick-actions": IxDropdownQuickActions;
        "ix-empty-state": IxEmptyState;
        "ix-event-list": IxEventList;
        "ix-event-list-item": IxEventListItem;
        "ix-expanding-search": IxExpandingSearch;
        "ix-field-label": IxFieldLabel;
        "ix-field-wrapper": IxFieldWrapper;
        "ix-filter-chip": IxFilterChip;
        "ix-flip-tile": IxFlipTile;
        "ix-flip-tile-content": IxFlipTileContent;
        "ix-group": IxGroup;
        "ix-group-context-menu": IxGroupContextMenu;
        "ix-group-item": IxGroupItem;
        "ix-helper-text": IxHelperText;
        "ix-icon-button": IxIconButton;
        "ix-icon-toggle-button": IxIconToggleButton;
        "ix-input": IxInput;
        "ix-input-group": IxInputGroup;
        "ix-key-value": IxKeyValue;
        "ix-key-value-list": IxKeyValueList;
        "ix-kpi": IxKpi;
        "ix-layout-auto": IxLayoutAuto;
        "ix-layout-grid": IxLayoutGrid;
        "ix-link-button": IxLinkButton;
        "ix-map-navigation": IxMapNavigation;
        "ix-map-navigation-overlay": IxMapNavigationOverlay;
        "ix-menu": IxMenu;
        "ix-menu-about": IxMenuAbout;
        "ix-menu-about-item": IxMenuAboutItem;
        "ix-menu-about-news": IxMenuAboutNews;
        "ix-menu-avatar": IxMenuAvatar;
        "ix-menu-avatar-item": IxMenuAvatarItem;
        "ix-menu-category": IxMenuCategory;
        "ix-menu-expand-icon": IxMenuExpandIcon;
        "ix-menu-item": IxMenuItem;
        "ix-menu-settings": IxMenuSettings;
        "ix-menu-settings-item": IxMenuSettingsItem;
        "ix-message-bar": IxMessageBar;
        "ix-modal": IxModal;
        "ix-modal-content": IxModalContent;
        "ix-modal-footer": IxModalFooter;
        "ix-modal-header": IxModalHeader;
        "ix-modal-loading": IxModalLoading;
        "ix-number-input": IxNumberInput;
        "ix-pagination": IxPagination;
        "ix-pane": IxPane;
        "ix-pane-layout": IxPaneLayout;
        "ix-pill": IxPill;
        "ix-progress-indicator": IxProgressIndicator;
        "ix-push-card": IxPushCard;
        "ix-radio": IxRadio;
        "ix-radio-group": IxRadioGroup;
        "ix-row": IxRow;
        "ix-select": IxSelect;
        "ix-select-item": IxSelectItem;
        "ix-slider": IxSlider;
        "ix-spinner": IxSpinner;
        "ix-split-button": IxSplitButton;
        "ix-tab-item": IxTabItem;
        "ix-tabs": IxTabs;
        "ix-textarea": IxTextarea;
        "ix-tile": IxTile;
        "ix-time-input": IxTimeInput;
        "ix-time-picker": IxTimePicker;
        "ix-toast": IxToast;
        "ix-toast-container": IxToastContainer;
        "ix-toggle": IxToggle;
        "ix-toggle-button": IxToggleButton;
        "ix-tooltip": IxTooltip;
        "ix-tree": IxTree;
        "ix-tree-item": IxTreeItem;
        "ix-typography": IxTypography;
        "ix-upload": IxUpload;
        "ix-validation-tooltip": IxValidationTooltip;
        "ix-workflow-step": IxWorkflowStep;
        "ix-workflow-steps": IxWorkflowSteps;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ix-action-card": LocalJSX.IxActionCard & JSXBase.HTMLAttributes<HTMLIxActionCardElement>;
            "ix-application": LocalJSX.IxApplication & JSXBase.HTMLAttributes<HTMLIxApplicationElement>;
            "ix-application-header": LocalJSX.IxApplicationHeader & JSXBase.HTMLAttributes<HTMLIxApplicationHeaderElement>;
            "ix-application-sidebar": LocalJSX.IxApplicationSidebar & JSXBase.HTMLAttributes<HTMLIxApplicationSidebarElement>;
            "ix-application-switch-modal": LocalJSX.IxApplicationSwitchModal & JSXBase.HTMLAttributes<HTMLIxApplicationSwitchModalElement>;
            "ix-avatar": LocalJSX.IxAvatar & JSXBase.HTMLAttributes<HTMLIxAvatarElement>;
            "ix-basic-navigation": LocalJSX.IxBasicNavigation & JSXBase.HTMLAttributes<HTMLIxBasicNavigationElement>;
            "ix-blind": LocalJSX.IxBlind & JSXBase.HTMLAttributes<HTMLIxBlindElement>;
            "ix-breadcrumb": LocalJSX.IxBreadcrumb & JSXBase.HTMLAttributes<HTMLIxBreadcrumbElement>;
            "ix-breadcrumb-item": LocalJSX.IxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLIxBreadcrumbItemElement>;
            "ix-button": LocalJSX.IxButton & JSXBase.HTMLAttributes<HTMLIxButtonElement>;
            "ix-card": LocalJSX.IxCard & JSXBase.HTMLAttributes<HTMLIxCardElement>;
            "ix-card-accordion": LocalJSX.IxCardAccordion & JSXBase.HTMLAttributes<HTMLIxCardAccordionElement>;
            "ix-card-content": LocalJSX.IxCardContent & JSXBase.HTMLAttributes<HTMLIxCardContentElement>;
            "ix-card-list": LocalJSX.IxCardList & JSXBase.HTMLAttributes<HTMLIxCardListElement>;
            "ix-card-title": LocalJSX.IxCardTitle & JSXBase.HTMLAttributes<HTMLIxCardTitleElement>;
            "ix-category-filter": LocalJSX.IxCategoryFilter & JSXBase.HTMLAttributes<HTMLIxCategoryFilterElement>;
            /**
             * @form-ready 
             */
            "ix-checkbox": LocalJSX.IxCheckbox & JSXBase.HTMLAttributes<HTMLIxCheckboxElement>;
            /**
             * @form-ready 
             */
            "ix-checkbox-group": LocalJSX.IxCheckboxGroup & JSXBase.HTMLAttributes<HTMLIxCheckboxGroupElement>;
            "ix-chip": LocalJSX.IxChip & JSXBase.HTMLAttributes<HTMLIxChipElement>;
            "ix-col": LocalJSX.IxCol & JSXBase.HTMLAttributes<HTMLIxColElement>;
            "ix-content": LocalJSX.IxContent & JSXBase.HTMLAttributes<HTMLIxContentElement>;
            "ix-content-header": LocalJSX.IxContentHeader & JSXBase.HTMLAttributes<HTMLIxContentHeaderElement>;
            "ix-css-grid": LocalJSX.IxCssGrid & JSXBase.HTMLAttributes<HTMLIxCssGridElement>;
            "ix-css-grid-item": LocalJSX.IxCssGridItem & JSXBase.HTMLAttributes<HTMLIxCssGridItemElement>;
            "ix-custom-field": LocalJSX.IxCustomField & JSXBase.HTMLAttributes<HTMLIxCustomFieldElement>;
            "ix-date-dropdown": LocalJSX.IxDateDropdown & JSXBase.HTMLAttributes<HTMLIxDateDropdownElement>;
            /**
             * @form-ready 
             */
            "ix-date-input": LocalJSX.IxDateInput & JSXBase.HTMLAttributes<HTMLIxDateInputElement>;
            "ix-date-picker": LocalJSX.IxDatePicker & JSXBase.HTMLAttributes<HTMLIxDatePickerElement>;
            "ix-date-time-card": LocalJSX.IxDateTimeCard & JSXBase.HTMLAttributes<HTMLIxDateTimeCardElement>;
            "ix-datetime-picker": LocalJSX.IxDatetimePicker & JSXBase.HTMLAttributes<HTMLIxDatetimePickerElement>;
            "ix-divider": LocalJSX.IxDivider & JSXBase.HTMLAttributes<HTMLIxDividerElement>;
            "ix-drawer": LocalJSX.IxDrawer & JSXBase.HTMLAttributes<HTMLIxDrawerElement>;
            "ix-dropdown": LocalJSX.IxDropdown & JSXBase.HTMLAttributes<HTMLIxDropdownElement>;
            "ix-dropdown-button": LocalJSX.IxDropdownButton & JSXBase.HTMLAttributes<HTMLIxDropdownButtonElement>;
            "ix-dropdown-header": LocalJSX.IxDropdownHeader & JSXBase.HTMLAttributes<HTMLIxDropdownHeaderElement>;
            "ix-dropdown-item": LocalJSX.IxDropdownItem & JSXBase.HTMLAttributes<HTMLIxDropdownItemElement>;
            "ix-dropdown-quick-actions": LocalJSX.IxDropdownQuickActions & JSXBase.HTMLAttributes<HTMLIxDropdownQuickActionsElement>;
            "ix-empty-state": LocalJSX.IxEmptyState & JSXBase.HTMLAttributes<HTMLIxEmptyStateElement>;
            "ix-event-list": LocalJSX.IxEventList & JSXBase.HTMLAttributes<HTMLIxEventListElement>;
            "ix-event-list-item": LocalJSX.IxEventListItem & JSXBase.HTMLAttributes<HTMLIxEventListItemElement>;
            "ix-expanding-search": LocalJSX.IxExpandingSearch & JSXBase.HTMLAttributes<HTMLIxExpandingSearchElement>;
            "ix-field-label": LocalJSX.IxFieldLabel & JSXBase.HTMLAttributes<HTMLIxFieldLabelElement>;
            "ix-field-wrapper": LocalJSX.IxFieldWrapper & JSXBase.HTMLAttributes<HTMLIxFieldWrapperElement>;
            "ix-filter-chip": LocalJSX.IxFilterChip & JSXBase.HTMLAttributes<HTMLIxFilterChipElement>;
            "ix-flip-tile": LocalJSX.IxFlipTile & JSXBase.HTMLAttributes<HTMLIxFlipTileElement>;
            "ix-flip-tile-content": LocalJSX.IxFlipTileContent & JSXBase.HTMLAttributes<HTMLIxFlipTileContentElement>;
            "ix-group": LocalJSX.IxGroup & JSXBase.HTMLAttributes<HTMLIxGroupElement>;
            "ix-group-context-menu": LocalJSX.IxGroupContextMenu & JSXBase.HTMLAttributes<HTMLIxGroupContextMenuElement>;
            "ix-group-item": LocalJSX.IxGroupItem & JSXBase.HTMLAttributes<HTMLIxGroupItemElement>;
            "ix-helper-text": LocalJSX.IxHelperText & JSXBase.HTMLAttributes<HTMLIxHelperTextElement>;
            "ix-icon-button": LocalJSX.IxIconButton & JSXBase.HTMLAttributes<HTMLIxIconButtonElement>;
            "ix-icon-toggle-button": LocalJSX.IxIconToggleButton & JSXBase.HTMLAttributes<HTMLIxIconToggleButtonElement>;
            /**
             * @form-ready 
             */
            "ix-input": LocalJSX.IxInput & JSXBase.HTMLAttributes<HTMLIxInputElement>;
            /**
             * @deprecated Will be removed with 4.0.0
             * Use the 'ix-input' component instead
             */
            "ix-input-group": LocalJSX.IxInputGroup & JSXBase.HTMLAttributes<HTMLIxInputGroupElement>;
            "ix-key-value": LocalJSX.IxKeyValue & JSXBase.HTMLAttributes<HTMLIxKeyValueElement>;
            "ix-key-value-list": LocalJSX.IxKeyValueList & JSXBase.HTMLAttributes<HTMLIxKeyValueListElement>;
            "ix-kpi": LocalJSX.IxKpi & JSXBase.HTMLAttributes<HTMLIxKpiElement>;
            "ix-layout-auto": LocalJSX.IxLayoutAuto & JSXBase.HTMLAttributes<HTMLIxLayoutAutoElement>;
            "ix-layout-grid": LocalJSX.IxLayoutGrid & JSXBase.HTMLAttributes<HTMLIxLayoutGridElement>;
            "ix-link-button": LocalJSX.IxLinkButton & JSXBase.HTMLAttributes<HTMLIxLinkButtonElement>;
            "ix-map-navigation": LocalJSX.IxMapNavigation & JSXBase.HTMLAttributes<HTMLIxMapNavigationElement>;
            "ix-map-navigation-overlay": LocalJSX.IxMapNavigationOverlay & JSXBase.HTMLAttributes<HTMLIxMapNavigationOverlayElement>;
            "ix-menu": LocalJSX.IxMenu & JSXBase.HTMLAttributes<HTMLIxMenuElement>;
            "ix-menu-about": LocalJSX.IxMenuAbout & JSXBase.HTMLAttributes<HTMLIxMenuAboutElement>;
            "ix-menu-about-item": LocalJSX.IxMenuAboutItem & JSXBase.HTMLAttributes<HTMLIxMenuAboutItemElement>;
            "ix-menu-about-news": LocalJSX.IxMenuAboutNews & JSXBase.HTMLAttributes<HTMLIxMenuAboutNewsElement>;
            "ix-menu-avatar": LocalJSX.IxMenuAvatar & JSXBase.HTMLAttributes<HTMLIxMenuAvatarElement>;
            "ix-menu-avatar-item": LocalJSX.IxMenuAvatarItem & JSXBase.HTMLAttributes<HTMLIxMenuAvatarItemElement>;
            "ix-menu-category": LocalJSX.IxMenuCategory & JSXBase.HTMLAttributes<HTMLIxMenuCategoryElement>;
            "ix-menu-expand-icon": LocalJSX.IxMenuExpandIcon & JSXBase.HTMLAttributes<HTMLIxMenuExpandIconElement>;
            "ix-menu-item": LocalJSX.IxMenuItem & JSXBase.HTMLAttributes<HTMLIxMenuItemElement>;
            "ix-menu-settings": LocalJSX.IxMenuSettings & JSXBase.HTMLAttributes<HTMLIxMenuSettingsElement>;
            "ix-menu-settings-item": LocalJSX.IxMenuSettingsItem & JSXBase.HTMLAttributes<HTMLIxMenuSettingsItemElement>;
            "ix-message-bar": LocalJSX.IxMessageBar & JSXBase.HTMLAttributes<HTMLIxMessageBarElement>;
            "ix-modal": LocalJSX.IxModal & JSXBase.HTMLAttributes<HTMLIxModalElement>;
            "ix-modal-content": LocalJSX.IxModalContent & JSXBase.HTMLAttributes<HTMLIxModalContentElement>;
            "ix-modal-footer": LocalJSX.IxModalFooter & JSXBase.HTMLAttributes<HTMLIxModalFooterElement>;
            "ix-modal-header": LocalJSX.IxModalHeader & JSXBase.HTMLAttributes<HTMLIxModalHeaderElement>;
            "ix-modal-loading": LocalJSX.IxModalLoading & JSXBase.HTMLAttributes<HTMLIxModalLoadingElement>;
            /**
             * @form-ready 
             */
            "ix-number-input": LocalJSX.IxNumberInput & JSXBase.HTMLAttributes<HTMLIxNumberInputElement>;
            "ix-pagination": LocalJSX.IxPagination & JSXBase.HTMLAttributes<HTMLIxPaginationElement>;
            "ix-pane": LocalJSX.IxPane & JSXBase.HTMLAttributes<HTMLIxPaneElement>;
            "ix-pane-layout": LocalJSX.IxPaneLayout & JSXBase.HTMLAttributes<HTMLIxPaneLayoutElement>;
            "ix-pill": LocalJSX.IxPill & JSXBase.HTMLAttributes<HTMLIxPillElement>;
            /**
             * @since 3.2.0
             */
            "ix-progress-indicator": LocalJSX.IxProgressIndicator & JSXBase.HTMLAttributes<HTMLIxProgressIndicatorElement>;
            "ix-push-card": LocalJSX.IxPushCard & JSXBase.HTMLAttributes<HTMLIxPushCardElement>;
            /**
             * @form-ready 
             */
            "ix-radio": LocalJSX.IxRadio & JSXBase.HTMLAttributes<HTMLIxRadioElement>;
            /**
             * @form-ready 
             */
            "ix-radio-group": LocalJSX.IxRadioGroup & JSXBase.HTMLAttributes<HTMLIxRadioGroupElement>;
            "ix-row": LocalJSX.IxRow & JSXBase.HTMLAttributes<HTMLIxRowElement>;
            /**
             * @form-ready 
             */
            "ix-select": LocalJSX.IxSelect & JSXBase.HTMLAttributes<HTMLIxSelectElement>;
            "ix-select-item": LocalJSX.IxSelectItem & JSXBase.HTMLAttributes<HTMLIxSelectItemElement>;
            "ix-slider": LocalJSX.IxSlider & JSXBase.HTMLAttributes<HTMLIxSliderElement>;
            "ix-spinner": LocalJSX.IxSpinner & JSXBase.HTMLAttributes<HTMLIxSpinnerElement>;
            "ix-split-button": LocalJSX.IxSplitButton & JSXBase.HTMLAttributes<HTMLIxSplitButtonElement>;
            "ix-tab-item": LocalJSX.IxTabItem & JSXBase.HTMLAttributes<HTMLIxTabItemElement>;
            "ix-tabs": LocalJSX.IxTabs & JSXBase.HTMLAttributes<HTMLIxTabsElement>;
            /**
             * @form-ready 
             */
            "ix-textarea": LocalJSX.IxTextarea & JSXBase.HTMLAttributes<HTMLIxTextareaElement>;
            "ix-tile": LocalJSX.IxTile & JSXBase.HTMLAttributes<HTMLIxTileElement>;
            /**
             * @since 3.2.0
             * @form-ready 
             */
            "ix-time-input": LocalJSX.IxTimeInput & JSXBase.HTMLAttributes<HTMLIxTimeInputElement>;
            "ix-time-picker": LocalJSX.IxTimePicker & JSXBase.HTMLAttributes<HTMLIxTimePickerElement>;
            "ix-toast": LocalJSX.IxToast & JSXBase.HTMLAttributes<HTMLIxToastElement>;
            "ix-toast-container": LocalJSX.IxToastContainer & JSXBase.HTMLAttributes<HTMLIxToastContainerElement>;
            /**
             * @form-ready 
             */
            "ix-toggle": LocalJSX.IxToggle & JSXBase.HTMLAttributes<HTMLIxToggleElement>;
            "ix-toggle-button": LocalJSX.IxToggleButton & JSXBase.HTMLAttributes<HTMLIxToggleButtonElement>;
            "ix-tooltip": LocalJSX.IxTooltip & JSXBase.HTMLAttributes<HTMLIxTooltipElement>;
            "ix-tree": LocalJSX.IxTree & JSXBase.HTMLAttributes<HTMLIxTreeElement>;
            "ix-tree-item": LocalJSX.IxTreeItem & JSXBase.HTMLAttributes<HTMLIxTreeItemElement>;
            "ix-typography": LocalJSX.IxTypography & JSXBase.HTMLAttributes<HTMLIxTypographyElement>;
            "ix-upload": LocalJSX.IxUpload & JSXBase.HTMLAttributes<HTMLIxUploadElement>;
            /**
             * @deprecated Will be removed with 4.0.0
             */
            "ix-validation-tooltip": LocalJSX.IxValidationTooltip & JSXBase.HTMLAttributes<HTMLIxValidationTooltipElement>;
            "ix-workflow-step": LocalJSX.IxWorkflowStep & JSXBase.HTMLAttributes<HTMLIxWorkflowStepElement>;
            "ix-workflow-steps": LocalJSX.IxWorkflowSteps & JSXBase.HTMLAttributes<HTMLIxWorkflowStepsElement>;
        }
    }
}
