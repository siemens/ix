/*
 * SPDX-FileCopyrightText: 2024 Siemens AG
 *
 * SPDX-License-Identifier: MIT
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { CopyTask, JsonDocs } from '@stencil/core/internal';
import fs from 'fs';
import path from 'path';

function normalizeProperties(obj: JsonDocs, deleteProps: string[]) {
  for (const key in obj) {
    if (obj[key] && typeof obj[key] === 'object') {
      normalizeProperties(obj[key], deleteProps);
    } else if (deleteProps.includes(key)) {
      const posixPath = path
        .join(
          ...path
            .relative(path.join(__dirname, '..', '..'), obj[key])
            .split(path.sep)
        )
        .toString();
      obj[key] = posixPath.replace(/\\/g, '/');
    }
  }

  return obj;
}

export const customComponentDocGenerator = (docs: JsonDocs): void => {
  // Delete timestamp from docs, because turbo caching not working with autogenerated time
  docs.timestamp = '';
  const docsJson = JSON.stringify(docs, null, 2);

  // Remove all paths from component doc
  const patchedJson = normalizeProperties(JSON.parse(docsJson), [
    'dirPath',
    'filePath',
    'readmePath',
    'usagesDir',
    'path',
  ]);

  fs.writeFileSync('component-doc.json', JSON.stringify(patchedJson, null, 2));
};

export const getDevAssets = () => {
  const copyAssets: CopyTask[] = [
    {
      src: './../node_modules/@siemens/ix-icons',
      dest: 'build',
      keepDirStructure: true,
    },
  ];

  try {
    const brandTheme = require.resolve('@siemens/ix-brand-theme');

    if (brandTheme) {
      const themeFolder = path.join(brandTheme, '..', '..');
      copyAssets.push({
        src: themeFolder,
        dest: 'build',
        keepDirStructure: true,
      });
    }
  } catch (e) {
    console.warn('No additional theme fround');
  }

  return copyAssets;
};
