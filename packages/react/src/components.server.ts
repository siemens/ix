/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 * Do __not__ import components from this file as server side rendered components
 * may not hydrate due to missing Stencil runtime. Instead, import these components through the generated 'components.ts'
 * file that re-exports all components with the 'use client' directive.
 */

/* eslint-disable */

import { type BorderlessChangedEvent, type CustomCloseEvent, type CustomLabelChangeEvent, type DateChangeEvent, type DateInputValidityState, type DateRangeChangeEvent, type DateTimeDateChangeEvent, type DateTimeSelectEvent, type ExpandedChangedEvent, type FilterState, type InputState, type IxBreadcrumbCustomEvent, type IxCardListCustomEvent, type IxCategoryFilterCustomEvent, type IxDateDropdownCustomEvent, type IxDateInputCustomEvent, type IxDatePickerCustomEvent, type IxDatetimePickerCustomEvent, type IxGroupItemCustomEvent, type IxInputCustomEvent, type IxMenuAboutCustomEvent, type IxMenuAboutItemCustomEvent, type IxMenuAboutNewsCustomEvent, type IxMenuAvatarItemCustomEvent, type IxMenuSettingsCustomEvent, type IxMenuSettingsItemCustomEvent, type IxModalHeaderCustomEvent, type IxNumberInputCustomEvent, type IxPaneCustomEvent, type IxSplitButtonCustomEvent, type IxTabItemCustomEvent, type IxTextareaCustomEvent, type IxUploadCustomEvent, type TabClickDetail, type VariantChangedEvent } from "@siemens/ix";
import { IxActionCard as IxActionCardElement } from "@siemens/ix/components/ix-action-card.js";
import { IxApplicationHeader as IxApplicationHeaderElement } from "@siemens/ix/components/ix-application-header.js";
import { IxApplication as IxApplicationElement } from "@siemens/ix/components/ix-application.js";
import { IxAvatar as IxAvatarElement } from "@siemens/ix/components/ix-avatar.js";
import { IxBasicNavigation as IxBasicNavigationElement } from "@siemens/ix/components/ix-basic-navigation.js";
import { IxBlind as IxBlindElement } from "@siemens/ix/components/ix-blind.js";
import { IxBreadcrumbItem as IxBreadcrumbItemElement } from "@siemens/ix/components/ix-breadcrumb-item.js";
import { IxBreadcrumb as IxBreadcrumbElement } from "@siemens/ix/components/ix-breadcrumb.js";
import { IxButton as IxButtonElement } from "@siemens/ix/components/ix-button.js";
import { IxCardAccordion as IxCardAccordionElement } from "@siemens/ix/components/ix-card-accordion.js";
import { IxCardContent as IxCardContentElement } from "@siemens/ix/components/ix-card-content.js";
import { IxCardList as IxCardListElement } from "@siemens/ix/components/ix-card-list.js";
import { IxCardTitle as IxCardTitleElement } from "@siemens/ix/components/ix-card-title.js";
import { IxCard as IxCardElement } from "@siemens/ix/components/ix-card.js";
import { IxCategoryFilter as IxCategoryFilterElement } from "@siemens/ix/components/ix-category-filter.js";
import { IxCheckboxGroup as IxCheckboxGroupElement } from "@siemens/ix/components/ix-checkbox-group.js";
import { IxCheckbox as IxCheckboxElement } from "@siemens/ix/components/ix-checkbox.js";
import { IxChip as IxChipElement } from "@siemens/ix/components/ix-chip.js";
import { IxCol as IxColElement } from "@siemens/ix/components/ix-col.js";
import { IxContentHeader as IxContentHeaderElement } from "@siemens/ix/components/ix-content-header.js";
import { IxContent as IxContentElement } from "@siemens/ix/components/ix-content.js";
import { IxCustomField as IxCustomFieldElement } from "@siemens/ix/components/ix-custom-field.js";
import { IxDateDropdown as IxDateDropdownElement } from "@siemens/ix/components/ix-date-dropdown.js";
import { IxDateInput as IxDateInputElement } from "@siemens/ix/components/ix-date-input.js";
import { IxDatePicker as IxDatePickerElement } from "@siemens/ix/components/ix-date-picker.js";
import { IxDatetimePicker as IxDatetimePickerElement } from "@siemens/ix/components/ix-datetime-picker.js";
import { IxDivider as IxDividerElement } from "@siemens/ix/components/ix-divider.js";
import { IxDrawer as IxDrawerElement } from "@siemens/ix/components/ix-drawer.js";
import { IxDropdownButton as IxDropdownButtonElement } from "@siemens/ix/components/ix-dropdown-button.js";
import { IxDropdownHeader as IxDropdownHeaderElement } from "@siemens/ix/components/ix-dropdown-header.js";
import { IxDropdownItem as IxDropdownItemElement } from "@siemens/ix/components/ix-dropdown-item.js";
import { IxDropdownQuickActions as IxDropdownQuickActionsElement } from "@siemens/ix/components/ix-dropdown-quick-actions.js";
import { IxDropdown as IxDropdownElement } from "@siemens/ix/components/ix-dropdown.js";
import { IxEmptyState as IxEmptyStateElement } from "@siemens/ix/components/ix-empty-state.js";
import { IxEventListItem as IxEventListItemElement } from "@siemens/ix/components/ix-event-list-item.js";
import { IxEventList as IxEventListElement } from "@siemens/ix/components/ix-event-list.js";
import { IxExpandingSearch as IxExpandingSearchElement } from "@siemens/ix/components/ix-expanding-search.js";
import { IxFieldLabel as IxFieldLabelElement } from "@siemens/ix/components/ix-field-label.js";
import { IxFilterChip as IxFilterChipElement } from "@siemens/ix/components/ix-filter-chip.js";
import { IxFlipTileContent as IxFlipTileContentElement } from "@siemens/ix/components/ix-flip-tile-content.js";
import { IxFlipTile as IxFlipTileElement } from "@siemens/ix/components/ix-flip-tile.js";
import { IxGroupContextMenu as IxGroupContextMenuElement } from "@siemens/ix/components/ix-group-context-menu.js";
import { IxGroupItem as IxGroupItemElement } from "@siemens/ix/components/ix-group-item.js";
import { IxGroup as IxGroupElement } from "@siemens/ix/components/ix-group.js";
import { IxHelperText as IxHelperTextElement } from "@siemens/ix/components/ix-helper-text.js";
import { IxIconButton as IxIconButtonElement } from "@siemens/ix/components/ix-icon-button.js";
import { IxIconToggleButton as IxIconToggleButtonElement } from "@siemens/ix/components/ix-icon-toggle-button.js";
import { IxInputGroup as IxInputGroupElement } from "@siemens/ix/components/ix-input-group.js";
import { IxInput as IxInputElement } from "@siemens/ix/components/ix-input.js";
import { IxKeyValueList as IxKeyValueListElement } from "@siemens/ix/components/ix-key-value-list.js";
import { IxKeyValue as IxKeyValueElement } from "@siemens/ix/components/ix-key-value.js";
import { IxKpi as IxKpiElement } from "@siemens/ix/components/ix-kpi.js";
import { IxLayoutAuto as IxLayoutAutoElement } from "@siemens/ix/components/ix-layout-auto.js";
import { IxLayoutGrid as IxLayoutGridElement } from "@siemens/ix/components/ix-layout-grid.js";
import { IxLinkButton as IxLinkButtonElement } from "@siemens/ix/components/ix-link-button.js";
import { IxMapNavigationOverlay as IxMapNavigationOverlayElement } from "@siemens/ix/components/ix-map-navigation-overlay.js";
import { IxMapNavigation as IxMapNavigationElement } from "@siemens/ix/components/ix-map-navigation.js";
import { IxMenuAboutItem as IxMenuAboutItemElement } from "@siemens/ix/components/ix-menu-about-item.js";
import { IxMenuAboutNews as IxMenuAboutNewsElement } from "@siemens/ix/components/ix-menu-about-news.js";
import { IxMenuAbout as IxMenuAboutElement } from "@siemens/ix/components/ix-menu-about.js";
import { IxMenuAvatarItem as IxMenuAvatarItemElement } from "@siemens/ix/components/ix-menu-avatar-item.js";
import { IxMenuAvatar as IxMenuAvatarElement } from "@siemens/ix/components/ix-menu-avatar.js";
import { IxMenuCategory as IxMenuCategoryElement } from "@siemens/ix/components/ix-menu-category.js";
import { IxMenuItem as IxMenuItemElement } from "@siemens/ix/components/ix-menu-item.js";
import { IxMenuSettingsItem as IxMenuSettingsItemElement } from "@siemens/ix/components/ix-menu-settings-item.js";
import { IxMenuSettings as IxMenuSettingsElement } from "@siemens/ix/components/ix-menu-settings.js";
import { IxMenu as IxMenuElement } from "@siemens/ix/components/ix-menu.js";
import { IxMessageBar as IxMessageBarElement } from "@siemens/ix/components/ix-message-bar.js";
import { IxModalContent as IxModalContentElement } from "@siemens/ix/components/ix-modal-content.js";
import { IxModalFooter as IxModalFooterElement } from "@siemens/ix/components/ix-modal-footer.js";
import { IxModalHeader as IxModalHeaderElement } from "@siemens/ix/components/ix-modal-header.js";
import { IxModal as IxModalElement } from "@siemens/ix/components/ix-modal.js";
import { IxNumberInput as IxNumberInputElement } from "@siemens/ix/components/ix-number-input.js";
import { IxPagination as IxPaginationElement } from "@siemens/ix/components/ix-pagination.js";
import { IxPaneLayout as IxPaneLayoutElement } from "@siemens/ix/components/ix-pane-layout.js";
import { IxPane as IxPaneElement } from "@siemens/ix/components/ix-pane.js";
import { IxPill as IxPillElement } from "@siemens/ix/components/ix-pill.js";
import { IxPushCard as IxPushCardElement } from "@siemens/ix/components/ix-push-card.js";
import { IxRadioGroup as IxRadioGroupElement } from "@siemens/ix/components/ix-radio-group.js";
import { IxRadio as IxRadioElement } from "@siemens/ix/components/ix-radio.js";
import { IxRow as IxRowElement } from "@siemens/ix/components/ix-row.js";
import { IxSelectItem as IxSelectItemElement } from "@siemens/ix/components/ix-select-item.js";
import { IxSelect as IxSelectElement } from "@siemens/ix/components/ix-select.js";
import { IxSlider as IxSliderElement } from "@siemens/ix/components/ix-slider.js";
import { IxSpinner as IxSpinnerElement } from "@siemens/ix/components/ix-spinner.js";
import { IxSplitButton as IxSplitButtonElement } from "@siemens/ix/components/ix-split-button.js";
import { IxTabItem as IxTabItemElement } from "@siemens/ix/components/ix-tab-item.js";
import { IxTabs as IxTabsElement } from "@siemens/ix/components/ix-tabs.js";
import { IxTextarea as IxTextareaElement } from "@siemens/ix/components/ix-textarea.js";
import { IxTile as IxTileElement } from "@siemens/ix/components/ix-tile.js";
import { IxTimePicker as IxTimePickerElement } from "@siemens/ix/components/ix-time-picker.js";
import { IxToastContainer as IxToastContainerElement } from "@siemens/ix/components/ix-toast-container.js";
import { IxToast as IxToastElement } from "@siemens/ix/components/ix-toast.js";
import { IxToggleButton as IxToggleButtonElement } from "@siemens/ix/components/ix-toggle-button.js";
import { IxToggle as IxToggleElement } from "@siemens/ix/components/ix-toggle.js";
import { IxTooltip as IxTooltipElement } from "@siemens/ix/components/ix-tooltip.js";
import { IxTypography as IxTypographyElement } from "@siemens/ix/components/ix-typography.js";
import { IxUpload as IxUploadElement } from "@siemens/ix/components/ix-upload.js";
import { IxValidationTooltip as IxValidationTooltipElement } from "@siemens/ix/components/ix-validation-tooltip.js";
import { IxWorkflowStep as IxWorkflowStepElement } from "@siemens/ix/components/ix-workflow-step.js";
import { IxWorkflowSteps as IxWorkflowStepsElement } from "@siemens/ix/components/ix-workflow-steps.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent, type SerializeShadowRootOptions } from '@stencil/react-output-target/ssr';

export const serializeShadowRoot: SerializeShadowRootOptions = { "scoped": [], "default": "declarative-shadow-dom" };

export type IxActionCardEvents = NonNullable<unknown>;

export const IxActionCard: StencilReactComponent<IxActionCardElement, IxActionCardEvents> = /*@__PURE__*/ createComponent<IxActionCardElement, IxActionCardEvents>({
    tagName: 'ix-action-card',
    properties: {
        variant: 'variant',
        icon: 'icon',
        heading: 'heading',
        subheading: 'subheading',
        selected: 'selected'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxApplicationEvents = NonNullable<unknown>;

export const IxApplication: StencilReactComponent<IxApplicationElement, IxApplicationEvents> = /*@__PURE__*/ createComponent<IxApplicationElement, IxApplicationEvents>({
    tagName: 'ix-application',
    properties: {
        theme: 'theme',
        themeSystemAppearance: 'theme-system-appearance',
        forceBreakpoint: 'force-breakpoint',
        breakpoints: 'breakpoints',
        appSwitchConfig: 'app-switch-config'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxApplicationHeaderEvents = {
    onMenuToggle: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>
};

export const IxApplicationHeader: StencilReactComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents> = /*@__PURE__*/ createComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents>({
    tagName: 'ix-application-header',
    properties: {
        name: 'name',
        showMenu: 'show-menu'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxAvatarEvents = NonNullable<unknown>;

export const IxAvatar: StencilReactComponent<IxAvatarElement, IxAvatarEvents> = /*@__PURE__*/ createComponent<IxAvatarElement, IxAvatarEvents>({
    tagName: 'ix-avatar',
    properties: {
        image: 'image',
        initials: 'initials',
        username: 'username',
        extra: 'extra'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxBasicNavigationEvents = NonNullable<unknown>;

export const IxBasicNavigation: StencilReactComponent<IxBasicNavigationElement, IxBasicNavigationEvents> = /*@__PURE__*/ createComponent<IxBasicNavigationElement, IxBasicNavigationEvents>({
    tagName: 'ix-basic-navigation',
    properties: {
        applicationName: 'application-name',
        hideHeader: 'hide-header',
        forceBreakpoint: 'force-breakpoint',
        breakpoints: 'breakpoints'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxBlindEvents = { onCollapsedChange: EventName<CustomEvent<boolean>> };

export const IxBlind: StencilReactComponent<IxBlindElement, IxBlindEvents> = /*@__PURE__*/ createComponent<IxBlindElement, IxBlindEvents>({
    tagName: 'ix-blind',
    properties: {
        collapsed: 'collapsed',
        label: 'label',
        sublabel: 'sublabel',
        icon: 'icon',
        variant: 'variant'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxBreadcrumbEvents = {
    onItemClick: EventName<CustomEvent<string>>,
    onNextClick: EventName<IxBreadcrumbCustomEvent<{ event: UIEvent; item: string }>>
};

export const IxBreadcrumb: StencilReactComponent<IxBreadcrumbElement, IxBreadcrumbEvents> = /*@__PURE__*/ createComponent<IxBreadcrumbElement, IxBreadcrumbEvents>({
    tagName: 'ix-breadcrumb',
    properties: {
        visibleItemCount: 'visible-item-count',
        nextItems: 'next-items',
        ghost: 'ghost',
        ariaLabelPreviousButton: 'aria-label-previous-button'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxBreadcrumbItemEvents = NonNullable<unknown>;

export const IxBreadcrumbItem: StencilReactComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents> = /*@__PURE__*/ createComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents>({
    tagName: 'ix-breadcrumb-item',
    properties: {
        label: 'label',
        icon: 'icon',
        ghost: 'ghost',
        visible: 'visible',
        showChevron: 'show-chevron',
        isDropdownTrigger: 'is-dropdown-trigger'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxButtonEvents = NonNullable<unknown>;

export const IxButton: StencilReactComponent<IxButtonElement, IxButtonEvents> = /*@__PURE__*/ createComponent<IxButtonElement, IxButtonEvents>({
    tagName: 'ix-button',
    properties: {
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        disabled: 'disabled',
        type: 'type',
        loading: 'loading',
        icon: 'icon',
        alignment: 'alignment',
        iconSize: 'icon-size'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCardEvents = NonNullable<unknown>;

export const IxCard: StencilReactComponent<IxCardElement, IxCardEvents> = /*@__PURE__*/ createComponent<IxCardElement, IxCardEvents>({
    tagName: 'ix-card',
    properties: {
        variant: 'variant',
        selected: 'selected'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCardAccordionEvents = NonNullable<unknown>;

export const IxCardAccordion: StencilReactComponent<IxCardAccordionElement, IxCardAccordionEvents> = /*@__PURE__*/ createComponent<IxCardAccordionElement, IxCardAccordionEvents>({
    tagName: 'ix-card-accordion',
    properties: { collapse: 'collapse' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCardContentEvents = NonNullable<unknown>;

export const IxCardContent: StencilReactComponent<IxCardContentElement, IxCardContentEvents> = /*@__PURE__*/ createComponent<IxCardContentElement, IxCardContentEvents>({
    tagName: 'ix-card-content',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCardListEvents = {
    onCollapseChanged: EventName<CustomEvent<boolean>>,
    onShowAllClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>,
    onShowMoreCardClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>
};

export const IxCardList: StencilReactComponent<IxCardListElement, IxCardListEvents> = /*@__PURE__*/ createComponent<IxCardListElement, IxCardListEvents>({
    tagName: 'ix-card-list',
    properties: {
        label: 'label',
        collapse: 'collapse',
        listStyle: 'list-style',
        maxVisibleCards: 'max-visible-cards',
        showAllCount: 'show-all-count',
        suppressOverflowHandling: 'suppress-overflow-handling',
        hideShowAll: 'hide-show-all',
        i18nShowAll: 'i-1-8n-show-all',
        i18nMoreCards: 'i-1-8n-more-cards'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCardTitleEvents = NonNullable<unknown>;

export const IxCardTitle: StencilReactComponent<IxCardTitleElement, IxCardTitleEvents> = /*@__PURE__*/ createComponent<IxCardTitleElement, IxCardTitleEvents>({
    tagName: 'ix-card-title',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCategoryFilterEvents = {
    onCategoryChanged: EventName<CustomEvent<string>>,
    onInputChanged: EventName<IxCategoryFilterCustomEvent<InputState>>,
    onFilterChanged: EventName<IxCategoryFilterCustomEvent<FilterState>>,
    onFilterCleared: EventName<CustomEvent<void>>
};

export const IxCategoryFilter: StencilReactComponent<IxCategoryFilterElement, IxCategoryFilterEvents> = /*@__PURE__*/ createComponent<IxCategoryFilterElement, IxCategoryFilterEvents>({
    tagName: 'ix-category-filter',
    properties: {
        disabled: 'disabled',
        readonly: 'readonly',
        filterState: 'filter-state',
        placeholder: 'placeholder',
        categories: 'categories',
        nonSelectableCategories: 'non-selectable-categories',
        suggestions: 'suggestions',
        icon: 'icon',
        hideIcon: 'hide-icon',
        staticOperator: 'static-operator',
        repeatCategories: 'repeat-categories',
        tmpDisableScrollIntoView: 'tmp-disable-scroll-into-view',
        labelCategories: 'label-categories',
        i18nPlainText: 'i-1-8n-plain-text'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCheckboxEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxCheckbox: StencilReactComponent<IxCheckboxElement, IxCheckboxEvents> = /*@__PURE__*/ createComponent<IxCheckboxElement, IxCheckboxEvents>({
    tagName: 'ix-checkbox',
    properties: {
        name: 'name',
        value: 'value',
        label: 'label',
        checked: 'checked',
        disabled: 'disabled',
        indeterminate: 'indeterminate',
        required: 'required'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCheckboxGroupEvents = NonNullable<unknown>;

export const IxCheckboxGroup: StencilReactComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents> = /*@__PURE__*/ createComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents>({
    tagName: 'ix-checkbox-group',
    properties: {
        helperText: 'helper-text',
        label: 'label',
        direction: 'direction',
        invalidText: 'invalid-text',
        infoText: 'info-text',
        validText: 'valid-text',
        warningText: 'warning-text',
        showTextAsTooltip: 'show-text-as-tooltip'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxChipEvents = { onCloseChip: EventName<CustomEvent<any>> };

export const IxChip: StencilReactComponent<IxChipElement, IxChipEvents> = /*@__PURE__*/ createComponent<IxChipElement, IxChipEvents>({
    tagName: 'ix-chip',
    properties: {
        variant: 'variant',
        active: 'active',
        closable: 'closable',
        icon: 'icon',
        background: 'background',
        chipColor: 'chip-color',
        outline: 'outline',
        tooltipText: 'tooltip-text'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxColEvents = NonNullable<unknown>;

export const IxCol: StencilReactComponent<IxColElement, IxColEvents> = /*@__PURE__*/ createComponent<IxColElement, IxColEvents>({
    tagName: 'ix-col',
    properties: {
        size: 'size',
        sizeSm: 'size-sm',
        sizeMd: 'size-md',
        sizeLg: 'size-lg'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxContentEvents = NonNullable<unknown>;

export const IxContent: StencilReactComponent<IxContentElement, IxContentEvents> = /*@__PURE__*/ createComponent<IxContentElement, IxContentEvents>({
    tagName: 'ix-content',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxContentHeaderEvents = { onBackButtonClick: EventName<CustomEvent<void>> };

export const IxContentHeader: StencilReactComponent<IxContentHeaderElement, IxContentHeaderEvents> = /*@__PURE__*/ createComponent<IxContentHeaderElement, IxContentHeaderEvents>({
    tagName: 'ix-content-header',
    properties: {
        variant: 'variant',
        headerTitle: 'header-title',
        headerSubtitle: 'header-subtitle',
        hasBackButton: 'has-back-button'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxCustomFieldEvents = NonNullable<unknown>;

export const IxCustomField: StencilReactComponent<IxCustomFieldElement, IxCustomFieldEvents> = /*@__PURE__*/ createComponent<IxCustomFieldElement, IxCustomFieldEvents>({
    tagName: 'ix-custom-field',
    properties: {
        required: 'required',
        label: 'label',
        helperText: 'helper-text',
        infoText: 'info-text',
        warningText: 'warning-text',
        invalidText: 'invalid-text',
        validText: 'valid-text',
        showTextAsTooltip: 'show-text-as-tooltip'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDateDropdownEvents = { onDateRangeChange: EventName<IxDateDropdownCustomEvent<DateRangeChangeEvent>> };

export const IxDateDropdown: StencilReactComponent<IxDateDropdownElement, IxDateDropdownEvents> = /*@__PURE__*/ createComponent<IxDateDropdownElement, IxDateDropdownEvents>({
    tagName: 'ix-date-dropdown',
    properties: {
        disabled: 'disabled',
        format: 'format',
        range: 'range',
        from: 'from',
        to: 'to',
        minDate: 'min-date',
        maxDate: 'max-date',
        dateRangeId: 'date-range-id',
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        loading: 'loading',
        showWeekNumbers: 'show-week-numbers',
        customRangeAllowed: 'custom-range-allowed',
        dateRangeOptions: 'date-range-options',
        locale: 'locale',
        weekStartIndex: 'week-start-index',
        i18nCustomItem: 'i18n-custom-item',
        i18nDone: 'i18n-done',
        i18nNoRange: 'i18n-no-range',
        today: 'today'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDateInputEvents = {
    onValueChange: EventName<CustomEvent<string | undefined>>,
    onValidityStateChange: EventName<IxDateInputCustomEvent<DateInputValidityState>>
};

export const IxDateInput: StencilReactComponent<IxDateInputElement, IxDateInputEvents> = /*@__PURE__*/ createComponent<IxDateInputElement, IxDateInputEvents>({
    tagName: 'ix-date-input',
    properties: {
        name: 'name',
        placeholder: 'placeholder',
        value: 'value',
        locale: 'locale',
        format: 'format',
        required: 'required',
        helperText: 'helper-text',
        label: 'label',
        invalidText: 'invalid-text',
        readonly: 'readonly',
        disabled: 'disabled',
        infoText: 'info-text',
        warningText: 'warning-text',
        validText: 'valid-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        i18nErrorDateUnparsable: 'i18n-error-date-unparsable',
        showWeekNumbers: 'show-week-numbers'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDatePickerEvents = {
    onDateChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateRangeChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateSelect: EventName<IxDatePickerCustomEvent<DateChangeEvent>>
};

export const IxDatePicker: StencilReactComponent<IxDatePickerElement, IxDatePickerEvents> = /*@__PURE__*/ createComponent<IxDatePickerElement, IxDatePickerEvents>({
    tagName: 'ix-date-picker',
    properties: {
        format: 'format',
        range: 'range',
        corners: 'corners',
        from: 'from',
        to: 'to',
        minDate: 'min-date',
        maxDate: 'max-date',
        i18nDone: 'i18n-done',
        weekStartIndex: 'week-start-index',
        locale: 'locale',
        showWeekNumbers: 'show-week-numbers',
        standaloneAppearance: 'standalone-appearance',
        today: 'today'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDatetimePickerEvents = {
    onTimeChange: EventName<CustomEvent<string>>,
    onDateChange: EventName<IxDatetimePickerCustomEvent<DateTimeDateChangeEvent>>,
    onDateSelect: EventName<IxDatetimePickerCustomEvent<DateTimeSelectEvent>>
};

export const IxDatetimePicker: StencilReactComponent<IxDatetimePickerElement, IxDatetimePickerEvents> = /*@__PURE__*/ createComponent<IxDatetimePickerElement, IxDatetimePickerEvents>({
    tagName: 'ix-datetime-picker',
    properties: {
        range: 'range',
        showHour: 'show-hour',
        showMinutes: 'show-minutes',
        showSeconds: 'show-seconds',
        minDate: 'min-date',
        maxDate: 'max-date',
        dateFormat: 'date-format',
        timeFormat: 'time-format',
        from: 'from',
        to: 'to',
        time: 'time',
        showTimeReference: 'show-time-reference',
        timeReference: 'time-reference',
        i18nDone: 'i18n-done',
        i18nTime: 'i-1-8n-time',
        weekStartIndex: 'week-start-index',
        locale: 'locale',
        showWeekNumbers: 'show-week-numbers'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDividerEvents = NonNullable<unknown>;

export const IxDivider: StencilReactComponent<IxDividerElement, IxDividerEvents> = /*@__PURE__*/ createComponent<IxDividerElement, IxDividerEvents>({
    tagName: 'ix-divider',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDrawerEvents = {
    onOpen: EventName<CustomEvent<any>>,
    onDrawerClose: EventName<CustomEvent<any>>
};

export const IxDrawer: StencilReactComponent<IxDrawerElement, IxDrawerEvents> = /*@__PURE__*/ createComponent<IxDrawerElement, IxDrawerEvents>({
    tagName: 'ix-drawer',
    properties: {
        show: 'show',
        closeOnClickOutside: 'close-on-click-outside',
        fullHeight: 'full-height',
        minWidth: 'min-width',
        maxWidth: 'max-width',
        width: 'width'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDropdownEvents = { onShowChanged: EventName<CustomEvent<boolean>> };

export const IxDropdown: StencilReactComponent<IxDropdownElement, IxDropdownEvents> = /*@__PURE__*/ createComponent<IxDropdownElement, IxDropdownEvents>({
    tagName: 'ix-dropdown',
    properties: {
        suppressAutomaticPlacement: 'suppress-automatic-placement',
        show: 'show',
        trigger: 'trigger',
        anchor: 'anchor',
        closeBehavior: 'close-behavior',
        placement: 'placement',
        positioningStrategy: 'positioning-strategy',
        header: 'header',
        offset: 'offset',
        overwriteDropdownStyle: 'overwrite-dropdown-style',
        discoverAllSubmenus: 'discover-all-submenus',
        ignoreRelatedSubmenu: 'ignore-related-submenu',
        suppressOverflowBehavior: 'suppress-overflow-behavior'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDropdownButtonEvents = NonNullable<unknown>;

export const IxDropdownButton: StencilReactComponent<IxDropdownButtonElement, IxDropdownButtonEvents> = /*@__PURE__*/ createComponent<IxDropdownButtonElement, IxDropdownButtonEvents>({
    tagName: 'ix-dropdown-button',
    properties: {
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        disabled: 'disabled',
        label: 'label',
        icon: 'icon',
        closeBehavior: 'close-behavior',
        placement: 'placement'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDropdownHeaderEvents = NonNullable<unknown>;

export const IxDropdownHeader: StencilReactComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents> = /*@__PURE__*/ createComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents>({
    tagName: 'ix-dropdown-header',
    properties: { label: 'label' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDropdownItemEvents = NonNullable<unknown>;

export const IxDropdownItem: StencilReactComponent<IxDropdownItemElement, IxDropdownItemEvents> = /*@__PURE__*/ createComponent<IxDropdownItemElement, IxDropdownItemEvents>({
    tagName: 'ix-dropdown-item',
    properties: {
        label: 'label',
        icon: 'icon',
        hover: 'hover',
        disabled: 'disabled',
        checked: 'checked',
        isSubMenu: 'is-sub-menu',
        suppressChecked: 'suppress-checked'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxDropdownQuickActionsEvents = NonNullable<unknown>;

export const IxDropdownQuickActions: StencilReactComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents> = /*@__PURE__*/ createComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents>({
    tagName: 'ix-dropdown-quick-actions',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxEmptyStateEvents = { onActionClick: EventName<CustomEvent<void>> };

export const IxEmptyState: StencilReactComponent<IxEmptyStateElement, IxEmptyStateEvents> = /*@__PURE__*/ createComponent<IxEmptyStateElement, IxEmptyStateEvents>({
    tagName: 'ix-empty-state',
    properties: {
        layout: 'layout',
        icon: 'icon',
        header: 'header',
        subHeader: 'sub-header',
        action: 'action'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxEventListEvents = NonNullable<unknown>;

export const IxEventList: StencilReactComponent<IxEventListElement, IxEventListEvents> = /*@__PURE__*/ createComponent<IxEventListElement, IxEventListEvents>({
    tagName: 'ix-event-list',
    properties: {
        itemHeight: 'item-height',
        compact: 'compact',
        animated: 'animated',
        chevron: 'chevron'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxEventListItemEvents = { onItemClick: EventName<CustomEvent<any>> };

export const IxEventListItem: StencilReactComponent<IxEventListItemElement, IxEventListItemEvents> = /*@__PURE__*/ createComponent<IxEventListItemElement, IxEventListItemEvents>({
    tagName: 'ix-event-list-item',
    properties: {
        itemColor: 'item-color',
        selected: 'selected',
        disabled: 'disabled',
        chevron: 'chevron'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxExpandingSearchEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxExpandingSearch: StencilReactComponent<IxExpandingSearchElement, IxExpandingSearchEvents> = /*@__PURE__*/ createComponent<IxExpandingSearchElement, IxExpandingSearchEvents>({
    tagName: 'ix-expanding-search',
    properties: {
        icon: 'icon',
        placeholder: 'placeholder',
        value: 'value',
        fullWidth: 'full-width',
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxFieldLabelEvents = NonNullable<unknown>;

export const IxFieldLabel: StencilReactComponent<IxFieldLabelElement, IxFieldLabelEvents> = /*@__PURE__*/ createComponent<IxFieldLabelElement, IxFieldLabelEvents>({
    tagName: 'ix-field-label',
    properties: {
        required: 'required',
        htmlFor: 'html-for',
        controlRef: 'control-ref',
        isInvalid: 'is-invalid'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxFilterChipEvents = { onCloseClick: EventName<CustomEvent<void>> };

export const IxFilterChip: StencilReactComponent<IxFilterChipElement, IxFilterChipEvents> = /*@__PURE__*/ createComponent<IxFilterChipElement, IxFilterChipEvents>({
    tagName: 'ix-filter-chip',
    properties: {
        disabled: 'disabled',
        readonly: 'readonly'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxFlipTileEvents = { onToggle: EventName<CustomEvent<number>> };

export const IxFlipTile: StencilReactComponent<IxFlipTileElement, IxFlipTileEvents> = /*@__PURE__*/ createComponent<IxFlipTileElement, IxFlipTileEvents>({
    tagName: 'ix-flip-tile',
    properties: {
        state: 'state',
        height: 'height',
        width: 'width',
        index: 'index'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxFlipTileContentEvents = NonNullable<unknown>;

export const IxFlipTileContent: StencilReactComponent<IxFlipTileContentElement, IxFlipTileContentEvents> = /*@__PURE__*/ createComponent<IxFlipTileContentElement, IxFlipTileContentEvents>({
    tagName: 'ix-flip-tile-content',
    properties: { contentVisible: 'content-visible' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxGroupEvents = {
    onSelectGroup: EventName<CustomEvent<boolean>>,
    onSelectItem: EventName<CustomEvent<number>>,
    onCollapsedChanged: EventName<CustomEvent<boolean>>
};

export const IxGroup: StencilReactComponent<IxGroupElement, IxGroupEvents> = /*@__PURE__*/ createComponent<IxGroupElement, IxGroupEvents>({
    tagName: 'ix-group',
    properties: {
        suppressHeaderSelection: 'suppress-header-selection',
        header: 'header',
        subHeader: 'sub-header',
        collapsed: 'collapsed',
        selected: 'selected',
        index: 'index',
        expandOnHeaderClick: 'expand-on-header-click'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxGroupContextMenuEvents = NonNullable<unknown>;

export const IxGroupContextMenu: StencilReactComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents> = /*@__PURE__*/ createComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents>({
    tagName: 'ix-group-context-menu',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxGroupItemEvents = { onSelectedChanged: EventName<IxGroupItemCustomEvent<HTMLIxGroupItemElement>> };

export const IxGroupItem: StencilReactComponent<IxGroupItemElement, IxGroupItemEvents> = /*@__PURE__*/ createComponent<IxGroupItemElement, IxGroupItemEvents>({
    tagName: 'ix-group-item',
    properties: {
        icon: 'icon',
        text: 'text',
        secondaryText: 'secondary-text',
        suppressSelection: 'suppress-selection',
        selected: 'selected',
        focusable: 'focusable',
        index: 'index'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxHelperTextEvents = NonNullable<unknown>;

export const IxHelperText: StencilReactComponent<IxHelperTextElement, IxHelperTextEvents> = /*@__PURE__*/ createComponent<IxHelperTextElement, IxHelperTextEvents>({
    tagName: 'ix-helper-text',
    properties: {
        htmlFor: 'html-for',
        helperText: 'helper-text',
        invalidText: 'invalid-text',
        validText: 'valid-text',
        infoText: 'info-text',
        warningText: 'warning-text'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxIconButtonEvents = NonNullable<unknown>;

export const IxIconButton: StencilReactComponent<IxIconButtonElement, IxIconButtonEvents> = /*@__PURE__*/ createComponent<IxIconButtonElement, IxIconButtonEvents>({
    tagName: 'ix-icon-button',
    properties: {
        a11yLabel: 'a11y-label',
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        oval: 'oval',
        icon: 'icon',
        size: 'size',
        iconColor: 'icon-color',
        disabled: 'disabled',
        type: 'type',
        loading: 'loading'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxIconToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxIconToggleButton: StencilReactComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents> = /*@__PURE__*/ createComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents>({
    tagName: 'ix-icon-toggle-button',
    properties: {
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        icon: 'icon',
        pressed: 'pressed',
        size: 'size',
        disabled: 'disabled',
        loading: 'loading'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxInputEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxInput: StencilReactComponent<IxInputElement, IxInputEvents> = /*@__PURE__*/ createComponent<IxInputElement, IxInputEvents>({
    tagName: 'ix-input',
    properties: {
        type: 'type',
        name: 'name',
        placeholder: 'placeholder',
        value: 'value',
        required: 'required',
        disabled: 'disabled',
        readonly: 'readonly',
        helperText: 'helper-text',
        infoText: 'info-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        validText: 'valid-text',
        warningText: 'warning-text',
        label: 'label',
        invalidText: 'invalid-text',
        pattern: 'pattern',
        maxLength: 'max-length',
        minLength: 'min-length',
        allowedCharactersPattern: 'allowed-characters-pattern'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxInputGroupEvents = NonNullable<unknown>;

export const IxInputGroup: StencilReactComponent<IxInputGroupElement, IxInputGroupEvents> = /*@__PURE__*/ createComponent<IxInputGroupElement, IxInputGroupEvents>({
    tagName: 'ix-input-group',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxKeyValueEvents = NonNullable<unknown>;

export const IxKeyValue: StencilReactComponent<IxKeyValueElement, IxKeyValueEvents> = /*@__PURE__*/ createComponent<IxKeyValueElement, IxKeyValueEvents>({
    tagName: 'ix-key-value',
    properties: {
        icon: 'icon',
        label: 'label',
        labelPosition: 'label-position',
        value: 'value'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxKeyValueListEvents = NonNullable<unknown>;

export const IxKeyValueList: StencilReactComponent<IxKeyValueListElement, IxKeyValueListEvents> = /*@__PURE__*/ createComponent<IxKeyValueListElement, IxKeyValueListEvents>({
    tagName: 'ix-key-value-list',
    properties: { striped: 'striped' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxKpiEvents = NonNullable<unknown>;

export const IxKpi: StencilReactComponent<IxKpiElement, IxKpiEvents> = /*@__PURE__*/ createComponent<IxKpiElement, IxKpiEvents>({
    tagName: 'ix-kpi',
    properties: {
        label: 'label',
        value: 'value',
        unit: 'unit',
        state: 'state',
        orientation: 'orientation'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxLayoutAutoEvents = NonNullable<unknown>;

export const IxLayoutAuto: StencilReactComponent<IxLayoutAutoElement, IxLayoutAutoEvents> = /*@__PURE__*/ createComponent<IxLayoutAutoElement, IxLayoutAutoEvents>({
    tagName: 'ix-layout-auto',
    properties: { layout: 'layout' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxLayoutGridEvents = NonNullable<unknown>;

export const IxLayoutGrid: StencilReactComponent<IxLayoutGridElement, IxLayoutGridEvents> = /*@__PURE__*/ createComponent<IxLayoutGridElement, IxLayoutGridEvents>({
    tagName: 'ix-layout-grid',
    properties: {
        noMargin: 'no-margin',
        gap: 'gap',
        columns: 'columns'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxLinkButtonEvents = NonNullable<unknown>;

export const IxLinkButton: StencilReactComponent<IxLinkButtonElement, IxLinkButtonEvents> = /*@__PURE__*/ createComponent<IxLinkButtonElement, IxLinkButtonEvents>({
    tagName: 'ix-link-button',
    properties: {
        disabled: 'disabled',
        url: 'url',
        target: 'target'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMapNavigationEvents = {
    onNavigationToggled: EventName<CustomEvent<boolean>>,
    onContextMenuClick: EventName<CustomEvent<void>>
};

export const IxMapNavigation: StencilReactComponent<IxMapNavigationElement, IxMapNavigationEvents> = /*@__PURE__*/ createComponent<IxMapNavigationElement, IxMapNavigationEvents>({
    tagName: 'ix-map-navigation',
    properties: {
        applicationName: 'application-name',
        navigationTitle: 'navigation-title',
        hideContextMenu: 'hide-context-menu'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMapNavigationOverlayEvents = { onCloseClick: EventName<CustomEvent<any>> };

export const IxMapNavigationOverlay: StencilReactComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents> = /*@__PURE__*/ createComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents>({
    tagName: 'ix-map-navigation-overlay',
    properties: {
        name: 'name',
        icon: 'icon',
        color: 'color',
        iconColor: 'icon-color'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuEvents = {
    onExpandChange: EventName<CustomEvent<boolean>>,
    onMapExpandChange: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>,
    onOpenSettings: EventName<CustomEvent<void>>,
    onOpenAbout: EventName<CustomEvent<void>>
};

export const IxMenu: StencilReactComponent<IxMenuElement, IxMenuEvents> = /*@__PURE__*/ createComponent<IxMenuElement, IxMenuEvents>({
    tagName: 'ix-menu',
    properties: {
        showSettings: 'show-settings',
        showAbout: 'show-about',
        enableToggleTheme: 'enable-toggle-theme',
        enableSettings: 'enable-settings',
        enableMapExpand: 'enable-map-expand',
        applicationName: 'application-name',
        applicationDescription: 'application-description',
        i18nExpandSidebar: 'i-1-8n-expand-sidebar',
        expand: 'expand',
        startExpanded: 'start-expanded',
        pinned: 'pinned',
        i18nLegal: 'i-1-8n-legal',
        i18nSettings: 'i-1-8n-settings',
        i18nToggleTheme: 'i-1-8n-toggle-theme',
        i18nExpand: 'i-1-8n-expand',
        i18nCollapse: 'i-1-8n-collapse'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuAboutEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuAboutCustomEvent<CustomCloseEvent>>
};

export const IxMenuAbout: StencilReactComponent<IxMenuAboutElement, IxMenuAboutEvents> = /*@__PURE__*/ createComponent<IxMenuAboutElement, IxMenuAboutEvents>({
    tagName: 'ix-menu-about',
    properties: {
        activeTabLabel: 'active-tab-label',
        label: 'label',
        show: 'show'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuAboutItemEvents = { onLabelChange: EventName<IxMenuAboutItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuAboutItem: StencilReactComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents> = /*@__PURE__*/ createComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents>({
    tagName: 'ix-menu-about-item',
    properties: { label: 'label' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuAboutNewsEvents = {
    onShowMore: EventName<IxMenuAboutNewsCustomEvent<MouseEvent>>,
    onClosePopover: EventName<CustomEvent<void>>
};

export const IxMenuAboutNews: StencilReactComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents> = /*@__PURE__*/ createComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents>({
    tagName: 'ix-menu-about-news',
    properties: {
        show: 'show',
        label: 'label',
        i18nShowMore: 'i-1-8n-show-more',
        aboutItemLabel: 'about-item-label',
        offsetBottom: 'offset-bottom',
        expanded: 'expanded'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuAvatarEvents = { onLogoutClick: EventName<CustomEvent<any>> };

export const IxMenuAvatar: StencilReactComponent<IxMenuAvatarElement, IxMenuAvatarEvents> = /*@__PURE__*/ createComponent<IxMenuAvatarElement, IxMenuAvatarEvents>({
    tagName: 'ix-menu-avatar',
    properties: {
        top: 'top',
        bottom: 'bottom',
        image: 'image',
        initials: 'initials',
        i18nLogout: 'i-1-8n-logout',
        showLogoutButton: 'show-logout-button'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuAvatarItemEvents = { onItemClick: EventName<IxMenuAvatarItemCustomEvent<MouseEvent>> };

export const IxMenuAvatarItem: StencilReactComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents> = /*@__PURE__*/ createComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents>({
    tagName: 'ix-menu-avatar-item',
    properties: {
        icon: 'icon',
        label: 'label'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuCategoryEvents = NonNullable<unknown>;

export const IxMenuCategory: StencilReactComponent<IxMenuCategoryElement, IxMenuCategoryEvents> = /*@__PURE__*/ createComponent<IxMenuCategoryElement, IxMenuCategoryEvents>({
    tagName: 'ix-menu-category',
    properties: {
        label: 'label',
        icon: 'icon',
        notifications: 'notifications'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuItemEvents = NonNullable<unknown>;

export const IxMenuItem: StencilReactComponent<IxMenuItemElement, IxMenuItemEvents> = /*@__PURE__*/ createComponent<IxMenuItemElement, IxMenuItemEvents>({
    tagName: 'ix-menu-item',
    properties: {
        label: 'label',
        home: 'home',
        bottom: 'bottom',
        icon: 'icon',
        notifications: 'notifications',
        active: 'active',
        disabled: 'disabled',
        isCategory: 'is-category'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuSettingsEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuSettingsCustomEvent<CustomCloseEvent>>
};

export const IxMenuSettings: StencilReactComponent<IxMenuSettingsElement, IxMenuSettingsEvents> = /*@__PURE__*/ createComponent<IxMenuSettingsElement, IxMenuSettingsEvents>({
    tagName: 'ix-menu-settings',
    properties: {
        activeTabLabel: 'active-tab-label',
        label: 'label',
        show: 'show'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMenuSettingsItemEvents = { onLabelChange: EventName<IxMenuSettingsItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuSettingsItem: StencilReactComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents> = /*@__PURE__*/ createComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents>({
    tagName: 'ix-menu-settings-item',
    properties: { label: 'label' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxMessageBarEvents = {
    onClosedChange: EventName<CustomEvent<any>>,
    onCloseAnimationCompleted: EventName<CustomEvent<any>>
};

export const IxMessageBar: StencilReactComponent<IxMessageBarElement, IxMessageBarEvents> = /*@__PURE__*/ createComponent<IxMessageBarElement, IxMessageBarEvents>({
    tagName: 'ix-message-bar',
    properties: {
        type: 'type',
        dismissible: 'dismissible'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxModalEvents = {
    onDialogClose: EventName<CustomEvent<any>>,
    onDialogDismiss: EventName<CustomEvent<any>>
};

export const IxModal: StencilReactComponent<IxModalElement, IxModalEvents> = /*@__PURE__*/ createComponent<IxModalElement, IxModalEvents>({
    tagName: 'ix-modal',
    properties: {
        size: 'size',
        animation: 'animation',
        backdrop: 'backdrop',
        closeOnBackdropClick: 'close-on-backdrop-click',
        beforeDismiss: 'before-dismiss',
        centered: 'centered',
        closeOnEscape: 'close-on-escape'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxModalContentEvents = NonNullable<unknown>;

export const IxModalContent: StencilReactComponent<IxModalContentElement, IxModalContentEvents> = /*@__PURE__*/ createComponent<IxModalContentElement, IxModalContentEvents>({
    tagName: 'ix-modal-content',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxModalFooterEvents = NonNullable<unknown>;

export const IxModalFooter: StencilReactComponent<IxModalFooterElement, IxModalFooterEvents> = /*@__PURE__*/ createComponent<IxModalFooterElement, IxModalFooterEvents>({
    tagName: 'ix-modal-footer',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxModalHeaderEvents = { onCloseClick: EventName<IxModalHeaderCustomEvent<MouseEvent>> };

export const IxModalHeader: StencilReactComponent<IxModalHeaderElement, IxModalHeaderEvents> = /*@__PURE__*/ createComponent<IxModalHeaderElement, IxModalHeaderEvents>({
    tagName: 'ix-modal-header',
    properties: {
        hideClose: 'hide-close',
        icon: 'icon',
        iconColor: 'icon-color'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxNumberInputEvents = {
    onValueChange: EventName<CustomEvent<number>>,
    onValidityStateChange: EventName<IxNumberInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxNumberInput: StencilReactComponent<IxNumberInputElement, IxNumberInputEvents> = /*@__PURE__*/ createComponent<IxNumberInputElement, IxNumberInputEvents>({
    tagName: 'ix-number-input',
    properties: {
        name: 'name',
        placeholder: 'placeholder',
        value: 'value',
        required: 'required',
        disabled: 'disabled',
        readonly: 'readonly',
        helperText: 'helper-text',
        infoText: 'info-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        validText: 'valid-text',
        warningText: 'warning-text',
        label: 'label',
        invalidText: 'invalid-text',
        pattern: 'pattern',
        min: 'min',
        max: 'max',
        allowedCharactersPattern: 'allowed-characters-pattern',
        showStepperButtons: 'show-stepper-buttons'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxPaginationEvents = {
    onPageSelected: EventName<CustomEvent<number>>,
    onItemCountChanged: EventName<CustomEvent<number>>
};

export const IxPagination: StencilReactComponent<IxPaginationElement, IxPaginationEvents> = /*@__PURE__*/ createComponent<IxPaginationElement, IxPaginationEvents>({
    tagName: 'ix-pagination',
    properties: {
        advanced: 'advanced',
        itemCount: 'item-count',
        showItemCount: 'show-item-count',
        count: 'count',
        selectedPage: 'selected-page',
        i18nPage: 'i-1-8n-page',
        i18nOf: 'i-1-8n-of',
        i18nItems: 'i-1-8n-items'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxPaneEvents = {
    onExpandedChanged: EventName<IxPaneCustomEvent<ExpandedChangedEvent>>,
    onVariantChanged: EventName<IxPaneCustomEvent<VariantChangedEvent>>,
    onBorderlessChanged: EventName<IxPaneCustomEvent<BorderlessChangedEvent>>
};

export const IxPane: StencilReactComponent<IxPaneElement, IxPaneEvents> = /*@__PURE__*/ createComponent<IxPaneElement, IxPaneEvents>({
    tagName: 'ix-pane',
    properties: {
        heading: 'heading',
        variant: 'variant',
        hideOnCollapse: 'hide-on-collapse',
        size: 'size',
        borderless: 'borderless',
        expanded: 'expanded',
        composition: 'composition',
        icon: 'icon',
        ignoreLayoutSettings: 'ignore-layout-settings',
        isMobile: 'is-mobile'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxPaneLayoutEvents = NonNullable<unknown>;

export const IxPaneLayout: StencilReactComponent<IxPaneLayoutElement, IxPaneLayoutEvents> = /*@__PURE__*/ createComponent<IxPaneLayoutElement, IxPaneLayoutEvents>({
    tagName: 'ix-pane-layout',
    properties: {
        layout: 'layout',
        variant: 'variant',
        borderless: 'borderless'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxPillEvents = NonNullable<unknown>;

export const IxPill: StencilReactComponent<IxPillElement, IxPillEvents> = /*@__PURE__*/ createComponent<IxPillElement, IxPillEvents>({
    tagName: 'ix-pill',
    properties: {
        variant: 'variant',
        outline: 'outline',
        icon: 'icon',
        background: 'background',
        pillColor: 'pill-color',
        alignLeft: 'align-left',
        tooltipText: 'tooltip-text'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxPushCardEvents = NonNullable<unknown>;

export const IxPushCard: StencilReactComponent<IxPushCardElement, IxPushCardEvents> = /*@__PURE__*/ createComponent<IxPushCardElement, IxPushCardEvents>({
    tagName: 'ix-push-card',
    properties: {
        icon: 'icon',
        notification: 'notification',
        heading: 'heading',
        subheading: 'subheading',
        variant: 'variant',
        collapse: 'collapse'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxRadioEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxRadio: StencilReactComponent<IxRadioElement, IxRadioEvents> = /*@__PURE__*/ createComponent<IxRadioElement, IxRadioEvents>({
    tagName: 'ix-radio',
    properties: {
        name: 'name',
        value: 'value',
        label: 'label',
        disabled: 'disabled',
        checked: 'checked'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxRadioGroupEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxRadioGroup: StencilReactComponent<IxRadioGroupElement, IxRadioGroupEvents> = /*@__PURE__*/ createComponent<IxRadioGroupElement, IxRadioGroupEvents>({
    tagName: 'ix-radio-group',
    properties: {
        helperText: 'helper-text',
        label: 'label',
        value: 'value',
        invalidText: 'invalid-text',
        infoText: 'info-text',
        warningText: 'warning-text',
        validText: 'valid-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        direction: 'direction'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxRowEvents = NonNullable<unknown>;

export const IxRow: StencilReactComponent<IxRowElement, IxRowEvents> = /*@__PURE__*/ createComponent<IxRowElement, IxRowEvents>({
    tagName: 'ix-row',
    properties: {},
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxSelectEvents = {
    onValueChange: EventName<CustomEvent<string | string[]>>,
    onInputChange: EventName<CustomEvent<string>>,
    onAddItem: EventName<CustomEvent<string>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxSelect: StencilReactComponent<IxSelectElement, IxSelectEvents> = /*@__PURE__*/ createComponent<IxSelectElement, IxSelectEvents>({
    tagName: 'ix-select',
    properties: {
        name: 'name',
        required: 'required',
        label: 'label',
        warningText: 'warning-text',
        infoText: 'info-text',
        invalidText: 'invalid-text',
        validText: 'valid-text',
        helperText: 'helper-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        value: 'value',
        allowClear: 'allow-clear',
        mode: 'mode',
        editable: 'editable',
        disabled: 'disabled',
        readonly: 'readonly',
        i18nPlaceholder: 'i-1-8n-placeholder',
        i18nPlaceholderEditable: 'i-1-8n-placeholder-editable',
        i18nSelectListHeader: 'i-1-8n-select-list-header',
        i18nNoMatches: 'i-1-8n-no-matches',
        hideListHeader: 'hide-list-header',
        dropdownWidth: 'dropdown-width',
        dropdownMaxWidth: 'dropdown-max-width'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxSelectItemEvents = { onItemClick: EventName<CustomEvent<string>> };

export const IxSelectItem: StencilReactComponent<IxSelectItemElement, IxSelectItemEvents> = /*@__PURE__*/ createComponent<IxSelectItemElement, IxSelectItemEvents>({
    tagName: 'ix-select-item',
    properties: {
        label: 'label',
        value: 'value',
        selected: 'selected',
        hover: 'hover'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxSliderEvents = { onValueChange: EventName<CustomEvent<number>> };

export const IxSlider: StencilReactComponent<IxSliderElement, IxSliderEvents> = /*@__PURE__*/ createComponent<IxSliderElement, IxSliderEvents>({
    tagName: 'ix-slider',
    properties: {
        step: 'step',
        min: 'min',
        max: 'max',
        value: 'value',
        marker: 'marker',
        trace: 'trace',
        traceReference: 'trace-reference',
        disabled: 'disabled',
        error: 'error'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxSpinnerEvents = NonNullable<unknown>;

export const IxSpinner: StencilReactComponent<IxSpinnerElement, IxSpinnerEvents> = /*@__PURE__*/ createComponent<IxSpinnerElement, IxSpinnerEvents>({
    tagName: 'ix-spinner',
    properties: {
        variant: 'variant',
        size: 'size',
        hideTrack: 'hide-track'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxSplitButtonEvents = { onButtonClick: EventName<IxSplitButtonCustomEvent<MouseEvent>> };

export const IxSplitButton: StencilReactComponent<IxSplitButtonElement, IxSplitButtonEvents> = /*@__PURE__*/ createComponent<IxSplitButtonElement, IxSplitButtonEvents>({
    tagName: 'ix-split-button',
    properties: {
        variant: 'variant',
        closeBehavior: 'close-behavior',
        outline: 'outline',
        ghost: 'ghost',
        label: 'label',
        icon: 'icon',
        splitIcon: 'split-icon',
        disabled: 'disabled',
        placement: 'placement'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTabItemEvents = { onTabClick: EventName<IxTabItemCustomEvent<TabClickDetail>> };

export const IxTabItem: StencilReactComponent<IxTabItemElement, IxTabItemEvents> = /*@__PURE__*/ createComponent<IxTabItemElement, IxTabItemEvents>({
    tagName: 'ix-tab-item',
    properties: {
        selected: 'selected',
        disabled: 'disabled',
        small: 'small',
        icon: 'icon',
        rounded: 'rounded',
        counter: 'counter',
        layout: 'layout',
        placement: 'placement'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTabsEvents = { onSelectedChange: EventName<CustomEvent<number>> };

export const IxTabs: StencilReactComponent<IxTabsElement, IxTabsEvents> = /*@__PURE__*/ createComponent<IxTabsElement, IxTabsEvents>({
    tagName: 'ix-tabs',
    properties: {
        small: 'small',
        rounded: 'rounded',
        selected: 'selected',
        layout: 'layout',
        placement: 'placement'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTextareaEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxTextareaCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxTextarea: StencilReactComponent<IxTextareaElement, IxTextareaEvents> = /*@__PURE__*/ createComponent<IxTextareaElement, IxTextareaEvents>({
    tagName: 'ix-textarea',
    properties: {
        name: 'name',
        placeholder: 'placeholder',
        value: 'value',
        required: 'required',
        disabled: 'disabled',
        readonly: 'readonly',
        helperText: 'helper-text',
        infoText: 'info-text',
        showTextAsTooltip: 'show-text-as-tooltip',
        validText: 'valid-text',
        warningText: 'warning-text',
        label: 'label',
        invalidText: 'invalid-text',
        textareaHeight: 'textarea-height',
        textareaWidth: 'textarea-width',
        textareaRows: 'textarea-rows',
        textareaCols: 'textarea-cols',
        resizeBehavior: 'resize-behavior',
        maxLength: 'max-length',
        minLength: 'min-length'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTileEvents = NonNullable<unknown>;

export const IxTile: StencilReactComponent<IxTileElement, IxTileEvents> = /*@__PURE__*/ createComponent<IxTileElement, IxTileEvents>({
    tagName: 'ix-tile',
    properties: { size: 'size' },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTimePickerEvents = {
    onTimeSelect: EventName<CustomEvent<string>>,
    onTimeChange: EventName<CustomEvent<string>>
};

export const IxTimePicker: StencilReactComponent<IxTimePickerElement, IxTimePickerEvents> = /*@__PURE__*/ createComponent<IxTimePickerElement, IxTimePickerEvents>({
    tagName: 'ix-time-picker',
    properties: {
        format: 'format',
        corners: 'corners',
        standaloneAppearance: 'standalone-appearance',
        showHour: 'show-hour',
        showMinutes: 'show-minutes',
        showSeconds: 'show-seconds',
        time: 'time',
        timeReference: 'time-reference',
        textSelectTime: 'text-select-time',
        textTime: 'text-time'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxToastEvents = { onCloseToast: EventName<CustomEvent<any>> };

export const IxToast: StencilReactComponent<IxToastElement, IxToastEvents> = /*@__PURE__*/ createComponent<IxToastElement, IxToastEvents>({
    tagName: 'ix-toast',
    properties: {
        type: 'type',
        toastTitle: 'toast-title',
        autoCloseDelay: 'auto-close-delay',
        autoClose: 'auto-close',
        icon: 'icon',
        iconColor: 'icon-color'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxToastContainerEvents = NonNullable<unknown>;

export const IxToastContainer: StencilReactComponent<IxToastContainerElement, IxToastContainerEvents> = /*@__PURE__*/ createComponent<IxToastContainerElement, IxToastContainerEvents>({
    tagName: 'ix-toast-container',
    properties: {
        containerId: 'container-id',
        containerClass: 'container-class',
        position: 'position'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxToggleEvents = { onCheckedChange: EventName<CustomEvent<boolean>> };

export const IxToggle: StencilReactComponent<IxToggleElement, IxToggleEvents> = /*@__PURE__*/ createComponent<IxToggleElement, IxToggleEvents>({
    tagName: 'ix-toggle',
    properties: {
        name: 'name',
        value: 'value',
        checked: 'checked',
        disabled: 'disabled',
        indeterminate: 'indeterminate',
        textOn: 'text-on',
        textOff: 'text-off',
        textIndeterminate: 'text-indeterminate',
        hideText: 'hide-text',
        required: 'required'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxToggleButton: StencilReactComponent<IxToggleButtonElement, IxToggleButtonEvents> = /*@__PURE__*/ createComponent<IxToggleButtonElement, IxToggleButtonEvents>({
    tagName: 'ix-toggle-button',
    properties: {
        variant: 'variant',
        outline: 'outline',
        ghost: 'ghost',
        disabled: 'disabled',
        loading: 'loading',
        icon: 'icon',
        pressed: 'pressed'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTooltipEvents = NonNullable<unknown>;

export const IxTooltip: StencilReactComponent<IxTooltipElement, IxTooltipEvents> = /*@__PURE__*/ createComponent<IxTooltipElement, IxTooltipEvents>({
    tagName: 'ix-tooltip',
    properties: {
        for: 'for',
        titleContent: 'title-content',
        interactive: 'interactive',
        placement: 'placement',
        showDelay: 'show-delay',
        hideDelay: 'hide-delay',
        animationFrame: 'animation-frame'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxTypographyEvents = NonNullable<unknown>;

export const IxTypography: StencilReactComponent<IxTypographyElement, IxTypographyEvents> = /*@__PURE__*/ createComponent<IxTypographyElement, IxTypographyEvents>({
    tagName: 'ix-typography',
    properties: {
        format: 'format',
        textColor: 'text-color',
        bold: 'bold',
        textDecoration: 'text-decoration'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxUploadEvents = { onFilesChanged: EventName<IxUploadCustomEvent<Array<File>>> };

export const IxUpload: StencilReactComponent<IxUploadElement, IxUploadEvents> = /*@__PURE__*/ createComponent<IxUploadElement, IxUploadEvents>({
    tagName: 'ix-upload',
    properties: {
        accept: 'accept',
        multiple: 'multiple',
        multiline: 'multiline',
        disabled: 'disabled',
        state: 'state',
        selectFileText: 'select-file-text',
        loadingText: 'loading-text',
        uploadFailedText: 'upload-failed-text',
        uploadSuccessText: 'upload-success-text',
        i18nUploadFile: 'i-1-8n-upload-file',
        i18nUploadDisabled: 'i-1-8n-upload-disabled'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxValidationTooltipEvents = NonNullable<unknown>;

export const IxValidationTooltip: StencilReactComponent<IxValidationTooltipElement, IxValidationTooltipEvents> = /*@__PURE__*/ createComponent<IxValidationTooltipElement, IxValidationTooltipEvents>({
    tagName: 'ix-validation-tooltip',
    properties: {
        message: 'message',
        placement: 'placement',
        suppressAutomaticPlacement: 'suppress-automatic-placement'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxWorkflowStepEvents = NonNullable<unknown>;

export const IxWorkflowStep: StencilReactComponent<IxWorkflowStepElement, IxWorkflowStepEvents> = /*@__PURE__*/ createComponent<IxWorkflowStepElement, IxWorkflowStepEvents>({
    tagName: 'ix-workflow-step',
    properties: {
        vertical: 'vertical',
        disabled: 'disabled',
        status: 'status',
        clickable: 'clickable',
        selected: 'selected',
        position: 'position'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});

export type IxWorkflowStepsEvents = { onStepSelected: EventName<CustomEvent<number>> };

export const IxWorkflowSteps: StencilReactComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents> = /*@__PURE__*/ createComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents>({
    tagName: 'ix-workflow-steps',
    properties: {
        vertical: 'vertical',
        clickable: 'clickable',
        selectedIndex: 'selected-index'
    },
    hydrateModule: import('@siemens/ix/hydrate'),
    serializeShadowRoot
});
