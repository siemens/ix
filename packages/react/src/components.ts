'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type BorderlessChangedEvent, type CustomCloseEvent, type CustomLabelChangeEvent, type DateChangeEvent, type DateInputValidityState, type DateRangeChangeEvent, type DateTimeDateChangeEvent, type DateTimeSelectEvent, type ExpandedChangedEvent, type FilterState, type InputState, type IxBreadcrumbCustomEvent, type IxCardListCustomEvent, type IxCategoryFilterCustomEvent, type IxDateDropdownCustomEvent, type IxDateInputCustomEvent, type IxDatePickerCustomEvent, type IxDatetimePickerCustomEvent, type IxGroupItemCustomEvent, type IxInputCustomEvent, type IxMenuAboutCustomEvent, type IxMenuAboutItemCustomEvent, type IxMenuAboutNewsCustomEvent, type IxMenuAvatarItemCustomEvent, type IxMenuSettingsCustomEvent, type IxMenuSettingsItemCustomEvent, type IxModalHeaderCustomEvent, type IxNumberInputCustomEvent, type IxPaneCustomEvent, type IxSplitButtonCustomEvent, type IxTabItemCustomEvent, type IxTextareaCustomEvent, type IxUploadCustomEvent, type TabClickDetail, type VariantChangedEvent } from "@siemens/ix";
import { IxActionCard as IxActionCardElement, defineCustomElement as defineIxActionCard } from "@siemens/ix/components/ix-action-card.js";
import { IxApplicationHeader as IxApplicationHeaderElement, defineCustomElement as defineIxApplicationHeader } from "@siemens/ix/components/ix-application-header.js";
import { IxApplication as IxApplicationElement, defineCustomElement as defineIxApplication } from "@siemens/ix/components/ix-application.js";
import { IxAvatar as IxAvatarElement, defineCustomElement as defineIxAvatar } from "@siemens/ix/components/ix-avatar.js";
import { IxBasicNavigation as IxBasicNavigationElement, defineCustomElement as defineIxBasicNavigation } from "@siemens/ix/components/ix-basic-navigation.js";
import { IxBlind as IxBlindElement, defineCustomElement as defineIxBlind } from "@siemens/ix/components/ix-blind.js";
import { IxBreadcrumbItem as IxBreadcrumbItemElement, defineCustomElement as defineIxBreadcrumbItem } from "@siemens/ix/components/ix-breadcrumb-item.js";
import { IxBreadcrumb as IxBreadcrumbElement, defineCustomElement as defineIxBreadcrumb } from "@siemens/ix/components/ix-breadcrumb.js";
import { IxButton as IxButtonElement, defineCustomElement as defineIxButton } from "@siemens/ix/components/ix-button.js";
import { IxCardAccordion as IxCardAccordionElement, defineCustomElement as defineIxCardAccordion } from "@siemens/ix/components/ix-card-accordion.js";
import { IxCardContent as IxCardContentElement, defineCustomElement as defineIxCardContent } from "@siemens/ix/components/ix-card-content.js";
import { IxCardList as IxCardListElement, defineCustomElement as defineIxCardList } from "@siemens/ix/components/ix-card-list.js";
import { IxCardTitle as IxCardTitleElement, defineCustomElement as defineIxCardTitle } from "@siemens/ix/components/ix-card-title.js";
import { IxCard as IxCardElement, defineCustomElement as defineIxCard } from "@siemens/ix/components/ix-card.js";
import { IxCategoryFilter as IxCategoryFilterElement, defineCustomElement as defineIxCategoryFilter } from "@siemens/ix/components/ix-category-filter.js";
import { IxCheckboxGroup as IxCheckboxGroupElement, defineCustomElement as defineIxCheckboxGroup } from "@siemens/ix/components/ix-checkbox-group.js";
import { IxCheckbox as IxCheckboxElement, defineCustomElement as defineIxCheckbox } from "@siemens/ix/components/ix-checkbox.js";
import { IxChip as IxChipElement, defineCustomElement as defineIxChip } from "@siemens/ix/components/ix-chip.js";
import { IxCol as IxColElement, defineCustomElement as defineIxCol } from "@siemens/ix/components/ix-col.js";
import { IxContentHeader as IxContentHeaderElement, defineCustomElement as defineIxContentHeader } from "@siemens/ix/components/ix-content-header.js";
import { IxContent as IxContentElement, defineCustomElement as defineIxContent } from "@siemens/ix/components/ix-content.js";
import { IxCustomField as IxCustomFieldElement, defineCustomElement as defineIxCustomField } from "@siemens/ix/components/ix-custom-field.js";
import { IxDateDropdown as IxDateDropdownElement, defineCustomElement as defineIxDateDropdown } from "@siemens/ix/components/ix-date-dropdown.js";
import { IxDateInput as IxDateInputElement, defineCustomElement as defineIxDateInput } from "@siemens/ix/components/ix-date-input.js";
import { IxDatePicker as IxDatePickerElement, defineCustomElement as defineIxDatePicker } from "@siemens/ix/components/ix-date-picker.js";
import { IxDatetimePicker as IxDatetimePickerElement, defineCustomElement as defineIxDatetimePicker } from "@siemens/ix/components/ix-datetime-picker.js";
import { IxDivider as IxDividerElement, defineCustomElement as defineIxDivider } from "@siemens/ix/components/ix-divider.js";
import { IxDrawer as IxDrawerElement, defineCustomElement as defineIxDrawer } from "@siemens/ix/components/ix-drawer.js";
import { IxDropdownButton as IxDropdownButtonElement, defineCustomElement as defineIxDropdownButton } from "@siemens/ix/components/ix-dropdown-button.js";
import { IxDropdownHeader as IxDropdownHeaderElement, defineCustomElement as defineIxDropdownHeader } from "@siemens/ix/components/ix-dropdown-header.js";
import { IxDropdownItem as IxDropdownItemElement, defineCustomElement as defineIxDropdownItem } from "@siemens/ix/components/ix-dropdown-item.js";
import { IxDropdownQuickActions as IxDropdownQuickActionsElement, defineCustomElement as defineIxDropdownQuickActions } from "@siemens/ix/components/ix-dropdown-quick-actions.js";
import { IxDropdown as IxDropdownElement, defineCustomElement as defineIxDropdown } from "@siemens/ix/components/ix-dropdown.js";
import { IxEmptyState as IxEmptyStateElement, defineCustomElement as defineIxEmptyState } from "@siemens/ix/components/ix-empty-state.js";
import { IxEventListItem as IxEventListItemElement, defineCustomElement as defineIxEventListItem } from "@siemens/ix/components/ix-event-list-item.js";
import { IxEventList as IxEventListElement, defineCustomElement as defineIxEventList } from "@siemens/ix/components/ix-event-list.js";
import { IxExpandingSearch as IxExpandingSearchElement, defineCustomElement as defineIxExpandingSearch } from "@siemens/ix/components/ix-expanding-search.js";
import { IxFieldLabel as IxFieldLabelElement, defineCustomElement as defineIxFieldLabel } from "@siemens/ix/components/ix-field-label.js";
import { IxFilterChip as IxFilterChipElement, defineCustomElement as defineIxFilterChip } from "@siemens/ix/components/ix-filter-chip.js";
import { IxFlipTileContent as IxFlipTileContentElement, defineCustomElement as defineIxFlipTileContent } from "@siemens/ix/components/ix-flip-tile-content.js";
import { IxFlipTile as IxFlipTileElement, defineCustomElement as defineIxFlipTile } from "@siemens/ix/components/ix-flip-tile.js";
import { IxGroupContextMenu as IxGroupContextMenuElement, defineCustomElement as defineIxGroupContextMenu } from "@siemens/ix/components/ix-group-context-menu.js";
import { IxGroupItem as IxGroupItemElement, defineCustomElement as defineIxGroupItem } from "@siemens/ix/components/ix-group-item.js";
import { IxGroup as IxGroupElement, defineCustomElement as defineIxGroup } from "@siemens/ix/components/ix-group.js";
import { IxHelperText as IxHelperTextElement, defineCustomElement as defineIxHelperText } from "@siemens/ix/components/ix-helper-text.js";
import { IxIconButton as IxIconButtonElement, defineCustomElement as defineIxIconButton } from "@siemens/ix/components/ix-icon-button.js";
import { IxIconToggleButton as IxIconToggleButtonElement, defineCustomElement as defineIxIconToggleButton } from "@siemens/ix/components/ix-icon-toggle-button.js";
import { IxInputGroup as IxInputGroupElement, defineCustomElement as defineIxInputGroup } from "@siemens/ix/components/ix-input-group.js";
import { IxInput as IxInputElement, defineCustomElement as defineIxInput } from "@siemens/ix/components/ix-input.js";
import { IxKeyValueList as IxKeyValueListElement, defineCustomElement as defineIxKeyValueList } from "@siemens/ix/components/ix-key-value-list.js";
import { IxKeyValue as IxKeyValueElement, defineCustomElement as defineIxKeyValue } from "@siemens/ix/components/ix-key-value.js";
import { IxKpi as IxKpiElement, defineCustomElement as defineIxKpi } from "@siemens/ix/components/ix-kpi.js";
import { IxLayoutAuto as IxLayoutAutoElement, defineCustomElement as defineIxLayoutAuto } from "@siemens/ix/components/ix-layout-auto.js";
import { IxLayoutGrid as IxLayoutGridElement, defineCustomElement as defineIxLayoutGrid } from "@siemens/ix/components/ix-layout-grid.js";
import { IxLinkButton as IxLinkButtonElement, defineCustomElement as defineIxLinkButton } from "@siemens/ix/components/ix-link-button.js";
import { IxMapNavigationOverlay as IxMapNavigationOverlayElement, defineCustomElement as defineIxMapNavigationOverlay } from "@siemens/ix/components/ix-map-navigation-overlay.js";
import { IxMapNavigation as IxMapNavigationElement, defineCustomElement as defineIxMapNavigation } from "@siemens/ix/components/ix-map-navigation.js";
import { IxMenuAboutItem as IxMenuAboutItemElement, defineCustomElement as defineIxMenuAboutItem } from "@siemens/ix/components/ix-menu-about-item.js";
import { IxMenuAboutNews as IxMenuAboutNewsElement, defineCustomElement as defineIxMenuAboutNews } from "@siemens/ix/components/ix-menu-about-news.js";
import { IxMenuAbout as IxMenuAboutElement, defineCustomElement as defineIxMenuAbout } from "@siemens/ix/components/ix-menu-about.js";
import { IxMenuAvatarItem as IxMenuAvatarItemElement, defineCustomElement as defineIxMenuAvatarItem } from "@siemens/ix/components/ix-menu-avatar-item.js";
import { IxMenuAvatar as IxMenuAvatarElement, defineCustomElement as defineIxMenuAvatar } from "@siemens/ix/components/ix-menu-avatar.js";
import { IxMenuCategory as IxMenuCategoryElement, defineCustomElement as defineIxMenuCategory } from "@siemens/ix/components/ix-menu-category.js";
import { IxMenuItem as IxMenuItemElement, defineCustomElement as defineIxMenuItem } from "@siemens/ix/components/ix-menu-item.js";
import { IxMenuSettingsItem as IxMenuSettingsItemElement, defineCustomElement as defineIxMenuSettingsItem } from "@siemens/ix/components/ix-menu-settings-item.js";
import { IxMenuSettings as IxMenuSettingsElement, defineCustomElement as defineIxMenuSettings } from "@siemens/ix/components/ix-menu-settings.js";
import { IxMenu as IxMenuElement, defineCustomElement as defineIxMenu } from "@siemens/ix/components/ix-menu.js";
import { IxMessageBar as IxMessageBarElement, defineCustomElement as defineIxMessageBar } from "@siemens/ix/components/ix-message-bar.js";
import { IxModalContent as IxModalContentElement, defineCustomElement as defineIxModalContent } from "@siemens/ix/components/ix-modal-content.js";
import { IxModalFooter as IxModalFooterElement, defineCustomElement as defineIxModalFooter } from "@siemens/ix/components/ix-modal-footer.js";
import { IxModalHeader as IxModalHeaderElement, defineCustomElement as defineIxModalHeader } from "@siemens/ix/components/ix-modal-header.js";
import { IxModal as IxModalElement, defineCustomElement as defineIxModal } from "@siemens/ix/components/ix-modal.js";
import { IxNumberInput as IxNumberInputElement, defineCustomElement as defineIxNumberInput } from "@siemens/ix/components/ix-number-input.js";
import { IxPagination as IxPaginationElement, defineCustomElement as defineIxPagination } from "@siemens/ix/components/ix-pagination.js";
import { IxPaneLayout as IxPaneLayoutElement, defineCustomElement as defineIxPaneLayout } from "@siemens/ix/components/ix-pane-layout.js";
import { IxPane as IxPaneElement, defineCustomElement as defineIxPane } from "@siemens/ix/components/ix-pane.js";
import { IxPill as IxPillElement, defineCustomElement as defineIxPill } from "@siemens/ix/components/ix-pill.js";
import { IxPushCard as IxPushCardElement, defineCustomElement as defineIxPushCard } from "@siemens/ix/components/ix-push-card.js";
import { IxRadioGroup as IxRadioGroupElement, defineCustomElement as defineIxRadioGroup } from "@siemens/ix/components/ix-radio-group.js";
import { IxRadio as IxRadioElement, defineCustomElement as defineIxRadio } from "@siemens/ix/components/ix-radio.js";
import { IxRow as IxRowElement, defineCustomElement as defineIxRow } from "@siemens/ix/components/ix-row.js";
import { IxSelectItem as IxSelectItemElement, defineCustomElement as defineIxSelectItem } from "@siemens/ix/components/ix-select-item.js";
import { IxSelect as IxSelectElement, defineCustomElement as defineIxSelect } from "@siemens/ix/components/ix-select.js";
import { IxSlider as IxSliderElement, defineCustomElement as defineIxSlider } from "@siemens/ix/components/ix-slider.js";
import { IxSpinner as IxSpinnerElement, defineCustomElement as defineIxSpinner } from "@siemens/ix/components/ix-spinner.js";
import { IxSplitButton as IxSplitButtonElement, defineCustomElement as defineIxSplitButton } from "@siemens/ix/components/ix-split-button.js";
import { IxTabItem as IxTabItemElement, defineCustomElement as defineIxTabItem } from "@siemens/ix/components/ix-tab-item.js";
import { IxTabs as IxTabsElement, defineCustomElement as defineIxTabs } from "@siemens/ix/components/ix-tabs.js";
import { IxTextarea as IxTextareaElement, defineCustomElement as defineIxTextarea } from "@siemens/ix/components/ix-textarea.js";
import { IxTile as IxTileElement, defineCustomElement as defineIxTile } from "@siemens/ix/components/ix-tile.js";
import { IxTimePicker as IxTimePickerElement, defineCustomElement as defineIxTimePicker } from "@siemens/ix/components/ix-time-picker.js";
import { IxToastContainer as IxToastContainerElement, defineCustomElement as defineIxToastContainer } from "@siemens/ix/components/ix-toast-container.js";
import { IxToast as IxToastElement, defineCustomElement as defineIxToast } from "@siemens/ix/components/ix-toast.js";
import { IxToggleButton as IxToggleButtonElement, defineCustomElement as defineIxToggleButton } from "@siemens/ix/components/ix-toggle-button.js";
import { IxToggle as IxToggleElement, defineCustomElement as defineIxToggle } from "@siemens/ix/components/ix-toggle.js";
import { IxTooltip as IxTooltipElement, defineCustomElement as defineIxTooltip } from "@siemens/ix/components/ix-tooltip.js";
import { IxTypography as IxTypographyElement, defineCustomElement as defineIxTypography } from "@siemens/ix/components/ix-typography.js";
import { IxUpload as IxUploadElement, defineCustomElement as defineIxUpload } from "@siemens/ix/components/ix-upload.js";
import { IxValidationTooltip as IxValidationTooltipElement, defineCustomElement as defineIxValidationTooltip } from "@siemens/ix/components/ix-validation-tooltip.js";
import { IxWorkflowStep as IxWorkflowStepElement, defineCustomElement as defineIxWorkflowStep } from "@siemens/ix/components/ix-workflow-step.js";
import { IxWorkflowSteps as IxWorkflowStepsElement, defineCustomElement as defineIxWorkflowSteps } from "@siemens/ix/components/ix-workflow-steps.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

export type IxActionCardEvents = NonNullable<unknown>;

export const IxActionCard: StencilReactComponent<IxActionCardElement, IxActionCardEvents> = /*@__PURE__*/ createComponent<IxActionCardElement, IxActionCardEvents>({
    tagName: 'ix-action-card',
    elementClass: IxActionCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxActionCardEvents,
    defineCustomElement: defineIxActionCard
});

export type IxApplicationEvents = NonNullable<unknown>;

export const IxApplication: StencilReactComponent<IxApplicationElement, IxApplicationEvents> = /*@__PURE__*/ createComponent<IxApplicationElement, IxApplicationEvents>({
    tagName: 'ix-application',
    elementClass: IxApplicationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxApplicationEvents,
    defineCustomElement: defineIxApplication
});

export type IxApplicationHeaderEvents = {
    onMenuToggle: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>
};

export const IxApplicationHeader: StencilReactComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents> = /*@__PURE__*/ createComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents>({
    tagName: 'ix-application-header',
    elementClass: IxApplicationHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onMenuToggle: 'menuToggle',
        onOpenAppSwitch: 'openAppSwitch'
    } as IxApplicationHeaderEvents,
    defineCustomElement: defineIxApplicationHeader
});

export type IxAvatarEvents = NonNullable<unknown>;

export const IxAvatar: StencilReactComponent<IxAvatarElement, IxAvatarEvents> = /*@__PURE__*/ createComponent<IxAvatarElement, IxAvatarEvents>({
    tagName: 'ix-avatar',
    elementClass: IxAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxAvatarEvents,
    defineCustomElement: defineIxAvatar
});

export type IxBasicNavigationEvents = NonNullable<unknown>;

export const IxBasicNavigation: StencilReactComponent<IxBasicNavigationElement, IxBasicNavigationEvents> = /*@__PURE__*/ createComponent<IxBasicNavigationElement, IxBasicNavigationEvents>({
    tagName: 'ix-basic-navigation',
    elementClass: IxBasicNavigationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxBasicNavigationEvents,
    defineCustomElement: defineIxBasicNavigation
});

export type IxBlindEvents = { onCollapsedChange: EventName<CustomEvent<boolean>> };

export const IxBlind: StencilReactComponent<IxBlindElement, IxBlindEvents> = /*@__PURE__*/ createComponent<IxBlindElement, IxBlindEvents>({
    tagName: 'ix-blind',
    elementClass: IxBlindElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCollapsedChange: 'collapsedChange' } as IxBlindEvents,
    defineCustomElement: defineIxBlind
});

export type IxBreadcrumbEvents = {
    onItemClick: EventName<CustomEvent<string>>,
    onNextClick: EventName<IxBreadcrumbCustomEvent<{ event: UIEvent; item: string }>>
};

export const IxBreadcrumb: StencilReactComponent<IxBreadcrumbElement, IxBreadcrumbEvents> = /*@__PURE__*/ createComponent<IxBreadcrumbElement, IxBreadcrumbEvents>({
    tagName: 'ix-breadcrumb',
    elementClass: IxBreadcrumbElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onItemClick: 'itemClick',
        onNextClick: 'nextClick'
    } as IxBreadcrumbEvents,
    defineCustomElement: defineIxBreadcrumb
});

export type IxBreadcrumbItemEvents = NonNullable<unknown>;

export const IxBreadcrumbItem: StencilReactComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents> = /*@__PURE__*/ createComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents>({
    tagName: 'ix-breadcrumb-item',
    elementClass: IxBreadcrumbItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxBreadcrumbItemEvents,
    defineCustomElement: defineIxBreadcrumbItem
});

export type IxButtonEvents = NonNullable<unknown>;

export const IxButton: StencilReactComponent<IxButtonElement, IxButtonEvents> = /*@__PURE__*/ createComponent<IxButtonElement, IxButtonEvents>({
    tagName: 'ix-button',
    elementClass: IxButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxButtonEvents,
    defineCustomElement: defineIxButton
});

export type IxCardEvents = NonNullable<unknown>;

export const IxCard: StencilReactComponent<IxCardElement, IxCardEvents> = /*@__PURE__*/ createComponent<IxCardElement, IxCardEvents>({
    tagName: 'ix-card',
    elementClass: IxCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCardEvents,
    defineCustomElement: defineIxCard
});

export type IxCardAccordionEvents = NonNullable<unknown>;

export const IxCardAccordion: StencilReactComponent<IxCardAccordionElement, IxCardAccordionEvents> = /*@__PURE__*/ createComponent<IxCardAccordionElement, IxCardAccordionEvents>({
    tagName: 'ix-card-accordion',
    elementClass: IxCardAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCardAccordionEvents,
    defineCustomElement: defineIxCardAccordion
});

export type IxCardContentEvents = NonNullable<unknown>;

export const IxCardContent: StencilReactComponent<IxCardContentElement, IxCardContentEvents> = /*@__PURE__*/ createComponent<IxCardContentElement, IxCardContentEvents>({
    tagName: 'ix-card-content',
    elementClass: IxCardContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCardContentEvents,
    defineCustomElement: defineIxCardContent
});

export type IxCardListEvents = {
    onCollapseChanged: EventName<CustomEvent<boolean>>,
    onShowAllClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>,
    onShowMoreCardClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>
};

export const IxCardList: StencilReactComponent<IxCardListElement, IxCardListEvents> = /*@__PURE__*/ createComponent<IxCardListElement, IxCardListEvents>({
    tagName: 'ix-card-list',
    elementClass: IxCardListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCollapseChanged: 'collapseChanged',
        onShowAllClick: 'showAllClick',
        onShowMoreCardClick: 'showMoreCardClick'
    } as IxCardListEvents,
    defineCustomElement: defineIxCardList
});

export type IxCardTitleEvents = NonNullable<unknown>;

export const IxCardTitle: StencilReactComponent<IxCardTitleElement, IxCardTitleEvents> = /*@__PURE__*/ createComponent<IxCardTitleElement, IxCardTitleEvents>({
    tagName: 'ix-card-title',
    elementClass: IxCardTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCardTitleEvents,
    defineCustomElement: defineIxCardTitle
});

export type IxCategoryFilterEvents = {
    onCategoryChanged: EventName<CustomEvent<string>>,
    onInputChanged: EventName<IxCategoryFilterCustomEvent<InputState>>,
    onFilterChanged: EventName<IxCategoryFilterCustomEvent<FilterState>>,
    onFilterCleared: EventName<CustomEvent<void>>
};

export const IxCategoryFilter: StencilReactComponent<IxCategoryFilterElement, IxCategoryFilterEvents> = /*@__PURE__*/ createComponent<IxCategoryFilterElement, IxCategoryFilterEvents>({
    tagName: 'ix-category-filter',
    elementClass: IxCategoryFilterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCategoryChanged: 'categoryChanged',
        onInputChanged: 'inputChanged',
        onFilterChanged: 'filterChanged',
        onFilterCleared: 'filterCleared'
    } as IxCategoryFilterEvents,
    defineCustomElement: defineIxCategoryFilter
});

export type IxCheckboxEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxCheckbox: StencilReactComponent<IxCheckboxElement, IxCheckboxEvents> = /*@__PURE__*/ createComponent<IxCheckboxElement, IxCheckboxEvents>({
    tagName: 'ix-checkbox',
    elementClass: IxCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCheckedChange: 'checkedChange',
        onValueChange: 'valueChange'
    } as IxCheckboxEvents,
    defineCustomElement: defineIxCheckbox
});

export type IxCheckboxGroupEvents = NonNullable<unknown>;

export const IxCheckboxGroup: StencilReactComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents> = /*@__PURE__*/ createComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents>({
    tagName: 'ix-checkbox-group',
    elementClass: IxCheckboxGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCheckboxGroupEvents,
    defineCustomElement: defineIxCheckboxGroup
});

export type IxChipEvents = { onCloseChip: EventName<CustomEvent<any>> };

export const IxChip: StencilReactComponent<IxChipElement, IxChipEvents> = /*@__PURE__*/ createComponent<IxChipElement, IxChipEvents>({
    tagName: 'ix-chip',
    elementClass: IxChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCloseChip: 'closeChip' } as IxChipEvents,
    defineCustomElement: defineIxChip
});

export type IxColEvents = NonNullable<unknown>;

export const IxCol: StencilReactComponent<IxColElement, IxColEvents> = /*@__PURE__*/ createComponent<IxColElement, IxColEvents>({
    tagName: 'ix-col',
    elementClass: IxColElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxColEvents,
    defineCustomElement: defineIxCol
});

export type IxContentEvents = NonNullable<unknown>;

export const IxContent: StencilReactComponent<IxContentElement, IxContentEvents> = /*@__PURE__*/ createComponent<IxContentElement, IxContentEvents>({
    tagName: 'ix-content',
    elementClass: IxContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxContentEvents,
    defineCustomElement: defineIxContent
});

export type IxContentHeaderEvents = { onBackButtonClick: EventName<CustomEvent<void>> };

export const IxContentHeader: StencilReactComponent<IxContentHeaderElement, IxContentHeaderEvents> = /*@__PURE__*/ createComponent<IxContentHeaderElement, IxContentHeaderEvents>({
    tagName: 'ix-content-header',
    elementClass: IxContentHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onBackButtonClick: 'backButtonClick' } as IxContentHeaderEvents,
    defineCustomElement: defineIxContentHeader
});

export type IxCustomFieldEvents = NonNullable<unknown>;

export const IxCustomField: StencilReactComponent<IxCustomFieldElement, IxCustomFieldEvents> = /*@__PURE__*/ createComponent<IxCustomFieldElement, IxCustomFieldEvents>({
    tagName: 'ix-custom-field',
    elementClass: IxCustomFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxCustomFieldEvents,
    defineCustomElement: defineIxCustomField
});

export type IxDateDropdownEvents = { onDateRangeChange: EventName<IxDateDropdownCustomEvent<DateRangeChangeEvent>> };

export const IxDateDropdown: StencilReactComponent<IxDateDropdownElement, IxDateDropdownEvents> = /*@__PURE__*/ createComponent<IxDateDropdownElement, IxDateDropdownEvents>({
    tagName: 'ix-date-dropdown',
    elementClass: IxDateDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDateRangeChange: 'dateRangeChange' } as IxDateDropdownEvents,
    defineCustomElement: defineIxDateDropdown
});

export type IxDateInputEvents = {
    onValueChange: EventName<CustomEvent<string | undefined>>,
    onValidityStateChange: EventName<IxDateInputCustomEvent<DateInputValidityState>>
};

export const IxDateInput: StencilReactComponent<IxDateInputElement, IxDateInputEvents> = /*@__PURE__*/ createComponent<IxDateInputElement, IxDateInputEvents>({
    tagName: 'ix-date-input',
    elementClass: IxDateInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onValidityStateChange: 'validityStateChange'
    } as IxDateInputEvents,
    defineCustomElement: defineIxDateInput
});

export type IxDatePickerEvents = {
    onDateChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateRangeChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateSelect: EventName<IxDatePickerCustomEvent<DateChangeEvent>>
};

export const IxDatePicker: StencilReactComponent<IxDatePickerElement, IxDatePickerEvents> = /*@__PURE__*/ createComponent<IxDatePickerElement, IxDatePickerEvents>({
    tagName: 'ix-date-picker',
    elementClass: IxDatePickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDateChange: 'dateChange',
        onDateRangeChange: 'dateRangeChange',
        onDateSelect: 'dateSelect'
    } as IxDatePickerEvents,
    defineCustomElement: defineIxDatePicker
});

export type IxDatetimePickerEvents = {
    onTimeChange: EventName<CustomEvent<string>>,
    onDateChange: EventName<IxDatetimePickerCustomEvent<DateTimeDateChangeEvent>>,
    onDateSelect: EventName<IxDatetimePickerCustomEvent<DateTimeSelectEvent>>
};

export const IxDatetimePicker: StencilReactComponent<IxDatetimePickerElement, IxDatetimePickerEvents> = /*@__PURE__*/ createComponent<IxDatetimePickerElement, IxDatetimePickerEvents>({
    tagName: 'ix-datetime-picker',
    elementClass: IxDatetimePickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTimeChange: 'timeChange',
        onDateChange: 'dateChange',
        onDateSelect: 'dateSelect'
    } as IxDatetimePickerEvents,
    defineCustomElement: defineIxDatetimePicker
});

export type IxDividerEvents = NonNullable<unknown>;

export const IxDivider: StencilReactComponent<IxDividerElement, IxDividerEvents> = /*@__PURE__*/ createComponent<IxDividerElement, IxDividerEvents>({
    tagName: 'ix-divider',
    elementClass: IxDividerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxDividerEvents,
    defineCustomElement: defineIxDivider
});

export type IxDrawerEvents = {
    onOpen: EventName<CustomEvent<any>>,
    onDrawerClose: EventName<CustomEvent<any>>
};

export const IxDrawer: StencilReactComponent<IxDrawerElement, IxDrawerEvents> = /*@__PURE__*/ createComponent<IxDrawerElement, IxDrawerEvents>({
    tagName: 'ix-drawer',
    elementClass: IxDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onOpen: 'open',
        onDrawerClose: 'drawerClose'
    } as IxDrawerEvents,
    defineCustomElement: defineIxDrawer
});

export type IxDropdownEvents = { onShowChanged: EventName<CustomEvent<boolean>> };

export const IxDropdown: StencilReactComponent<IxDropdownElement, IxDropdownEvents> = /*@__PURE__*/ createComponent<IxDropdownElement, IxDropdownEvents>({
    tagName: 'ix-dropdown',
    elementClass: IxDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onShowChanged: 'showChanged' } as IxDropdownEvents,
    defineCustomElement: defineIxDropdown
});

export type IxDropdownButtonEvents = NonNullable<unknown>;

export const IxDropdownButton: StencilReactComponent<IxDropdownButtonElement, IxDropdownButtonEvents> = /*@__PURE__*/ createComponent<IxDropdownButtonElement, IxDropdownButtonEvents>({
    tagName: 'ix-dropdown-button',
    elementClass: IxDropdownButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxDropdownButtonEvents,
    defineCustomElement: defineIxDropdownButton
});

export type IxDropdownHeaderEvents = NonNullable<unknown>;

export const IxDropdownHeader: StencilReactComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents> = /*@__PURE__*/ createComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents>({
    tagName: 'ix-dropdown-header',
    elementClass: IxDropdownHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxDropdownHeaderEvents,
    defineCustomElement: defineIxDropdownHeader
});

export type IxDropdownItemEvents = NonNullable<unknown>;

export const IxDropdownItem: StencilReactComponent<IxDropdownItemElement, IxDropdownItemEvents> = /*@__PURE__*/ createComponent<IxDropdownItemElement, IxDropdownItemEvents>({
    tagName: 'ix-dropdown-item',
    elementClass: IxDropdownItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxDropdownItemEvents,
    defineCustomElement: defineIxDropdownItem
});

export type IxDropdownQuickActionsEvents = NonNullable<unknown>;

export const IxDropdownQuickActions: StencilReactComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents> = /*@__PURE__*/ createComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents>({
    tagName: 'ix-dropdown-quick-actions',
    elementClass: IxDropdownQuickActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxDropdownQuickActionsEvents,
    defineCustomElement: defineIxDropdownQuickActions
});

export type IxEmptyStateEvents = { onActionClick: EventName<CustomEvent<void>> };

export const IxEmptyState: StencilReactComponent<IxEmptyStateElement, IxEmptyStateEvents> = /*@__PURE__*/ createComponent<IxEmptyStateElement, IxEmptyStateEvents>({
    tagName: 'ix-empty-state',
    elementClass: IxEmptyStateElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onActionClick: 'actionClick' } as IxEmptyStateEvents,
    defineCustomElement: defineIxEmptyState
});

export type IxEventListEvents = NonNullable<unknown>;

export const IxEventList: StencilReactComponent<IxEventListElement, IxEventListEvents> = /*@__PURE__*/ createComponent<IxEventListElement, IxEventListEvents>({
    tagName: 'ix-event-list',
    elementClass: IxEventListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxEventListEvents,
    defineCustomElement: defineIxEventList
});

export type IxEventListItemEvents = { onItemClick: EventName<CustomEvent<any>> };

export const IxEventListItem: StencilReactComponent<IxEventListItemElement, IxEventListItemEvents> = /*@__PURE__*/ createComponent<IxEventListItemElement, IxEventListItemEvents>({
    tagName: 'ix-event-list-item',
    elementClass: IxEventListItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onItemClick: 'itemClick' } as IxEventListItemEvents,
    defineCustomElement: defineIxEventListItem
});

export type IxExpandingSearchEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxExpandingSearch: StencilReactComponent<IxExpandingSearchElement, IxExpandingSearchEvents> = /*@__PURE__*/ createComponent<IxExpandingSearchElement, IxExpandingSearchEvents>({
    tagName: 'ix-expanding-search',
    elementClass: IxExpandingSearchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as IxExpandingSearchEvents,
    defineCustomElement: defineIxExpandingSearch
});

export type IxFieldLabelEvents = NonNullable<unknown>;

export const IxFieldLabel: StencilReactComponent<IxFieldLabelElement, IxFieldLabelEvents> = /*@__PURE__*/ createComponent<IxFieldLabelElement, IxFieldLabelEvents>({
    tagName: 'ix-field-label',
    elementClass: IxFieldLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxFieldLabelEvents,
    defineCustomElement: defineIxFieldLabel
});

export type IxFilterChipEvents = { onCloseClick: EventName<CustomEvent<void>> };

export const IxFilterChip: StencilReactComponent<IxFilterChipElement, IxFilterChipEvents> = /*@__PURE__*/ createComponent<IxFilterChipElement, IxFilterChipEvents>({
    tagName: 'ix-filter-chip',
    elementClass: IxFilterChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCloseClick: 'closeClick' } as IxFilterChipEvents,
    defineCustomElement: defineIxFilterChip
});

export type IxFlipTileEvents = { onToggle: EventName<CustomEvent<number>> };

export const IxFlipTile: StencilReactComponent<IxFlipTileElement, IxFlipTileEvents> = /*@__PURE__*/ createComponent<IxFlipTileElement, IxFlipTileEvents>({
    tagName: 'ix-flip-tile',
    elementClass: IxFlipTileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onToggle: 'toggle' } as IxFlipTileEvents,
    defineCustomElement: defineIxFlipTile
});

export type IxFlipTileContentEvents = NonNullable<unknown>;

export const IxFlipTileContent: StencilReactComponent<IxFlipTileContentElement, IxFlipTileContentEvents> = /*@__PURE__*/ createComponent<IxFlipTileContentElement, IxFlipTileContentEvents>({
    tagName: 'ix-flip-tile-content',
    elementClass: IxFlipTileContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxFlipTileContentEvents,
    defineCustomElement: defineIxFlipTileContent
});

export type IxGroupEvents = {
    onSelectGroup: EventName<CustomEvent<boolean>>,
    onSelectItem: EventName<CustomEvent<number>>,
    onCollapsedChanged: EventName<CustomEvent<boolean>>
};

export const IxGroup: StencilReactComponent<IxGroupElement, IxGroupEvents> = /*@__PURE__*/ createComponent<IxGroupElement, IxGroupEvents>({
    tagName: 'ix-group',
    elementClass: IxGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onSelectGroup: 'selectGroup',
        onSelectItem: 'selectItem',
        onCollapsedChanged: 'collapsedChanged'
    } as IxGroupEvents,
    defineCustomElement: defineIxGroup
});

export type IxGroupContextMenuEvents = NonNullable<unknown>;

export const IxGroupContextMenu: StencilReactComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents> = /*@__PURE__*/ createComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents>({
    tagName: 'ix-group-context-menu',
    elementClass: IxGroupContextMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxGroupContextMenuEvents,
    defineCustomElement: defineIxGroupContextMenu
});

export type IxGroupItemEvents = { onSelectedChanged: EventName<IxGroupItemCustomEvent<HTMLIxGroupItemElement>> };

export const IxGroupItem: StencilReactComponent<IxGroupItemElement, IxGroupItemEvents> = /*@__PURE__*/ createComponent<IxGroupItemElement, IxGroupItemEvents>({
    tagName: 'ix-group-item',
    elementClass: IxGroupItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onSelectedChanged: 'selectedChanged' } as IxGroupItemEvents,
    defineCustomElement: defineIxGroupItem
});

export type IxHelperTextEvents = NonNullable<unknown>;

export const IxHelperText: StencilReactComponent<IxHelperTextElement, IxHelperTextEvents> = /*@__PURE__*/ createComponent<IxHelperTextElement, IxHelperTextEvents>({
    tagName: 'ix-helper-text',
    elementClass: IxHelperTextElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxHelperTextEvents,
    defineCustomElement: defineIxHelperText
});

export type IxIconButtonEvents = NonNullable<unknown>;

export const IxIconButton: StencilReactComponent<IxIconButtonElement, IxIconButtonEvents> = /*@__PURE__*/ createComponent<IxIconButtonElement, IxIconButtonEvents>({
    tagName: 'ix-icon-button',
    elementClass: IxIconButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxIconButtonEvents,
    defineCustomElement: defineIxIconButton
});

export type IxIconToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxIconToggleButton: StencilReactComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents> = /*@__PURE__*/ createComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents>({
    tagName: 'ix-icon-toggle-button',
    elementClass: IxIconToggleButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPressedChange: 'pressedChange' } as IxIconToggleButtonEvents,
    defineCustomElement: defineIxIconToggleButton
});

export type IxInputEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxInput: StencilReactComponent<IxInputElement, IxInputEvents> = /*@__PURE__*/ createComponent<IxInputElement, IxInputEvents>({
    tagName: 'ix-input',
    elementClass: IxInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onValidityStateChange: 'validityStateChange',
        onIxBlur: 'ixBlur'
    } as IxInputEvents,
    defineCustomElement: defineIxInput
});

export type IxInputGroupEvents = NonNullable<unknown>;

export const IxInputGroup: StencilReactComponent<IxInputGroupElement, IxInputGroupEvents> = /*@__PURE__*/ createComponent<IxInputGroupElement, IxInputGroupEvents>({
    tagName: 'ix-input-group',
    elementClass: IxInputGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxInputGroupEvents,
    defineCustomElement: defineIxInputGroup
});

export type IxKeyValueEvents = NonNullable<unknown>;

export const IxKeyValue: StencilReactComponent<IxKeyValueElement, IxKeyValueEvents> = /*@__PURE__*/ createComponent<IxKeyValueElement, IxKeyValueEvents>({
    tagName: 'ix-key-value',
    elementClass: IxKeyValueElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxKeyValueEvents,
    defineCustomElement: defineIxKeyValue
});

export type IxKeyValueListEvents = NonNullable<unknown>;

export const IxKeyValueList: StencilReactComponent<IxKeyValueListElement, IxKeyValueListEvents> = /*@__PURE__*/ createComponent<IxKeyValueListElement, IxKeyValueListEvents>({
    tagName: 'ix-key-value-list',
    elementClass: IxKeyValueListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxKeyValueListEvents,
    defineCustomElement: defineIxKeyValueList
});

export type IxKpiEvents = NonNullable<unknown>;

export const IxKpi: StencilReactComponent<IxKpiElement, IxKpiEvents> = /*@__PURE__*/ createComponent<IxKpiElement, IxKpiEvents>({
    tagName: 'ix-kpi',
    elementClass: IxKpiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxKpiEvents,
    defineCustomElement: defineIxKpi
});

export type IxLayoutAutoEvents = NonNullable<unknown>;

export const IxLayoutAuto: StencilReactComponent<IxLayoutAutoElement, IxLayoutAutoEvents> = /*@__PURE__*/ createComponent<IxLayoutAutoElement, IxLayoutAutoEvents>({
    tagName: 'ix-layout-auto',
    elementClass: IxLayoutAutoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxLayoutAutoEvents,
    defineCustomElement: defineIxLayoutAuto
});

export type IxLayoutGridEvents = NonNullable<unknown>;

export const IxLayoutGrid: StencilReactComponent<IxLayoutGridElement, IxLayoutGridEvents> = /*@__PURE__*/ createComponent<IxLayoutGridElement, IxLayoutGridEvents>({
    tagName: 'ix-layout-grid',
    elementClass: IxLayoutGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxLayoutGridEvents,
    defineCustomElement: defineIxLayoutGrid
});

export type IxLinkButtonEvents = NonNullable<unknown>;

export const IxLinkButton: StencilReactComponent<IxLinkButtonElement, IxLinkButtonEvents> = /*@__PURE__*/ createComponent<IxLinkButtonElement, IxLinkButtonEvents>({
    tagName: 'ix-link-button',
    elementClass: IxLinkButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxLinkButtonEvents,
    defineCustomElement: defineIxLinkButton
});

export type IxMapNavigationEvents = {
    onNavigationToggled: EventName<CustomEvent<boolean>>,
    onContextMenuClick: EventName<CustomEvent<void>>
};

export const IxMapNavigation: StencilReactComponent<IxMapNavigationElement, IxMapNavigationEvents> = /*@__PURE__*/ createComponent<IxMapNavigationElement, IxMapNavigationEvents>({
    tagName: 'ix-map-navigation',
    elementClass: IxMapNavigationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onNavigationToggled: 'navigationToggled',
        onContextMenuClick: 'contextMenuClick'
    } as IxMapNavigationEvents,
    defineCustomElement: defineIxMapNavigation
});

export type IxMapNavigationOverlayEvents = { onCloseClick: EventName<CustomEvent<any>> };

export const IxMapNavigationOverlay: StencilReactComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents> = /*@__PURE__*/ createComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents>({
    tagName: 'ix-map-navigation-overlay',
    elementClass: IxMapNavigationOverlayElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCloseClick: 'closeClick' } as IxMapNavigationOverlayEvents,
    defineCustomElement: defineIxMapNavigationOverlay
});

export type IxMenuEvents = {
    onExpandChange: EventName<CustomEvent<boolean>>,
    onMapExpandChange: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>,
    onOpenSettings: EventName<CustomEvent<void>>,
    onOpenAbout: EventName<CustomEvent<void>>
};

export const IxMenu: StencilReactComponent<IxMenuElement, IxMenuEvents> = /*@__PURE__*/ createComponent<IxMenuElement, IxMenuEvents>({
    tagName: 'ix-menu',
    elementClass: IxMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onExpandChange: 'expandChange',
        onMapExpandChange: 'mapExpandChange',
        onOpenAppSwitch: 'openAppSwitch',
        onOpenSettings: 'openSettings',
        onOpenAbout: 'openAbout'
    } as IxMenuEvents,
    defineCustomElement: defineIxMenu
});

export type IxMenuAboutEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuAboutCustomEvent<CustomCloseEvent>>
};

export const IxMenuAbout: StencilReactComponent<IxMenuAboutElement, IxMenuAboutEvents> = /*@__PURE__*/ createComponent<IxMenuAboutElement, IxMenuAboutEvents>({
    tagName: 'ix-menu-about',
    elementClass: IxMenuAboutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTabChange: 'tabChange',
        onClose: 'close'
    } as IxMenuAboutEvents,
    defineCustomElement: defineIxMenuAbout
});

export type IxMenuAboutItemEvents = { onLabelChange: EventName<IxMenuAboutItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuAboutItem: StencilReactComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents> = /*@__PURE__*/ createComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents>({
    tagName: 'ix-menu-about-item',
    elementClass: IxMenuAboutItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onLabelChange: 'labelChange' } as IxMenuAboutItemEvents,
    defineCustomElement: defineIxMenuAboutItem
});

export type IxMenuAboutNewsEvents = {
    onShowMore: EventName<IxMenuAboutNewsCustomEvent<MouseEvent>>,
    onClosePopover: EventName<CustomEvent<void>>
};

export const IxMenuAboutNews: StencilReactComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents> = /*@__PURE__*/ createComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents>({
    tagName: 'ix-menu-about-news',
    elementClass: IxMenuAboutNewsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onShowMore: 'showMore',
        onClosePopover: 'closePopover'
    } as IxMenuAboutNewsEvents,
    defineCustomElement: defineIxMenuAboutNews
});

export type IxMenuAvatarEvents = { onLogoutClick: EventName<CustomEvent<any>> };

export const IxMenuAvatar: StencilReactComponent<IxMenuAvatarElement, IxMenuAvatarEvents> = /*@__PURE__*/ createComponent<IxMenuAvatarElement, IxMenuAvatarEvents>({
    tagName: 'ix-menu-avatar',
    elementClass: IxMenuAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onLogoutClick: 'logoutClick' } as IxMenuAvatarEvents,
    defineCustomElement: defineIxMenuAvatar
});

export type IxMenuAvatarItemEvents = { onItemClick: EventName<IxMenuAvatarItemCustomEvent<MouseEvent>> };

export const IxMenuAvatarItem: StencilReactComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents> = /*@__PURE__*/ createComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents>({
    tagName: 'ix-menu-avatar-item',
    elementClass: IxMenuAvatarItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onItemClick: 'itemClick' } as IxMenuAvatarItemEvents,
    defineCustomElement: defineIxMenuAvatarItem
});

export type IxMenuCategoryEvents = NonNullable<unknown>;

export const IxMenuCategory: StencilReactComponent<IxMenuCategoryElement, IxMenuCategoryEvents> = /*@__PURE__*/ createComponent<IxMenuCategoryElement, IxMenuCategoryEvents>({
    tagName: 'ix-menu-category',
    elementClass: IxMenuCategoryElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxMenuCategoryEvents,
    defineCustomElement: defineIxMenuCategory
});

export type IxMenuItemEvents = NonNullable<unknown>;

export const IxMenuItem: StencilReactComponent<IxMenuItemElement, IxMenuItemEvents> = /*@__PURE__*/ createComponent<IxMenuItemElement, IxMenuItemEvents>({
    tagName: 'ix-menu-item',
    elementClass: IxMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxMenuItemEvents,
    defineCustomElement: defineIxMenuItem
});

export type IxMenuSettingsEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuSettingsCustomEvent<CustomCloseEvent>>
};

export const IxMenuSettings: StencilReactComponent<IxMenuSettingsElement, IxMenuSettingsEvents> = /*@__PURE__*/ createComponent<IxMenuSettingsElement, IxMenuSettingsEvents>({
    tagName: 'ix-menu-settings',
    elementClass: IxMenuSettingsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTabChange: 'tabChange',
        onClose: 'close'
    } as IxMenuSettingsEvents,
    defineCustomElement: defineIxMenuSettings
});

export type IxMenuSettingsItemEvents = { onLabelChange: EventName<IxMenuSettingsItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuSettingsItem: StencilReactComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents> = /*@__PURE__*/ createComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents>({
    tagName: 'ix-menu-settings-item',
    elementClass: IxMenuSettingsItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onLabelChange: 'labelChange' } as IxMenuSettingsItemEvents,
    defineCustomElement: defineIxMenuSettingsItem
});

export type IxMessageBarEvents = {
    onClosedChange: EventName<CustomEvent<any>>,
    onCloseAnimationCompleted: EventName<CustomEvent<any>>
};

export const IxMessageBar: StencilReactComponent<IxMessageBarElement, IxMessageBarEvents> = /*@__PURE__*/ createComponent<IxMessageBarElement, IxMessageBarEvents>({
    tagName: 'ix-message-bar',
    elementClass: IxMessageBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onClosedChange: 'closedChange',
        onCloseAnimationCompleted: 'closeAnimationCompleted'
    } as IxMessageBarEvents,
    defineCustomElement: defineIxMessageBar
});

export type IxModalEvents = {
    onDialogClose: EventName<CustomEvent<any>>,
    onDialogDismiss: EventName<CustomEvent<any>>
};

export const IxModal: StencilReactComponent<IxModalElement, IxModalEvents> = /*@__PURE__*/ createComponent<IxModalElement, IxModalEvents>({
    tagName: 'ix-modal',
    elementClass: IxModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDialogClose: 'dialogClose',
        onDialogDismiss: 'dialogDismiss'
    } as IxModalEvents,
    defineCustomElement: defineIxModal
});

export type IxModalContentEvents = NonNullable<unknown>;

export const IxModalContent: StencilReactComponent<IxModalContentElement, IxModalContentEvents> = /*@__PURE__*/ createComponent<IxModalContentElement, IxModalContentEvents>({
    tagName: 'ix-modal-content',
    elementClass: IxModalContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxModalContentEvents,
    defineCustomElement: defineIxModalContent
});

export type IxModalFooterEvents = NonNullable<unknown>;

export const IxModalFooter: StencilReactComponent<IxModalFooterElement, IxModalFooterEvents> = /*@__PURE__*/ createComponent<IxModalFooterElement, IxModalFooterEvents>({
    tagName: 'ix-modal-footer',
    elementClass: IxModalFooterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxModalFooterEvents,
    defineCustomElement: defineIxModalFooter
});

export type IxModalHeaderEvents = { onCloseClick: EventName<IxModalHeaderCustomEvent<MouseEvent>> };

export const IxModalHeader: StencilReactComponent<IxModalHeaderElement, IxModalHeaderEvents> = /*@__PURE__*/ createComponent<IxModalHeaderElement, IxModalHeaderEvents>({
    tagName: 'ix-modal-header',
    elementClass: IxModalHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCloseClick: 'closeClick' } as IxModalHeaderEvents,
    defineCustomElement: defineIxModalHeader
});

export type IxNumberInputEvents = {
    onValueChange: EventName<CustomEvent<number>>,
    onValidityStateChange: EventName<IxNumberInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxNumberInput: StencilReactComponent<IxNumberInputElement, IxNumberInputEvents> = /*@__PURE__*/ createComponent<IxNumberInputElement, IxNumberInputEvents>({
    tagName: 'ix-number-input',
    elementClass: IxNumberInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onValidityStateChange: 'validityStateChange',
        onIxBlur: 'ixBlur'
    } as IxNumberInputEvents,
    defineCustomElement: defineIxNumberInput
});

export type IxPaginationEvents = {
    onPageSelected: EventName<CustomEvent<number>>,
    onItemCountChanged: EventName<CustomEvent<number>>
};

export const IxPagination: StencilReactComponent<IxPaginationElement, IxPaginationEvents> = /*@__PURE__*/ createComponent<IxPaginationElement, IxPaginationEvents>({
    tagName: 'ix-pagination',
    elementClass: IxPaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPageSelected: 'pageSelected',
        onItemCountChanged: 'itemCountChanged'
    } as IxPaginationEvents,
    defineCustomElement: defineIxPagination
});

export type IxPaneEvents = {
    onExpandedChanged: EventName<IxPaneCustomEvent<ExpandedChangedEvent>>,
    onVariantChanged: EventName<IxPaneCustomEvent<VariantChangedEvent>>,
    onBorderlessChanged: EventName<IxPaneCustomEvent<BorderlessChangedEvent>>
};

export const IxPane: StencilReactComponent<IxPaneElement, IxPaneEvents> = /*@__PURE__*/ createComponent<IxPaneElement, IxPaneEvents>({
    tagName: 'ix-pane',
    elementClass: IxPaneElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onExpandedChanged: 'expandedChanged',
        onVariantChanged: 'variantChanged',
        onBorderlessChanged: 'borderlessChanged'
    } as IxPaneEvents,
    defineCustomElement: defineIxPane
});

export type IxPaneLayoutEvents = NonNullable<unknown>;

export const IxPaneLayout: StencilReactComponent<IxPaneLayoutElement, IxPaneLayoutEvents> = /*@__PURE__*/ createComponent<IxPaneLayoutElement, IxPaneLayoutEvents>({
    tagName: 'ix-pane-layout',
    elementClass: IxPaneLayoutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxPaneLayoutEvents,
    defineCustomElement: defineIxPaneLayout
});

export type IxPillEvents = NonNullable<unknown>;

export const IxPill: StencilReactComponent<IxPillElement, IxPillEvents> = /*@__PURE__*/ createComponent<IxPillElement, IxPillEvents>({
    tagName: 'ix-pill',
    elementClass: IxPillElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxPillEvents,
    defineCustomElement: defineIxPill
});

export type IxPushCardEvents = NonNullable<unknown>;

export const IxPushCard: StencilReactComponent<IxPushCardElement, IxPushCardEvents> = /*@__PURE__*/ createComponent<IxPushCardElement, IxPushCardEvents>({
    tagName: 'ix-push-card',
    elementClass: IxPushCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxPushCardEvents,
    defineCustomElement: defineIxPushCard
});

export type IxRadioEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxRadio: StencilReactComponent<IxRadioElement, IxRadioEvents> = /*@__PURE__*/ createComponent<IxRadioElement, IxRadioEvents>({
    tagName: 'ix-radio',
    elementClass: IxRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCheckedChange: 'checkedChange',
        onValueChange: 'valueChange'
    } as IxRadioEvents,
    defineCustomElement: defineIxRadio
});

export type IxRadioGroupEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxRadioGroup: StencilReactComponent<IxRadioGroupElement, IxRadioGroupEvents> = /*@__PURE__*/ createComponent<IxRadioGroupElement, IxRadioGroupEvents>({
    tagName: 'ix-radio-group',
    elementClass: IxRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as IxRadioGroupEvents,
    defineCustomElement: defineIxRadioGroup
});

export type IxRowEvents = NonNullable<unknown>;

export const IxRow: StencilReactComponent<IxRowElement, IxRowEvents> = /*@__PURE__*/ createComponent<IxRowElement, IxRowEvents>({
    tagName: 'ix-row',
    elementClass: IxRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxRowEvents,
    defineCustomElement: defineIxRow
});

export type IxSelectEvents = {
    onValueChange: EventName<CustomEvent<string | string[]>>,
    onInputChange: EventName<CustomEvent<string>>,
    onAddItem: EventName<CustomEvent<string>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxSelect: StencilReactComponent<IxSelectElement, IxSelectEvents> = /*@__PURE__*/ createComponent<IxSelectElement, IxSelectEvents>({
    tagName: 'ix-select',
    elementClass: IxSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onInputChange: 'inputChange',
        onAddItem: 'addItem',
        onIxBlur: 'ixBlur'
    } as IxSelectEvents,
    defineCustomElement: defineIxSelect
});

export type IxSelectItemEvents = { onItemClick: EventName<CustomEvent<string>> };

export const IxSelectItem: StencilReactComponent<IxSelectItemElement, IxSelectItemEvents> = /*@__PURE__*/ createComponent<IxSelectItemElement, IxSelectItemEvents>({
    tagName: 'ix-select-item',
    elementClass: IxSelectItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onItemClick: 'itemClick' } as IxSelectItemEvents,
    defineCustomElement: defineIxSelectItem
});

export type IxSliderEvents = { onValueChange: EventName<CustomEvent<number>> };

export const IxSlider: StencilReactComponent<IxSliderElement, IxSliderEvents> = /*@__PURE__*/ createComponent<IxSliderElement, IxSliderEvents>({
    tagName: 'ix-slider',
    elementClass: IxSliderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as IxSliderEvents,
    defineCustomElement: defineIxSlider
});

export type IxSpinnerEvents = NonNullable<unknown>;

export const IxSpinner: StencilReactComponent<IxSpinnerElement, IxSpinnerEvents> = /*@__PURE__*/ createComponent<IxSpinnerElement, IxSpinnerEvents>({
    tagName: 'ix-spinner',
    elementClass: IxSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxSpinnerEvents,
    defineCustomElement: defineIxSpinner
});

export type IxSplitButtonEvents = { onButtonClick: EventName<IxSplitButtonCustomEvent<MouseEvent>> };

export const IxSplitButton: StencilReactComponent<IxSplitButtonElement, IxSplitButtonEvents> = /*@__PURE__*/ createComponent<IxSplitButtonElement, IxSplitButtonEvents>({
    tagName: 'ix-split-button',
    elementClass: IxSplitButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onButtonClick: 'buttonClick' } as IxSplitButtonEvents,
    defineCustomElement: defineIxSplitButton
});

export type IxTabItemEvents = { onTabClick: EventName<IxTabItemCustomEvent<TabClickDetail>> };

export const IxTabItem: StencilReactComponent<IxTabItemElement, IxTabItemEvents> = /*@__PURE__*/ createComponent<IxTabItemElement, IxTabItemEvents>({
    tagName: 'ix-tab-item',
    elementClass: IxTabItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onTabClick: 'tabClick' } as IxTabItemEvents,
    defineCustomElement: defineIxTabItem
});

export type IxTabsEvents = { onSelectedChange: EventName<CustomEvent<number>> };

export const IxTabs: StencilReactComponent<IxTabsElement, IxTabsEvents> = /*@__PURE__*/ createComponent<IxTabsElement, IxTabsEvents>({
    tagName: 'ix-tabs',
    elementClass: IxTabsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onSelectedChange: 'selectedChange' } as IxTabsEvents,
    defineCustomElement: defineIxTabs
});

export type IxTextareaEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxTextareaCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxTextarea: StencilReactComponent<IxTextareaElement, IxTextareaEvents> = /*@__PURE__*/ createComponent<IxTextareaElement, IxTextareaEvents>({
    tagName: 'ix-textarea',
    elementClass: IxTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onValidityStateChange: 'validityStateChange',
        onIxBlur: 'ixBlur'
    } as IxTextareaEvents,
    defineCustomElement: defineIxTextarea
});

export type IxTileEvents = NonNullable<unknown>;

export const IxTile: StencilReactComponent<IxTileElement, IxTileEvents> = /*@__PURE__*/ createComponent<IxTileElement, IxTileEvents>({
    tagName: 'ix-tile',
    elementClass: IxTileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxTileEvents,
    defineCustomElement: defineIxTile
});

export type IxTimePickerEvents = {
    onTimeSelect: EventName<CustomEvent<string>>,
    onTimeChange: EventName<CustomEvent<string>>
};

export const IxTimePicker: StencilReactComponent<IxTimePickerElement, IxTimePickerEvents> = /*@__PURE__*/ createComponent<IxTimePickerElement, IxTimePickerEvents>({
    tagName: 'ix-time-picker',
    elementClass: IxTimePickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTimeSelect: 'timeSelect',
        onTimeChange: 'timeChange'
    } as IxTimePickerEvents,
    defineCustomElement: defineIxTimePicker
});

export type IxToastEvents = { onCloseToast: EventName<CustomEvent<any>> };

export const IxToast: StencilReactComponent<IxToastElement, IxToastEvents> = /*@__PURE__*/ createComponent<IxToastElement, IxToastEvents>({
    tagName: 'ix-toast',
    elementClass: IxToastElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCloseToast: 'closeToast' } as IxToastEvents,
    defineCustomElement: defineIxToast
});

export type IxToastContainerEvents = NonNullable<unknown>;

export const IxToastContainer: StencilReactComponent<IxToastContainerElement, IxToastContainerEvents> = /*@__PURE__*/ createComponent<IxToastContainerElement, IxToastContainerEvents>({
    tagName: 'ix-toast-container',
    elementClass: IxToastContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxToastContainerEvents,
    defineCustomElement: defineIxToastContainer
});

export type IxToggleEvents = { onCheckedChange: EventName<CustomEvent<boolean>> };

export const IxToggle: StencilReactComponent<IxToggleElement, IxToggleEvents> = /*@__PURE__*/ createComponent<IxToggleElement, IxToggleEvents>({
    tagName: 'ix-toggle',
    elementClass: IxToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCheckedChange: 'checkedChange' } as IxToggleEvents,
    defineCustomElement: defineIxToggle
});

export type IxToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxToggleButton: StencilReactComponent<IxToggleButtonElement, IxToggleButtonEvents> = /*@__PURE__*/ createComponent<IxToggleButtonElement, IxToggleButtonEvents>({
    tagName: 'ix-toggle-button',
    elementClass: IxToggleButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPressedChange: 'pressedChange' } as IxToggleButtonEvents,
    defineCustomElement: defineIxToggleButton
});

export type IxTooltipEvents = NonNullable<unknown>;

export const IxTooltip: StencilReactComponent<IxTooltipElement, IxTooltipEvents> = /*@__PURE__*/ createComponent<IxTooltipElement, IxTooltipEvents>({
    tagName: 'ix-tooltip',
    elementClass: IxTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxTooltipEvents,
    defineCustomElement: defineIxTooltip
});

export type IxTypographyEvents = NonNullable<unknown>;

export const IxTypography: StencilReactComponent<IxTypographyElement, IxTypographyEvents> = /*@__PURE__*/ createComponent<IxTypographyElement, IxTypographyEvents>({
    tagName: 'ix-typography',
    elementClass: IxTypographyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxTypographyEvents,
    defineCustomElement: defineIxTypography
});

export type IxUploadEvents = { onFilesChanged: EventName<IxUploadCustomEvent<Array<File>>> };

export const IxUpload: StencilReactComponent<IxUploadElement, IxUploadEvents> = /*@__PURE__*/ createComponent<IxUploadElement, IxUploadEvents>({
    tagName: 'ix-upload',
    elementClass: IxUploadElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onFilesChanged: 'filesChanged' } as IxUploadEvents,
    defineCustomElement: defineIxUpload
});

export type IxValidationTooltipEvents = NonNullable<unknown>;

export const IxValidationTooltip: StencilReactComponent<IxValidationTooltipElement, IxValidationTooltipEvents> = /*@__PURE__*/ createComponent<IxValidationTooltipElement, IxValidationTooltipEvents>({
    tagName: 'ix-validation-tooltip',
    elementClass: IxValidationTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxValidationTooltipEvents,
    defineCustomElement: defineIxValidationTooltip
});

export type IxWorkflowStepEvents = NonNullable<unknown>;

export const IxWorkflowStep: StencilReactComponent<IxWorkflowStepElement, IxWorkflowStepEvents> = /*@__PURE__*/ createComponent<IxWorkflowStepElement, IxWorkflowStepEvents>({
    tagName: 'ix-workflow-step',
    elementClass: IxWorkflowStepElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as IxWorkflowStepEvents,
    defineCustomElement: defineIxWorkflowStep
});

export type IxWorkflowStepsEvents = { onStepSelected: EventName<CustomEvent<number>> };

export const IxWorkflowSteps: StencilReactComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents> = /*@__PURE__*/ createComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents>({
    tagName: 'ix-workflow-steps',
    elementClass: IxWorkflowStepsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onStepSelected: 'stepSelected' } as IxWorkflowStepsEvents,
    defineCustomElement: defineIxWorkflowSteps
});
